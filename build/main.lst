ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB95:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : RTC 9H
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "usb_device.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "USER/user.c"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** IWDG_HandleTypeDef hiwdg;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** RTC_HandleTypeDef hrtc;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/main.c **** void SystemClock_Config(void);
  56:Core/Src/main.c **** static void MX_GPIO_Init(void);
  57:Core/Src/main.c **** static void MX_RTC_Init(void);
  58:Core/Src/main.c **** static void MX_TIM1_Init(void);
  59:Core/Src/main.c **** static void MX_IWDG_Init(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END 0 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /**
  70:Core/Src/main.c ****   * @brief  The application entry point.
  71:Core/Src/main.c ****   * @retval int
  72:Core/Src/main.c ****   */
  73:Core/Src/main.c **** int main(void)
  74:Core/Src/main.c **** {
  75:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* USER CODE END 1 */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  82:Core/Src/main.c ****   HAL_Init();
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END Init */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* Configure the system clock */
  89:Core/Src/main.c ****   SystemClock_Config();
  90:Core/Src/main.c **** 
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 3


  91:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END SysInit */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Initialize all configured peripherals */
  96:Core/Src/main.c ****   MX_GPIO_Init();
  97:Core/Src/main.c ****   MX_RTC_Init();
  98:Core/Src/main.c ****   MX_TIM1_Init();
  99:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 100:Core/Src/main.c ****   MX_IWDG_Init();
 101:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 102:Core/Src/main.c **** user_init();
 103:Core/Src/main.c ****   /* USER CODE END 2 */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* Infinite loop */
 106:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 107:Core/Src/main.c ****   while (1)
 108:Core/Src/main.c ****   {
 109:Core/Src/main.c ****     /* USER CODE END WHILE */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 112:Core/Src/main.c **** 	user_loop();
 113:Core/Src/main.c ****   }
 114:Core/Src/main.c ****   /* USER CODE END 3 */
 115:Core/Src/main.c **** }
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /**
 118:Core/Src/main.c ****   * @brief System Clock Configuration
 119:Core/Src/main.c ****   * @retval None
 120:Core/Src/main.c ****   */
 121:Core/Src/main.c **** void SystemClock_Config(void)
 122:Core/Src/main.c **** {
 123:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 124:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 125:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 128:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 129:Core/Src/main.c ****   */
 130:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 131:Core/Src/main.c ****                               |RCC_OSCILLATORTYPE_LSE;
 132:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 133:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 134:Core/Src/main.c ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 135:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 136:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 137:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 138:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 139:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 140:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 141:Core/Src/main.c ****   {
 142:Core/Src/main.c ****     Error_Handler();
 143:Core/Src/main.c ****   }
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 146:Core/Src/main.c ****   */
 147:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 4


 148:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 149:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 150:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 151:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 152:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 155:Core/Src/main.c ****   {
 156:Core/Src/main.c ****     Error_Handler();
 157:Core/Src/main.c ****   }
 158:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 159:Core/Src/main.c ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 160:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 161:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     Error_Handler();
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c **** }
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** /**
 168:Core/Src/main.c ****   * @brief IWDG Initialization Function
 169:Core/Src/main.c ****   * @param None
 170:Core/Src/main.c ****   * @retval None
 171:Core/Src/main.c ****   */
 172:Core/Src/main.c **** static void MX_IWDG_Init(void)
 173:Core/Src/main.c **** {
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 0 */
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* USER CODE END IWDG_Init 0 */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 1 */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* USER CODE END IWDG_Init 1 */
 182:Core/Src/main.c ****   hiwdg.Instance = IWDG;
 183:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 184:Core/Src/main.c ****   hiwdg.Init.Reload = 4095;
 185:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 186:Core/Src/main.c ****   {
 187:Core/Src/main.c ****     Error_Handler();
 188:Core/Src/main.c ****   }
 189:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 2 */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END IWDG_Init 2 */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** }
 194:Core/Src/main.c **** 
 195:Core/Src/main.c **** /**
 196:Core/Src/main.c ****   * @brief RTC Initialization Function
 197:Core/Src/main.c ****   * @param None
 198:Core/Src/main.c ****   * @retval None
 199:Core/Src/main.c ****   */
 200:Core/Src/main.c **** static void MX_RTC_Init(void)
 201:Core/Src/main.c **** {
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 0 */
 204:Core/Src/main.c **** 
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 5


 205:Core/Src/main.c ****   /* USER CODE END RTC_Init 0 */
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   RTC_TimeTypeDef sTime = {0};
 208:Core/Src/main.c ****   RTC_DateTypeDef DateToUpdate = {0};
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 1 */
 211:Core/Src/main.c ****   hrtc.Instance = RTC;
 212:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 213:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 214:Core/Src/main.c ****   if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 215:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /** Initialize RTC Only
 218:Core/Src/main.c ****   */
 219:Core/Src/main.c ****   hrtc.Instance = RTC;
 220:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 221:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 222:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 223:Core/Src/main.c ****   {
 224:Core/Src/main.c ****     Error_Handler();
 225:Core/Src/main.c ****   }
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /* USER CODE BEGIN Check_RTC_BKUP */
 228:Core/Src/main.c ****   } else
 229:Core/Src/main.c ****     {
 230:Core/Src/main.c **** 	  HAL_NVIC_SetPriority(RTC_IRQn,15,0);
 231:Core/Src/main.c **** 	  HAL_NVIC_EnableIRQ(RTC_IRQn);
 232:Core/Src/main.c **** 	}
 233:Core/Src/main.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)!= 0x5051)
 234:Core/Src/main.c **** 	{
 235:Core/Src/main.c ****   /* USER CODE END Check_RTC_BKUP */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /** Initialize RTC and set the Time and Date
 238:Core/Src/main.c ****   */
 239:Core/Src/main.c ****   sTime.Hours = 0x0;
 240:Core/Src/main.c ****   sTime.Minutes = 0x0;
 241:Core/Src/main.c ****   sTime.Seconds = 0x0;
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 244:Core/Src/main.c ****   {
 245:Core/Src/main.c ****     Error_Handler();
 246:Core/Src/main.c ****   }
 247:Core/Src/main.c ****   DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 248:Core/Src/main.c ****   DateToUpdate.Month = RTC_MONTH_JANUARY;
 249:Core/Src/main.c ****   DateToUpdate.Date = 0x1;
 250:Core/Src/main.c ****   DateToUpdate.Year = 0x0;
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 253:Core/Src/main.c ****   {
 254:Core/Src/main.c ****     Error_Handler();
 255:Core/Src/main.c ****   }
 256:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 2 */
 257:Core/Src/main.c **** 	} // Kitame user code virsuje yra IF komanda. Cia ji uzsidaro.
 258:Core/Src/main.c ****   // LAIKAS BUVO ISSAUGOTAS, NES USER REGISTRAS TURI MAGIC skaiciu 0x5051
 259:Core/Src/main.c ****   
 260:Core/Src/main.c ****   
 261:Core/Src/main.c **** // LAIKRODZIO TIKRINIMAS  
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 6


 262:Core/Src/main.c ****   
 263:Core/Src/main.c **** /* read RTC for time */
 264:Core/Src/main.c **** 	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 265:Core/Src/main.c **** /* read time seconds for epoch */
 266:Core/Src/main.c **** // uint32_t nowsecons=currTime.Hours*3600+currTime.Minutes*60+currTime.Seconds+(dienos.Date-1)*8640
 267:Core/Src/main.c **** 
 268:Core/Src/main.c **** //KALENDORIAUS TIKRINIMAS
 269:Core/Src/main.c **** 
 270:Core/Src/main.c **** 	//RTC kalendorius FAIL! Pas F103 jo ir nera. Cold boot su gyvu RTC
 271:Core/Src/main.c **** 	RTC_DateTypeDef dienos= {0};
 272:Core/Src/main.c **** 	HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 273:Core/Src/main.c **** 	if(dienos.Year < 20) {rtc_check_screwd_calendar();}
 274:Core/Src/main.c **** 	
 275:Core/Src/main.c **** //HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** //Cia irasom MAGIC skaiciu. Jis po pilno reseto ir RTC mirties turi neislikti.
 278:Core/Src/main.c **** 	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);//Write data to the specified backing area registe
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** //HAL_RTCEx_SetSmoothCalib(&hrtc,0,0,10);
 281:Core/Src/main.c ****   /* USER CODE END RTC_Init 2 */
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** }
 284:Core/Src/main.c **** 
 285:Core/Src/main.c **** /**
 286:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 287:Core/Src/main.c ****   * @param None
 288:Core/Src/main.c ****   * @retval None
 289:Core/Src/main.c ****   */
 290:Core/Src/main.c **** static void MX_TIM1_Init(void)
 291:Core/Src/main.c **** {
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 298:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 299:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 300:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 305:Core/Src/main.c ****   htim1.Instance = TIM1;
 306:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 307:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 308:Core/Src/main.c ****   htim1.Init.Period = 65535;
 309:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 310:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 311:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 312:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 313:Core/Src/main.c ****   {
 314:Core/Src/main.c ****     Error_Handler();
 315:Core/Src/main.c ****   }
 316:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 317:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 318:Core/Src/main.c ****   {
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 7


 319:Core/Src/main.c ****     Error_Handler();
 320:Core/Src/main.c ****   }
 321:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 322:Core/Src/main.c ****   {
 323:Core/Src/main.c ****     Error_Handler();
 324:Core/Src/main.c ****   }
 325:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 326:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 327:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 328:Core/Src/main.c ****   {
 329:Core/Src/main.c ****     Error_Handler();
 330:Core/Src/main.c ****   }
 331:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 332:Core/Src/main.c ****   sConfigOC.Pulse = 15000;
 333:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 334:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 335:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 336:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 337:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 338:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 339:Core/Src/main.c ****   {
 340:Core/Src/main.c ****     Error_Handler();
 341:Core/Src/main.c ****   }
 342:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 343:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 344:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 345:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 346:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 347:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 348:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 349:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 350:Core/Src/main.c ****   {
 351:Core/Src/main.c ****     Error_Handler();
 352:Core/Src/main.c ****   }
 353:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 356:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 357:Core/Src/main.c **** 
 358:Core/Src/main.c **** }
 359:Core/Src/main.c **** 
 360:Core/Src/main.c **** /**
 361:Core/Src/main.c ****   * @brief GPIO Initialization Function
 362:Core/Src/main.c ****   * @param None
 363:Core/Src/main.c ****   * @retval None
 364:Core/Src/main.c ****   */
 365:Core/Src/main.c **** static void MX_GPIO_Init(void)
 366:Core/Src/main.c **** {
  26              		.loc 1 366 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 8


  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
 367:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 367 3 view .LVU1
  40              		.loc 1 367 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0494     		str	r4, [sp, #16]
  43 0008 0594     		str	r4, [sp, #20]
  44 000a 0694     		str	r4, [sp, #24]
  45 000c 0794     		str	r4, [sp, #28]
 368:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 369:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 372:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  46              		.loc 1 372 3 is_stmt 1 view .LVU3
  47              	.LBB4:
  48              		.loc 1 372 3 view .LVU4
  49              		.loc 1 372 3 view .LVU5
  50 000e 174B     		ldr	r3, .L3
  51 0010 9A69     		ldr	r2, [r3, #24]
  52 0012 42F01002 		orr	r2, r2, #16
  53 0016 9A61     		str	r2, [r3, #24]
  54              		.loc 1 372 3 view .LVU6
  55 0018 9A69     		ldr	r2, [r3, #24]
  56 001a 02F01002 		and	r2, r2, #16
  57 001e 0192     		str	r2, [sp, #4]
  58              		.loc 1 372 3 view .LVU7
  59 0020 019A     		ldr	r2, [sp, #4]
  60              	.LBE4:
  61              		.loc 1 372 3 view .LVU8
 373:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  62              		.loc 1 373 3 view .LVU9
  63              	.LBB5:
  64              		.loc 1 373 3 view .LVU10
  65              		.loc 1 373 3 view .LVU11
  66 0022 9A69     		ldr	r2, [r3, #24]
  67 0024 42F02002 		orr	r2, r2, #32
  68 0028 9A61     		str	r2, [r3, #24]
  69              		.loc 1 373 3 view .LVU12
  70 002a 9A69     		ldr	r2, [r3, #24]
  71 002c 02F02002 		and	r2, r2, #32
  72 0030 0292     		str	r2, [sp, #8]
  73              		.loc 1 373 3 view .LVU13
  74 0032 029A     		ldr	r2, [sp, #8]
  75              	.LBE5:
  76              		.loc 1 373 3 view .LVU14
 374:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  77              		.loc 1 374 3 view .LVU15
  78              	.LBB6:
  79              		.loc 1 374 3 view .LVU16
  80              		.loc 1 374 3 view .LVU17
  81 0034 9A69     		ldr	r2, [r3, #24]
  82 0036 42F00402 		orr	r2, r2, #4
  83 003a 9A61     		str	r2, [r3, #24]
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 9


  84              		.loc 1 374 3 view .LVU18
  85 003c 9B69     		ldr	r3, [r3, #24]
  86 003e 03F00403 		and	r3, r3, #4
  87 0042 0393     		str	r3, [sp, #12]
  88              		.loc 1 374 3 view .LVU19
  89 0044 039B     		ldr	r3, [sp, #12]
  90              	.LBE6:
  91              		.loc 1 374 3 view .LVU20
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 377:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  92              		.loc 1 377 3 view .LVU21
  93 0046 0A4D     		ldr	r5, .L3+4
  94 0048 2246     		mov	r2, r4
  95 004a 0121     		movs	r1, #1
  96 004c 2846     		mov	r0, r5
  97 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
  98              	.LVL0:
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /*Configure GPIO pin : LED_Pin */
 380:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin;
  99              		.loc 1 380 3 view .LVU22
 100              		.loc 1 380 23 is_stmt 0 view .LVU23
 101 0052 0123     		movs	r3, #1
 102 0054 0493     		str	r3, [sp, #16]
 381:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 103              		.loc 1 381 3 is_stmt 1 view .LVU24
 104              		.loc 1 381 24 is_stmt 0 view .LVU25
 105 0056 0593     		str	r3, [sp, #20]
 382:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 106              		.loc 1 382 3 is_stmt 1 view .LVU26
 107              		.loc 1 382 24 is_stmt 0 view .LVU27
 108 0058 0694     		str	r4, [sp, #24]
 383:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 109              		.loc 1 383 3 is_stmt 1 view .LVU28
 110              		.loc 1 383 25 is_stmt 0 view .LVU29
 111 005a 0223     		movs	r3, #2
 112 005c 0793     		str	r3, [sp, #28]
 384:Core/Src/main.c ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 113              		.loc 1 384 3 is_stmt 1 view .LVU30
 114 005e 04A9     		add	r1, sp, #16
 115 0060 2846     		mov	r0, r5
 116 0062 FFF7FEFF 		bl	HAL_GPIO_Init
 117              	.LVL1:
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 387:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 388:Core/Src/main.c **** }
 118              		.loc 1 388 1 is_stmt 0 view .LVU31
 119 0066 09B0     		add	sp, sp, #36
 120              	.LCFI2:
 121              		.cfi_def_cfa_offset 12
 122              		@ sp needed
 123 0068 30BD     		pop	{r4, r5, pc}
 124              	.L4:
 125 006a 00BF     		.align	2
 126              	.L3:
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 10


 127 006c 00100240 		.word	1073876992
 128 0070 00080140 		.word	1073809408
 129              		.cfi_endproc
 130              	.LFE95:
 132              		.section	.text.rtc_clean,"ax",%progbits
 133              		.align	1
 134              		.global	rtc_clean
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu softvfp
 140              	rtc_clean:
 141              	.LFB68:
 142              		.file 2 "Core/Src/USER/rtc.c"
   1:Core/Src/USER/rtc.c **** /* ********************************************* */
   2:Core/Src/USER/rtc.c **** /* (c)2022 by www.vabolis.lt, Kaunas             */
   3:Core/Src/USER/rtc.c **** /**
   4:Core/Src/USER/rtc.c ****   **********************************************
   5:Core/Src/USER/rtc.c ****   * @file           : rtc.c
   6:Core/Src/USER/rtc.c ****   * @version        : 1.0
   7:Core/Src/USER/rtc.c ****   * @brief          : generic RTC clock and calendar for STM32
   8:Core/Src/USER/rtc.c **** **/  
   9:Core/Src/USER/rtc.c **** /* ********************************************* */
  10:Core/Src/USER/rtc.c **** 
  11:Core/Src/USER/rtc.c **** #include "rtc.h"
  12:Core/Src/USER/rtc.c **** #include "user.h"
  13:Core/Src/USER/rtc.c **** #include "usbd_cdc_if.h"
  14:Core/Src/USER/rtc.c **** 
  15:Core/Src/USER/rtc.c **** //#include "epoch.c"
  16:Core/Src/USER/rtc.c **** 
  17:Core/Src/USER/rtc.c **** extern RTC_HandleTypeDef hrtc;
  18:Core/Src/USER/rtc.c **** 
  19:Core/Src/USER/rtc.c **** 
  20:Core/Src/USER/rtc.c **** // ****** pacioje pradzioje, globalus laikas. Galima persideklaruoti, bet ar verta?
  21:Core/Src/USER/rtc.c **** 
  22:Core/Src/USER/rtc.c **** RTC_TimeTypeDef currTime = {0};
  23:Core/Src/USER/rtc.c **** RTC_TimeTypeDef oldTime = {0xFF,0xFF,0xFF}; //del refresh
  24:Core/Src/USER/rtc.c **** volatile unsigned char LastHour=255;
  25:Core/Src/USER/rtc.c **** 
  26:Core/Src/USER/rtc.c **** /* instrukcijos kurias reikia ikelti i main.c */
  27:Core/Src/USER/rtc.c **** 
  28:Core/Src/USER/rtc.c **** //-  /* USER CODE BEGIN Check_RTC_BKUP */
  29:Core/Src/USER/rtc.c **** //-  
  30:Core/Src/USER/rtc.c **** //-  // CIA TIKRINAM AR RTC ir kiti RAM baitai isliko gyvi.
  31:Core/Src/USER/rtc.c **** //-    if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)!= 0x5051)
  32:Core/Src/USER/rtc.c **** //-	{
  33:Core/Src/USER/rtc.c **** //-  /* USER CODE END Check_RTC_BKUP */
  34:Core/Src/USER/rtc.c **** 
  35:Core/Src/USER/rtc.c **** 
  36:Core/Src/USER/rtc.c **** //- /* USER CODE BEGIN RTC_Init 2 */
  37:Core/Src/USER/rtc.c **** //-	} // Kitame user code virsuje yra IF komanda. Cia ji uzsidaro.
  38:Core/Src/USER/rtc.c **** //-  // LAIKAS BUVO ISSAUGOTAS, NES USER REGISTRAS TURI MAGIC skaiciu 0x5051
  39:Core/Src/USER/rtc.c **** //- 
  40:Core/Src/USER/rtc.c **** //- /* read RTC for time */
  41:Core/Src/USER/rtc.c **** //-	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
  42:Core/Src/USER/rtc.c **** //- /* read time seconds for epoch */
  43:Core/Src/USER/rtc.c **** //- // uint32_t nowsecons=currTime.Hours*3600+currTime.Minutes*60+currTime.Seconds+(dienos.Date-1)*
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 11


  44:Core/Src/USER/rtc.c **** //-
  45:Core/Src/USER/rtc.c **** //- /* set time to RTC */
  46:Core/Src/USER/rtc.c **** //-	if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
  47:Core/Src/USER/rtc.c **** //-	{
  48:Core/Src/USER/rtc.c **** //-	Error_Handler();
  49:Core/Src/USER/rtc.c **** //-	}
  50:Core/Src/USER/rtc.c **** //-
  51:Core/Src/USER/rtc.c **** //- // DEMESIO! STM32F103 NETURI KALENDORIAUS ir panasu, kad neturi epoch skaitliuko.
  52:Core/Src/USER/rtc.c **** //-	//RTC_DateTypeDef dienos= {0};
  53:Core/Src/USER/rtc.c **** //-	//HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
  54:Core/Src/USER/rtc.c **** //-	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
  55:Core/Src/USER/rtc.c **** //-
  56:Core/Src/USER/rtc.c **** //- //Cia irasom MAGIC skaiciu. Jis po pilno reseto ir RTC mirties turi neislikti.
  57:Core/Src/USER/rtc.c **** //-	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);//Write data to the specified backing area regi
  58:Core/Src/USER/rtc.c **** //-
  59:Core/Src/USER/rtc.c **** //- //HAL_RTCEx_SetSmoothCalib(&hrtc,0,0,10);
  60:Core/Src/USER/rtc.c **** //-   /* USER CODE END RTC_Init 2 */
  61:Core/Src/USER/rtc.c **** 
  62:Core/Src/USER/rtc.c **** 
  63:Core/Src/USER/rtc.c **** // sunaikina sena laika. Naudojama LCD grafikos spartinimui
  64:Core/Src/USER/rtc.c **** void rtc_clean(void)
  65:Core/Src/USER/rtc.c **** {
 143              		.loc 2 65 1 is_stmt 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
  66:Core/Src/USER/rtc.c **** 	oldTime.Hours = 60;
 148              		.loc 2 66 2 view .LVU33
 149              		.loc 2 66 16 is_stmt 0 view .LVU34
 150 0000 024B     		ldr	r3, .L6
 151 0002 3C22     		movs	r2, #60
 152 0004 1A70     		strb	r2, [r3]
  67:Core/Src/USER/rtc.c **** 	oldTime.Minutes = 60;
 153              		.loc 2 67 2 is_stmt 1 view .LVU35
 154              		.loc 2 67 18 is_stmt 0 view .LVU36
 155 0006 5A70     		strb	r2, [r3, #1]
  68:Core/Src/USER/rtc.c **** 	oldTime.Seconds = 60;
 156              		.loc 2 68 2 is_stmt 1 view .LVU37
 157              		.loc 2 68 18 is_stmt 0 view .LVU38
 158 0008 9A70     		strb	r2, [r3, #2]
  69:Core/Src/USER/rtc.c **** }
 159              		.loc 2 69 1 view .LVU39
 160 000a 7047     		bx	lr
 161              	.L7:
 162              		.align	2
 163              	.L6:
 164 000c 00000000 		.word	.LANCHOR0
 165              		.cfi_endproc
 166              	.LFE68:
 168              		.section	.text.filter_string,"ax",%progbits
 169              		.align	1
 170              		.global	filter_string
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 174              		.fpu softvfp
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 12


 176              	filter_string:
 177              	.LVL2:
 178              	.LFB69:
  70:Core/Src/USER/rtc.c **** 
  71:Core/Src/USER/rtc.c **** 
  72:Core/Src/USER/rtc.c **** 
  73:Core/Src/USER/rtc.c **** 
  74:Core/Src/USER/rtc.c **** // teksto filtras laiko ir datos nustatymui.
  75:Core/Src/USER/rtc.c **** void filter_string(char *Buf)
  76:Core/Src/USER/rtc.c **** {
 179              		.loc 2 76 1 is_stmt 1 view -0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184              		.loc 2 76 1 is_stmt 0 view .LVU41
 185 0000 30B4     		push	{r4, r5}
 186              	.LCFI3:
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 4, -8
 189              		.cfi_offset 5, -4
 190 0002 0246     		mov	r2, r0
  77:Core/Src/USER/rtc.c **** int i=0;
 191              		.loc 2 77 1 is_stmt 1 view .LVU42
 192              	.LVL3:
  78:Core/Src/USER/rtc.c **** int j=0;
 193              		.loc 2 78 1 view .LVU43
  79:Core/Src/USER/rtc.c **** 
  80:Core/Src/USER/rtc.c **** for(i=0;Buf[i] != 0; i++)
 194              		.loc 2 80 1 view .LVU44
 195              		.loc 2 80 6 is_stmt 0 view .LVU45
 196 0004 0024     		movs	r4, #0
 197              		.loc 2 80 1 view .LVU46
 198 0006 15E0     		b	.L9
 199              	.LVL4:
 200              	.L16:
  81:Core/Src/USER/rtc.c **** 	{
  82:Core/Src/USER/rtc.c **** 	while(!((Buf[i]>='0' && Buf[i]<='9') || Buf[i]==':' || Buf[i]=='.') && !(Buf[i]==0))
  83:Core/Src/USER/rtc.c **** 		{
  84:Core/Src/USER/rtc.c **** 			for(j=i;Buf[j] !=0; ++j)
  85:Core/Src/USER/rtc.c **** 				{
  86:Core/Src/USER/rtc.c **** 					Buf[j]=Buf[j+1];
  87:Core/Src/USER/rtc.c **** 				}
  88:Core/Src/USER/rtc.c **** 			Buf[j]=0;
 201              		.loc 2 88 4 is_stmt 1 view .LVU47
 202              		.loc 2 88 10 is_stmt 0 view .LVU48
 203 0008 0023     		movs	r3, #0
 204              	.LVL5:
 205              		.loc 2 88 10 view .LVU49
 206 000a 0370     		strb	r3, [r0]
 207              	.L13:
  82:Core/Src/USER/rtc.c **** 		{
 208              		.loc 2 82 7 is_stmt 1 view .LVU50
  82:Core/Src/USER/rtc.c **** 		{
 209              		.loc 2 82 14 is_stmt 0 view .LVU51
 210 000c 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
  82:Core/Src/USER/rtc.c **** 		{
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 13


 211              		.loc 2 82 39 view .LVU52
 212 000e A1F13003 		sub	r3, r1, #48
 213 0012 DBB2     		uxtb	r3, r3
  82:Core/Src/USER/rtc.c **** 		{
 214              		.loc 2 82 7 view .LVU53
 215 0014 0A2B     		cmp	r3, #10
 216 0016 0CD9     		bls	.L11
  82:Core/Src/USER/rtc.c **** 		{
 217              		.loc 2 82 8 discriminator 1 view .LVU54
 218 0018 2E29     		cmp	r1, #46
 219 001a 0AD0     		beq	.L11
  82:Core/Src/USER/rtc.c **** 		{
 220              		.loc 2 82 70 discriminator 2 view .LVU55
 221 001c 49B1     		cbz	r1, .L11
  84:Core/Src/USER/rtc.c **** 				{
 222              		.loc 2 84 9 view .LVU56
 223 001e 2346     		mov	r3, r4
 224              	.L12:
 225              	.LVL6:
  84:Core/Src/USER/rtc.c **** 				{
 226              		.loc 2 84 12 is_stmt 1 discriminator 1 view .LVU57
  84:Core/Src/USER/rtc.c **** 				{
 227              		.loc 2 84 15 is_stmt 0 discriminator 1 view .LVU58
 228 0020 D018     		adds	r0, r2, r3
 229 0022 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
  84:Core/Src/USER/rtc.c **** 				{
 230              		.loc 2 84 4 discriminator 1 view .LVU59
 231 0024 0029     		cmp	r1, #0
 232 0026 EFD0     		beq	.L16
  86:Core/Src/USER/rtc.c **** 				}
 233              		.loc 2 86 6 is_stmt 1 discriminator 3 view .LVU60
  86:Core/Src/USER/rtc.c **** 				}
 234              		.loc 2 86 16 is_stmt 0 discriminator 3 view .LVU61
 235 0028 D118     		adds	r1, r2, r3
 236 002a 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
  86:Core/Src/USER/rtc.c **** 				}
 237              		.loc 2 86 12 discriminator 3 view .LVU62
 238 002c D154     		strb	r1, [r2, r3]
  84:Core/Src/USER/rtc.c **** 				{
 239              		.loc 2 84 24 is_stmt 1 discriminator 3 view .LVU63
 240 002e 0133     		adds	r3, r3, #1
 241              	.LVL7:
  84:Core/Src/USER/rtc.c **** 				{
 242              		.loc 2 84 24 is_stmt 0 discriminator 3 view .LVU64
 243 0030 F6E7     		b	.L12
 244              	.LVL8:
 245              	.L11:
  80:Core/Src/USER/rtc.c **** 	{
 246              		.loc 2 80 22 is_stmt 1 discriminator 2 view .LVU65
  80:Core/Src/USER/rtc.c **** 	{
 247              		.loc 2 80 23 is_stmt 0 discriminator 2 view .LVU66
 248 0032 0134     		adds	r4, r4, #1
 249              	.LVL9:
 250              	.L9:
  80:Core/Src/USER/rtc.c **** 	{
 251              		.loc 2 80 9 is_stmt 1 discriminator 1 view .LVU67
  80:Core/Src/USER/rtc.c **** 	{
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 14


 252              		.loc 2 80 12 is_stmt 0 discriminator 1 view .LVU68
 253 0034 1519     		adds	r5, r2, r4
 254 0036 135D     		ldrb	r3, [r2, r4]	@ zero_extendqisi2
  80:Core/Src/USER/rtc.c **** 	{
 255              		.loc 2 80 1 discriminator 1 view .LVU69
 256 0038 002B     		cmp	r3, #0
 257 003a E7D1     		bne	.L13
  89:Core/Src/USER/rtc.c **** 		}
  90:Core/Src/USER/rtc.c **** 	}
  91:Core/Src/USER/rtc.c **** }
 258              		.loc 2 91 1 view .LVU70
 259 003c 30BC     		pop	{r4, r5}
 260              	.LCFI4:
 261              		.cfi_restore 5
 262              		.cfi_restore 4
 263              		.cfi_def_cfa_offset 0
 264              	.LVL10:
 265              		.loc 2 91 1 view .LVU71
 266 003e 7047     		bx	lr
 267              		.cfi_endproc
 268              	.LFE69:
 270              		.section	.text.rtc_update,"ax",%progbits
 271              		.align	1
 272              		.global	rtc_update
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	rtc_update:
 279              	.LFB72:
  92:Core/Src/USER/rtc.c **** 
  93:Core/Src/USER/rtc.c **** //nustatyti kalendoriu.
  94:Core/Src/USER/rtc.c **** void rtc_set_date_text(char * Buf)
  95:Core/Src/USER/rtc.c **** {
  96:Core/Src/USER/rtc.c **** filter_string(Buf);
  97:Core/Src/USER/rtc.c **** //22.12.23
  98:Core/Src/USER/rtc.c **** 
  99:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 100:Core/Src/USER/rtc.c **** 
 101:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 102:Core/Src/USER/rtc.c **** 	char delim[] = ".";
 103:Core/Src/USER/rtc.c **** 
 104:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 105:Core/Src/USER/rtc.c **** 	dienos.Year=atoi(ptr);
 106:Core/Src/USER/rtc.c **** 	
 107:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 108:Core/Src/USER/rtc.c **** 	dienos.Month=atoi(ptr);
 109:Core/Src/USER/rtc.c **** 	
 110:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 111:Core/Src/USER/rtc.c **** 	dienos.Date=atoi(ptr);
 112:Core/Src/USER/rtc.c **** 	
 113:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 114:Core/Src/USER/rtc.c ****   {
 115:Core/Src/USER/rtc.c ****     Error_Handler();
 116:Core/Src/USER/rtc.c ****   }
 117:Core/Src/USER/rtc.c ****   
 118:Core/Src/USER/rtc.c ****   rtc_backup_date();
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 15


 119:Core/Src/USER/rtc.c **** }
 120:Core/Src/USER/rtc.c **** 
 121:Core/Src/USER/rtc.c **** //nustatyti laikrodi
 122:Core/Src/USER/rtc.c **** void rtc_set_time_text(char * Buf)
 123:Core/Src/USER/rtc.c **** {
 124:Core/Src/USER/rtc.c **** // echo ATT%TIME% >COMx
 125:Core/Src/USER/rtc.c **** //ATT19:14:32.94
 126:Core/Src/USER/rtc.c **** 
 127:Core/Src/USER/rtc.c **** 
 128:Core/Src/USER/rtc.c **** filter_string(Buf);
 129:Core/Src/USER/rtc.c **** 
 130:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 131:Core/Src/USER/rtc.c **** 
 132:Core/Src/USER/rtc.c **** 	char delim[] = ":";
 133:Core/Src/USER/rtc.c **** 
 134:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 136:Core/Src/USER/rtc.c **** 	
 137:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 138:Core/Src/USER/rtc.c **** 	currTime.Minutes=atoi(ptr);
 139:Core/Src/USER/rtc.c **** 	
 140:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 141:Core/Src/USER/rtc.c **** 	currTime.Seconds=atoi(ptr);
 142:Core/Src/USER/rtc.c **** 	
 143:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
 144:Core/Src/USER/rtc.c ****   {
 145:Core/Src/USER/rtc.c ****     Error_Handler();
 146:Core/Src/USER/rtc.c ****   }
 147:Core/Src/USER/rtc.c **** 
 148:Core/Src/USER/rtc.c **** }
 149:Core/Src/USER/rtc.c **** 
 150:Core/Src/USER/rtc.c **** // nuskaityti laika is hardwares.
 151:Core/Src/USER/rtc.c **** void rtc_update(void)
 152:Core/Src/USER/rtc.c **** {
 280              		.loc 2 152 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI5:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 153:Core/Src/USER/rtc.c **** 	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 289              		.loc 2 153 2 view .LVU73
 290 0002 0022     		movs	r2, #0
 291 0004 0249     		ldr	r1, .L19
 292 0006 0348     		ldr	r0, .L19+4
 293 0008 FFF7FEFF 		bl	HAL_RTC_GetTime
 294              	.LVL11:
 154:Core/Src/USER/rtc.c **** }
 295              		.loc 2 154 1 is_stmt 0 view .LVU74
 296 000c 08BD     		pop	{r3, pc}
 297              	.L20:
 298 000e 00BF     		.align	2
 299              	.L19:
 300 0010 00000000 		.word	.LANCHOR1
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 16


 301 0014 00000000 		.word	hrtc
 302              		.cfi_endproc
 303              	.LFE72:
 305              		.section	.text.rtc_time_string,"ax",%progbits
 306              		.align	1
 307              		.global	rtc_time_string
 308              		.syntax unified
 309              		.thumb
 310              		.thumb_func
 311              		.fpu softvfp
 313              	rtc_time_string:
 314              	.LVL12:
 315              	.LFB73:
 155:Core/Src/USER/rtc.c **** 
 156:Core/Src/USER/rtc.c **** //rtc->tekstas
 157:Core/Src/USER/rtc.c **** void rtc_time_string(char * text)
 158:Core/Src/USER/rtc.c **** {
 316              		.loc 2 158 1 is_stmt 1 view -0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320              		.loc 2 158 1 is_stmt 0 view .LVU76
 321 0000 70B5     		push	{r4, r5, r6, lr}
 322              	.LCFI6:
 323              		.cfi_def_cfa_offset 16
 324              		.cfi_offset 4, -16
 325              		.cfi_offset 5, -12
 326              		.cfi_offset 6, -8
 327              		.cfi_offset 14, -4
 328 0002 0446     		mov	r4, r0
 159:Core/Src/USER/rtc.c **** 	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 329              		.loc 2 159 2 is_stmt 1 view .LVU77
 330 0004 1B4D     		ldr	r5, .L23
 331 0006 0022     		movs	r2, #0
 332 0008 2946     		mov	r1, r5
 333 000a 1B48     		ldr	r0, .L23+4
 334              	.LVL13:
 335              		.loc 2 159 2 is_stmt 0 view .LVU78
 336 000c FFF7FEFF 		bl	HAL_RTC_GetTime
 337              	.LVL14:
 160:Core/Src/USER/rtc.c **** 	text[0]=(currTime.Hours)/10+'0';
 338              		.loc 2 160 2 is_stmt 1 view .LVU79
 339              		.loc 2 160 19 is_stmt 0 view .LVU80
 340 0010 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 341              		.loc 2 160 29 view .LVU81
 342 0012 1A4B     		ldr	r3, .L23+8
 343 0014 A3FB0212 		umull	r1, r2, r3, r2
 344 0018 D208     		lsrs	r2, r2, #3
 345 001a 3032     		adds	r2, r2, #48
 346              		.loc 2 160 9 view .LVU82
 347 001c 2270     		strb	r2, [r4]
 161:Core/Src/USER/rtc.c **** 	text[1]=(currTime.Hours)%10+'0';
 348              		.loc 2 161 2 is_stmt 1 view .LVU83
 349              		.loc 2 161 19 is_stmt 0 view .LVU84
 350 001e 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 351              		.loc 2 161 29 view .LVU85
 352 0020 A3FB0201 		umull	r0, r1, r3, r2
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 17


 353 0024 C908     		lsrs	r1, r1, #3
 354 0026 01EB8101 		add	r1, r1, r1, lsl #2
 355 002a A2EB4102 		sub	r2, r2, r1, lsl #1
 356 002e 3032     		adds	r2, r2, #48
 357              		.loc 2 161 9 view .LVU86
 358 0030 6270     		strb	r2, [r4, #1]
 162:Core/Src/USER/rtc.c **** 	text[2]=':';	
 359              		.loc 2 162 2 is_stmt 1 view .LVU87
 360              		.loc 2 162 9 is_stmt 0 view .LVU88
 361 0032 3A20     		movs	r0, #58
 362 0034 A070     		strb	r0, [r4, #2]
 163:Core/Src/USER/rtc.c **** 
 164:Core/Src/USER/rtc.c **** 	text[3]=(currTime.Minutes)/10+'0';
 363              		.loc 2 164 2 is_stmt 1 view .LVU89
 364              		.loc 2 164 19 is_stmt 0 view .LVU90
 365 0036 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 366              		.loc 2 164 31 view .LVU91
 367 0038 A3FB0162 		umull	r6, r2, r3, r1
 368 003c D208     		lsrs	r2, r2, #3
 369 003e 02F13006 		add	r6, r2, #48
 370              		.loc 2 164 9 view .LVU92
 371 0042 E670     		strb	r6, [r4, #3]
 165:Core/Src/USER/rtc.c **** 	text[4]=(currTime.Minutes)%10+'0';
 372              		.loc 2 165 2 is_stmt 1 view .LVU93
 373              		.loc 2 165 31 is_stmt 0 view .LVU94
 374 0044 02EB8202 		add	r2, r2, r2, lsl #2
 375 0048 A1EB4202 		sub	r2, r1, r2, lsl #1
 376 004c 3032     		adds	r2, r2, #48
 377              		.loc 2 165 9 view .LVU95
 378 004e 2271     		strb	r2, [r4, #4]
 166:Core/Src/USER/rtc.c **** 	text[5]=':';	
 379              		.loc 2 166 2 is_stmt 1 view .LVU96
 380              		.loc 2 166 9 is_stmt 0 view .LVU97
 381 0050 6071     		strb	r0, [r4, #5]
 167:Core/Src/USER/rtc.c **** 
 168:Core/Src/USER/rtc.c **** 	text[6]=(currTime.Seconds)/10+'0';
 382              		.loc 2 168 2 is_stmt 1 view .LVU98
 383              		.loc 2 168 19 is_stmt 0 view .LVU99
 384 0052 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 385              		.loc 2 168 31 view .LVU100
 386 0054 A3FB0213 		umull	r1, r3, r3, r2
 387 0058 DB08     		lsrs	r3, r3, #3
 388 005a 03F13001 		add	r1, r3, #48
 389              		.loc 2 168 9 view .LVU101
 390 005e A171     		strb	r1, [r4, #6]
 169:Core/Src/USER/rtc.c **** 	text[7]=(currTime.Seconds)%10+'0';
 391              		.loc 2 169 2 is_stmt 1 view .LVU102
 392              		.loc 2 169 31 is_stmt 0 view .LVU103
 393 0060 03EB8303 		add	r3, r3, r3, lsl #2
 394 0064 A2EB4303 		sub	r3, r2, r3, lsl #1
 395 0068 3033     		adds	r3, r3, #48
 396              		.loc 2 169 9 view .LVU104
 397 006a E371     		strb	r3, [r4, #7]
 170:Core/Src/USER/rtc.c **** 	text[8]=0;
 398              		.loc 2 170 2 is_stmt 1 view .LVU105
 399              		.loc 2 170 9 is_stmt 0 view .LVU106
 400 006c 0023     		movs	r3, #0
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 18


 401 006e 2372     		strb	r3, [r4, #8]
 171:Core/Src/USER/rtc.c **** }
 402              		.loc 2 171 1 view .LVU107
 403 0070 70BD     		pop	{r4, r5, r6, pc}
 404              	.LVL15:
 405              	.L24:
 406              		.loc 2 171 1 view .LVU108
 407 0072 00BF     		.align	2
 408              	.L23:
 409 0074 00000000 		.word	.LANCHOR1
 410 0078 00000000 		.word	hrtc
 411 007c CDCCCCCC 		.word	-858993459
 412              		.cfi_endproc
 413              	.LFE73:
 415              		.section	.text.rtc_date_string,"ax",%progbits
 416              		.align	1
 417              		.global	rtc_date_string
 418              		.syntax unified
 419              		.thumb
 420              		.thumb_func
 421              		.fpu softvfp
 423              	rtc_date_string:
 424              	.LVL16:
 425              	.LFB74:
 172:Core/Src/USER/rtc.c **** void rtc_date_string(char * text)
 173:Core/Src/USER/rtc.c **** {
 426              		.loc 2 173 1 is_stmt 1 view -0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 8
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              		.loc 2 173 1 is_stmt 0 view .LVU110
 431 0000 30B5     		push	{r4, r5, lr}
 432              	.LCFI7:
 433              		.cfi_def_cfa_offset 12
 434              		.cfi_offset 4, -12
 435              		.cfi_offset 5, -8
 436              		.cfi_offset 14, -4
 437 0002 83B0     		sub	sp, sp, #12
 438              	.LCFI8:
 439              		.cfi_def_cfa_offset 24
 440 0004 0446     		mov	r4, r0
 174:Core/Src/USER/rtc.c **** 	RTC_DateTypeDef dienos;
 441              		.loc 2 174 2 is_stmt 1 view .LVU111
 175:Core/Src/USER/rtc.c **** 	HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 442              		.loc 2 175 2 view .LVU112
 443 0006 0022     		movs	r2, #0
 444 0008 01A9     		add	r1, sp, #4
 445 000a 1A48     		ldr	r0, .L27
 446              	.LVL17:
 447              		.loc 2 175 2 is_stmt 0 view .LVU113
 448 000c FFF7FEFF 		bl	HAL_RTC_GetDate
 449              	.LVL18:
 176:Core/Src/USER/rtc.c **** 
 177:Core/Src/USER/rtc.c **** 	text[0]=(dienos.Year)/10+'0';
 450              		.loc 2 177 2 is_stmt 1 view .LVU114
 451              		.loc 2 177 17 is_stmt 0 view .LVU115
 452 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 19


 453              		.loc 2 177 26 view .LVU116
 454 0014 184B     		ldr	r3, .L27+4
 455 0016 A3FB0102 		umull	r0, r2, r3, r1
 456 001a D208     		lsrs	r2, r2, #3
 457 001c 02F13000 		add	r0, r2, #48
 458              		.loc 2 177 9 view .LVU117
 459 0020 2070     		strb	r0, [r4]
 178:Core/Src/USER/rtc.c **** 	text[1]=(dienos.Year)%10+'0';
 460              		.loc 2 178 2 is_stmt 1 view .LVU118
 461              		.loc 2 178 26 is_stmt 0 view .LVU119
 462 0022 02EB8202 		add	r2, r2, r2, lsl #2
 463 0026 A1EB4202 		sub	r2, r1, r2, lsl #1
 464 002a 3032     		adds	r2, r2, #48
 465              		.loc 2 178 9 view .LVU120
 466 002c 6270     		strb	r2, [r4, #1]
 179:Core/Src/USER/rtc.c **** 	text[2]='.';
 467              		.loc 2 179 2 is_stmt 1 view .LVU121
 468              		.loc 2 179 9 is_stmt 0 view .LVU122
 469 002e 2E20     		movs	r0, #46
 470 0030 A070     		strb	r0, [r4, #2]
 180:Core/Src/USER/rtc.c **** 	text[3]=(dienos.Month)/10+'0';
 471              		.loc 2 180 2 is_stmt 1 view .LVU123
 472              		.loc 2 180 17 is_stmt 0 view .LVU124
 473 0032 9DF80510 		ldrb	r1, [sp, #5]	@ zero_extendqisi2
 474              		.loc 2 180 27 view .LVU125
 475 0036 A3FB0152 		umull	r5, r2, r3, r1
 476 003a D208     		lsrs	r2, r2, #3
 477 003c 02F13005 		add	r5, r2, #48
 478              		.loc 2 180 9 view .LVU126
 479 0040 E570     		strb	r5, [r4, #3]
 181:Core/Src/USER/rtc.c **** 	text[4]=(dienos.Month)%10+'0';
 480              		.loc 2 181 2 is_stmt 1 view .LVU127
 481              		.loc 2 181 27 is_stmt 0 view .LVU128
 482 0042 02EB8202 		add	r2, r2, r2, lsl #2
 483 0046 A1EB4202 		sub	r2, r1, r2, lsl #1
 484 004a 3032     		adds	r2, r2, #48
 485              		.loc 2 181 9 view .LVU129
 486 004c 2271     		strb	r2, [r4, #4]
 182:Core/Src/USER/rtc.c **** 	text[5]='.';
 487              		.loc 2 182 2 is_stmt 1 view .LVU130
 488              		.loc 2 182 9 is_stmt 0 view .LVU131
 489 004e 6071     		strb	r0, [r4, #5]
 183:Core/Src/USER/rtc.c **** 	text[6]=(dienos.Date)/10+'0';
 490              		.loc 2 183 2 is_stmt 1 view .LVU132
 491              		.loc 2 183 17 is_stmt 0 view .LVU133
 492 0050 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 493              		.loc 2 183 26 view .LVU134
 494 0054 A3FB0213 		umull	r1, r3, r3, r2
 495 0058 DB08     		lsrs	r3, r3, #3
 496 005a 03F13001 		add	r1, r3, #48
 497              		.loc 2 183 9 view .LVU135
 498 005e A171     		strb	r1, [r4, #6]
 184:Core/Src/USER/rtc.c **** 	text[7]=(dienos.Date)%10+'0';
 499              		.loc 2 184 2 is_stmt 1 view .LVU136
 500              		.loc 2 184 26 is_stmt 0 view .LVU137
 501 0060 03EB8303 		add	r3, r3, r3, lsl #2
 502 0064 A2EB4303 		sub	r3, r2, r3, lsl #1
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 20


 503 0068 3033     		adds	r3, r3, #48
 504              		.loc 2 184 9 view .LVU138
 505 006a E371     		strb	r3, [r4, #7]
 185:Core/Src/USER/rtc.c **** 	text[8]=0;
 506              		.loc 2 185 2 is_stmt 1 view .LVU139
 507              		.loc 2 185 9 is_stmt 0 view .LVU140
 508 006c 0023     		movs	r3, #0
 509 006e 2372     		strb	r3, [r4, #8]
 186:Core/Src/USER/rtc.c **** }
 510              		.loc 2 186 1 view .LVU141
 511 0070 03B0     		add	sp, sp, #12
 512              	.LCFI9:
 513              		.cfi_def_cfa_offset 12
 514              		@ sp needed
 515 0072 30BD     		pop	{r4, r5, pc}
 516              	.LVL19:
 517              	.L28:
 518              		.loc 2 186 1 view .LVU142
 519              		.align	2
 520              	.L27:
 521 0074 00000000 		.word	hrtc
 522 0078 CDCCCCCC 		.word	-858993459
 523              		.cfi_endproc
 524              	.LFE74:
 526              		.section	.text.rtc_backup_date,"ax",%progbits
 527              		.align	1
 528              		.global	rtc_backup_date
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 532              		.fpu softvfp
 534              	rtc_backup_date:
 535              	.LFB75:
 187:Core/Src/USER/rtc.c **** 
 188:Core/Src/USER/rtc.c **** void rtc_backup_date(void)
 189:Core/Src/USER/rtc.c **** {
 536              		.loc 2 189 1 is_stmt 1 view -0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 8
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540 0000 30B5     		push	{r4, r5, lr}
 541              	.LCFI10:
 542              		.cfi_def_cfa_offset 12
 543              		.cfi_offset 4, -12
 544              		.cfi_offset 5, -8
 545              		.cfi_offset 14, -4
 546 0002 83B0     		sub	sp, sp, #12
 547              	.LCFI11:
 548              		.cfi_def_cfa_offset 24
 190:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 549              		.loc 2 190 1 view .LVU144
 191:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 550              		.loc 2 191 2 view .LVU145
 551              		.loc 2 191 5 is_stmt 0 view .LVU146
 552 0004 0121     		movs	r1, #1
 553 0006 1448     		ldr	r0, .L33
 554 0008 FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 21


 555              	.LVL20:
 556              		.loc 2 191 4 view .LVU147
 557 000c 45F25103 		movw	r3, #20561
 558 0010 9842     		cmp	r0, r3
 559 0012 01D0     		beq	.L32
 560              	.L29:
 192:Core/Src/USER/rtc.c **** 	{
 193:Core/Src/USER/rtc.c **** 		HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 194:Core/Src/USER/rtc.c **** 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, (uint16_t) (dienos.Year<<8) + dienos.Month);	
 196:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 197:Core/Src/USER/rtc.c **** 	}
 198:Core/Src/USER/rtc.c **** }
 561              		.loc 2 198 1 view .LVU148
 562 0014 03B0     		add	sp, sp, #12
 563              	.LCFI12:
 564              		.cfi_remember_state
 565              		.cfi_def_cfa_offset 12
 566              		@ sp needed
 567 0016 30BD     		pop	{r4, r5, pc}
 568              	.L32:
 569              	.LCFI13:
 570              		.cfi_restore_state
 193:Core/Src/USER/rtc.c **** 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 571              		.loc 2 193 3 is_stmt 1 view .LVU149
 572 0018 0F4C     		ldr	r4, .L33
 573 001a 0022     		movs	r2, #0
 574 001c 01A9     		add	r1, sp, #4
 575 001e 2046     		mov	r0, r4
 576 0020 FFF7FEFF 		bl	HAL_RTC_GetDate
 577              	.LVL21:
 194:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, (uint16_t) (dienos.Year<<8) + dienos.Month);	
 578              		.loc 2 194 3 view .LVU150
 579 0024 0D4D     		ldr	r5, .L33+4
 580 0026 0022     		movs	r2, #0
 581 0028 2946     		mov	r1, r5
 582 002a 2046     		mov	r0, r4
 583 002c FFF7FEFF 		bl	HAL_RTC_GetTime
 584              	.LVL22:
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 585              		.loc 2 195 3 view .LVU151
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 586              		.loc 2 195 61 is_stmt 0 view .LVU152
 587 0030 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 588              		.loc 2 195 79 view .LVU153
 589 0034 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 590              		.loc 2 195 3 view .LVU154
 591 0038 03EB0222 		add	r2, r3, r2, lsl #8
 592 003c 0221     		movs	r1, #2
 593 003e 2046     		mov	r0, r4
 594 0040 FFF7FEFF 		bl	HAL_RTCEx_BKUPWrite
 595              	.LVL23:
 196:Core/Src/USER/rtc.c **** 	}
 596              		.loc 2 196 3 is_stmt 1 view .LVU155
 196:Core/Src/USER/rtc.c **** 	}
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 22


 597              		.loc 2 196 61 is_stmt 0 view .LVU156
 598 0044 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 196:Core/Src/USER/rtc.c **** 	}
 599              		.loc 2 196 81 view .LVU157
 600 0048 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 196:Core/Src/USER/rtc.c **** 	}
 601              		.loc 2 196 3 view .LVU158
 602 004a 03EB0222 		add	r2, r3, r2, lsl #8
 603 004e 0321     		movs	r1, #3
 604 0050 2046     		mov	r0, r4
 605 0052 FFF7FEFF 		bl	HAL_RTCEx_BKUPWrite
 606              	.LVL24:
 607              		.loc 2 198 1 view .LVU159
 608 0056 DDE7     		b	.L29
 609              	.L34:
 610              		.align	2
 611              	.L33:
 612 0058 00000000 		.word	hrtc
 613 005c 00000000 		.word	.LANCHOR1
 614              		.cfi_endproc
 615              	.LFE75:
 617              		.section	.text.rtc_int_init,"ax",%progbits
 618              		.align	1
 619              		.global	rtc_int_init
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu softvfp
 625              	rtc_int_init:
 626              	.LFB77:
 199:Core/Src/USER/rtc.c **** 
 200:Core/Src/USER/rtc.c **** void rtc_check_screwd_calendar(void)
 201:Core/Src/USER/rtc.c **** {
 202:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 203:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 204:Core/Src/USER/rtc.c **** 	{
 205:Core/Src/USER/rtc.c **** 		HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 206:Core/Src/USER/rtc.c **** 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 208:Core/Src/USER/rtc.c **** 		
 209:Core/Src/USER/rtc.c **** 		uint32_t tmp=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR2);
 210:Core/Src/USER/rtc.c **** 		uint32_t tmp2=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR3);	
 211:Core/Src/USER/rtc.c **** 	
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 213:Core/Src/USER/rtc.c **** 		if(now_was > now_is)
 214:Core/Src/USER/rtc.c **** 			{
 215:Core/Src/USER/rtc.c **** 			dienos.Year=(tmp >> 8);
 216:Core/Src/USER/rtc.c **** 			dienos.Month=tmp & 0x0F;
 217:Core/Src/USER/rtc.c **** 			dienos.Date=(tmp2 >> 8);
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 219:Core/Src/USER/rtc.c **** 			  {
 220:Core/Src/USER/rtc.c **** 				Error_Handler();
 221:Core/Src/USER/rtc.c **** 			  }
 222:Core/Src/USER/rtc.c **** 			 rtc_backup_date();
 223:Core/Src/USER/rtc.c **** 			}
 224:Core/Src/USER/rtc.c **** 	}
 225:Core/Src/USER/rtc.c **** }
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 23


 226:Core/Src/USER/rtc.c **** 
 227:Core/Src/USER/rtc.c **** 
 228:Core/Src/USER/rtc.c **** /* INT INT INT INT INT INT INT INT INT INT INT INT INT INT INT INT */
 229:Core/Src/USER/rtc.c **** 
 230:Core/Src/USER/rtc.c **** /* ijungti RTC pertraukimus */
 231:Core/Src/USER/rtc.c **** void rtc_int_init(void)
 232:Core/Src/USER/rtc.c **** {
 627              		.loc 2 232 1 is_stmt 1 view -0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 233:Core/Src/USER/rtc.c **** 	__HAL_RTC_SECOND_ENABLE_IT(&hrtc,RTC_IT_SEC); //turn on RTC clock seconds interrupt
 632              		.loc 2 233 2 view .LVU161
 633 0000 034B     		ldr	r3, .L36
 634 0002 1A68     		ldr	r2, [r3]
 635 0004 1368     		ldr	r3, [r2]
 636 0006 43F00103 		orr	r3, r3, #1
 637 000a 1360     		str	r3, [r2]
 234:Core/Src/USER/rtc.c **** }
 638              		.loc 2 234 1 is_stmt 0 view .LVU162
 639 000c 7047     		bx	lr
 640              	.L37:
 641 000e 00BF     		.align	2
 642              	.L36:
 643 0010 00000000 		.word	hrtc
 644              		.cfi_endproc
 645              	.LFE77:
 647              		.section	.text.circle_reset,"ax",%progbits
 648              		.align	1
 649              		.global	circle_reset
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu softvfp
 655              	circle_reset:
 656              	.LVL25:
 657              	.LFB79:
 658              		.file 3 "Core/Src/USER/circular_buffer.c"
   1:Core/Src/USER/circular_buffer.c **** /* ********************************************* */
   2:Core/Src/USER/circular_buffer.c **** /* (c)2022 by www.vabolis.lt, Kaunas             */
   3:Core/Src/USER/circular_buffer.c **** /**
   4:Core/Src/USER/circular_buffer.c ****   **********************************************
   5:Core/Src/USER/circular_buffer.c ****   * @file           : circular_buffer.c
   6:Core/Src/USER/circular_buffer.c ****   * @version        : 1.0
   7:Core/Src/USER/circular_buffer.c ****   * @brief          : circular buffer for uart/usb
   8:Core/Src/USER/circular_buffer.c **** **/  
   9:Core/Src/USER/circular_buffer.c **** /* ********************************************* */
  10:Core/Src/USER/circular_buffer.c **** 
  11:Core/Src/USER/circular_buffer.c **** #include "circular_buffer.h"
  12:Core/Src/USER/circular_buffer.c **** 
  13:Core/Src/USER/circular_buffer.c **** /* INSTRUKCIJA
  14:Core/Src/USER/circular_buffer.c **** #define BUFFER_SIZE 32
  15:Core/Src/USER/circular_buffer.c **** 
  16:Core/Src/USER/circular_buffer.c **** unsigned char testas[BUFFER_SIZE];
  17:Core/Src/USER/circular_buffer.c **** CCBuf cc; //struktura
  18:Core/Src/USER/circular_buffer.c **** //init
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 24


  19:Core/Src/USER/circular_buffer.c **** cc.buffer=testas;
  20:Core/Src/USER/circular_buffer.c **** circle_reset(&cc,BUFFER_SIZE);
  21:Core/Src/USER/circular_buffer.c **** 
  22:Core/Src/USER/circular_buffer.c **** //naudojimas
  23:Core/Src/USER/circular_buffer.c **** 
  24:Core/Src/USER/circular_buffer.c **** while(circle_available(&cc)>0) {a=circle_pull(&cc); naudoti duomenys}
  25:Core/Src/USER/circular_buffer.c **** 					
  26:Core/Src/USER/circular_buffer.c **** // uart callback
  27:Core/Src/USER/circular_buffer.c **** circle_push(&cc , baitinisbuferis); // push received byte to circular buffer
  28:Core/Src/USER/circular_buffer.c **** 					
  29:Core/Src/USER/circular_buffer.c **** 
  30:Core/Src/USER/circular_buffer.c **** ************* */
  31:Core/Src/USER/circular_buffer.c **** 
  32:Core/Src/USER/circular_buffer.c **** 
  33:Core/Src/USER/circular_buffer.c **** 
  34:Core/Src/USER/circular_buffer.c **** void circle_reset(CCBuf *c, size_t size)
  35:Core/Src/USER/circular_buffer.c **** {
 659              		.loc 3 35 1 is_stmt 1 view -0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              		@ link register save eliminated.
  36:Core/Src/USER/circular_buffer.c **** 	c->head=0;
 664              		.loc 3 36 2 view .LVU164
 665              		.loc 3 36 9 is_stmt 0 view .LVU165
 666 0000 0023     		movs	r3, #0
 667 0002 4360     		str	r3, [r0, #4]
  37:Core/Src/USER/circular_buffer.c **** 	c->tail=0;
 668              		.loc 3 37 2 is_stmt 1 view .LVU166
 669              		.loc 3 37 9 is_stmt 0 view .LVU167
 670 0004 8360     		str	r3, [r0, #8]
  38:Core/Src/USER/circular_buffer.c **** 	c->max=size; //sizeof(c->buffer); <-- negauna sitos informacijos
 671              		.loc 3 38 2 is_stmt 1 view .LVU168
 672              		.loc 3 38 8 is_stmt 0 view .LVU169
 673 0006 0161     		str	r1, [r0, #16]
  39:Core/Src/USER/circular_buffer.c **** 	c->count=0;
 674              		.loc 3 39 2 is_stmt 1 view .LVU170
 675              		.loc 3 39 10 is_stmt 0 view .LVU171
 676 0008 C360     		str	r3, [r0, #12]
  40:Core/Src/USER/circular_buffer.c **** }
 677              		.loc 3 40 1 view .LVU172
 678 000a 7047     		bx	lr
 679              		.cfi_endproc
 680              	.LFE79:
 682              		.section	.text.circle_push,"ax",%progbits
 683              		.align	1
 684              		.global	circle_push
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 688              		.fpu softvfp
 690              	circle_push:
 691              	.LVL26:
 692              	.LFB80:
  41:Core/Src/USER/circular_buffer.c **** 
  42:Core/Src/USER/circular_buffer.c **** void circle_push(CCBuf *c,unsigned char b)
  43:Core/Src/USER/circular_buffer.c **** {
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 25


 693              		.loc 3 43 1 is_stmt 1 view -0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
  44:Core/Src/USER/circular_buffer.c **** 	c->buffer[c->head]=b;
 698              		.loc 3 44 2 view .LVU174
 699              		.loc 3 44 3 is_stmt 0 view .LVU175
 700 0000 0268     		ldr	r2, [r0]
 701              		.loc 3 44 13 view .LVU176
 702 0002 4368     		ldr	r3, [r0, #4]
 703              		.loc 3 44 20 view .LVU177
 704 0004 D154     		strb	r1, [r2, r3]
  45:Core/Src/USER/circular_buffer.c **** 	c->head++; if(c->head == c->max) {c->head=0;}
 705              		.loc 3 45 2 is_stmt 1 view .LVU178
 706              		.loc 3 45 3 is_stmt 0 view .LVU179
 707 0006 4368     		ldr	r3, [r0, #4]
 708              		.loc 3 45 9 view .LVU180
 709 0008 0133     		adds	r3, r3, #1
 710 000a 4360     		str	r3, [r0, #4]
 711              		.loc 3 45 13 is_stmt 1 view .LVU181
 712              		.loc 3 45 28 is_stmt 0 view .LVU182
 713 000c 0269     		ldr	r2, [r0, #16]
 714              		.loc 3 45 15 view .LVU183
 715 000e 9342     		cmp	r3, r2
 716 0010 03D0     		beq	.L41
 717              	.L40:
  46:Core/Src/USER/circular_buffer.c **** 	c->count++;
 718              		.loc 3 46 2 is_stmt 1 view .LVU184
 719              		.loc 3 46 3 is_stmt 0 view .LVU185
 720 0012 C368     		ldr	r3, [r0, #12]
 721              		.loc 3 46 10 view .LVU186
 722 0014 0133     		adds	r3, r3, #1
 723 0016 C360     		str	r3, [r0, #12]
  47:Core/Src/USER/circular_buffer.c **** 	//if(c->count == c->max) {c->count=c->max;} //error
  48:Core/Src/USER/circular_buffer.c **** }
 724              		.loc 3 48 1 view .LVU187
 725 0018 7047     		bx	lr
 726              	.L41:
  45:Core/Src/USER/circular_buffer.c **** 	c->count++;
 727              		.loc 3 45 36 is_stmt 1 discriminator 1 view .LVU188
  45:Core/Src/USER/circular_buffer.c **** 	c->count++;
 728              		.loc 3 45 43 is_stmt 0 discriminator 1 view .LVU189
 729 001a 0023     		movs	r3, #0
 730 001c 4360     		str	r3, [r0, #4]
 731 001e F8E7     		b	.L40
 732              		.cfi_endproc
 733              	.LFE80:
 735              		.section	.text.circle_pull,"ax",%progbits
 736              		.align	1
 737              		.global	circle_pull
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu softvfp
 743              	circle_pull:
 744              	.LVL27:
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 26


 745              	.LFB81:
  49:Core/Src/USER/circular_buffer.c **** 
  50:Core/Src/USER/circular_buffer.c **** unsigned char circle_pull(CCBuf *c)
  51:Core/Src/USER/circular_buffer.c **** {
 746              		.loc 3 51 1 is_stmt 1 view -0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751              		.loc 3 51 1 is_stmt 0 view .LVU191
 752 0000 0346     		mov	r3, r0
  52:Core/Src/USER/circular_buffer.c **** unsigned char b;
 753              		.loc 3 52 1 is_stmt 1 view .LVU192
  53:Core/Src/USER/circular_buffer.c **** 	b=c->buffer[c->tail];
 754              		.loc 3 53 2 view .LVU193
 755              		.loc 3 53 5 is_stmt 0 view .LVU194
 756 0002 0168     		ldr	r1, [r0]
 757              		.loc 3 53 15 view .LVU195
 758 0004 8268     		ldr	r2, [r0, #8]
 759              		.loc 3 53 3 view .LVU196
 760 0006 885C     		ldrb	r0, [r1, r2]	@ zero_extendqisi2
 761              	.LVL28:
  54:Core/Src/USER/circular_buffer.c **** 	c->tail++;
 762              		.loc 3 54 2 is_stmt 1 view .LVU197
 763              		.loc 3 54 9 is_stmt 0 view .LVU198
 764 0008 0132     		adds	r2, r2, #1
 765 000a 9A60     		str	r2, [r3, #8]
  55:Core/Src/USER/circular_buffer.c **** 	if(c->tail == c->max) {c->tail=0;}
 766              		.loc 3 55 2 is_stmt 1 view .LVU199
 767              		.loc 3 55 17 is_stmt 0 view .LVU200
 768 000c 1969     		ldr	r1, [r3, #16]
 769              		.loc 3 55 4 view .LVU201
 770 000e 8A42     		cmp	r2, r1
 771 0010 03D0     		beq	.L44
 772              	.L43:
  56:Core/Src/USER/circular_buffer.c **** 	c->count--;
 773              		.loc 3 56 2 is_stmt 1 view .LVU202
 774              		.loc 3 56 3 is_stmt 0 view .LVU203
 775 0012 DA68     		ldr	r2, [r3, #12]
 776              		.loc 3 56 10 view .LVU204
 777 0014 013A     		subs	r2, r2, #1
 778 0016 DA60     		str	r2, [r3, #12]
  57:Core/Src/USER/circular_buffer.c **** 	//if(c->count == c->max){c->count=0;} //error
  58:Core/Src/USER/circular_buffer.c **** return b;
 779              		.loc 3 58 1 is_stmt 1 view .LVU205
  59:Core/Src/USER/circular_buffer.c **** }
 780              		.loc 3 59 1 is_stmt 0 view .LVU206
 781 0018 7047     		bx	lr
 782              	.L44:
  55:Core/Src/USER/circular_buffer.c **** 	c->count--;
 783              		.loc 3 55 25 is_stmt 1 discriminator 1 view .LVU207
  55:Core/Src/USER/circular_buffer.c **** 	c->count--;
 784              		.loc 3 55 32 is_stmt 0 discriminator 1 view .LVU208
 785 001a 0022     		movs	r2, #0
 786 001c 9A60     		str	r2, [r3, #8]
 787 001e F8E7     		b	.L43
 788              		.cfi_endproc
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 27


 789              	.LFE81:
 791              		.section	.text.circle_push_buf,"ax",%progbits
 792              		.align	1
 793              		.global	circle_push_buf
 794              		.syntax unified
 795              		.thumb
 796              		.thumb_func
 797              		.fpu softvfp
 799              	circle_push_buf:
 800              	.LVL29:
 801              	.LFB82:
  60:Core/Src/USER/circular_buffer.c **** 
  61:Core/Src/USER/circular_buffer.c **** void circle_push_buf(CCBuf *c, unsigned char *b, size_t len)
  62:Core/Src/USER/circular_buffer.c **** {
 802              		.loc 3 62 1 is_stmt 1 view -0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              		.loc 3 62 1 is_stmt 0 view .LVU210
 807 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 808              	.LCFI14:
 809              		.cfi_def_cfa_offset 24
 810              		.cfi_offset 3, -24
 811              		.cfi_offset 4, -20
 812              		.cfi_offset 5, -16
 813              		.cfi_offset 6, -12
 814              		.cfi_offset 7, -8
 815              		.cfi_offset 14, -4
 816 0002 0746     		mov	r7, r0
 817 0004 0E46     		mov	r6, r1
 818 0006 1546     		mov	r5, r2
  63:Core/Src/USER/circular_buffer.c **** size_t i;
 819              		.loc 3 63 1 is_stmt 1 view .LVU211
  64:Core/Src/USER/circular_buffer.c **** for (i=0;i<len;i++){circle_push(c,b[i]);}
 820              		.loc 3 64 1 view .LVU212
 821              	.LVL30:
 822              		.loc 3 64 7 is_stmt 0 view .LVU213
 823 0008 0024     		movs	r4, #0
 824              	.LVL31:
 825              	.L46:
 826              		.loc 3 64 10 is_stmt 1 discriminator 1 view .LVU214
 827              		.loc 3 64 1 is_stmt 0 discriminator 1 view .LVU215
 828 000a AC42     		cmp	r4, r5
 829 000c 05D2     		bcs	.L49
 830              		.loc 3 64 21 is_stmt 1 discriminator 3 view .LVU216
 831 000e 315D     		ldrb	r1, [r6, r4]	@ zero_extendqisi2
 832 0010 3846     		mov	r0, r7
 833 0012 FFF7FEFF 		bl	circle_push
 834              	.LVL32:
 835              		.loc 3 64 16 discriminator 3 view .LVU217
 836              		.loc 3 64 17 is_stmt 0 discriminator 3 view .LVU218
 837 0016 0134     		adds	r4, r4, #1
 838              	.LVL33:
 839              		.loc 3 64 17 discriminator 3 view .LVU219
 840 0018 F7E7     		b	.L46
 841              	.L49:
  65:Core/Src/USER/circular_buffer.c **** }
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 28


 842              		.loc 3 65 1 view .LVU220
 843 001a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 844              		.loc 3 65 1 view .LVU221
 845              		.cfi_endproc
 846              	.LFE82:
 848              		.section	.text.circle_available,"ax",%progbits
 849              		.align	1
 850              		.global	circle_available
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu softvfp
 856              	circle_available:
 857              	.LVL34:
 858              	.LFB83:
  66:Core/Src/USER/circular_buffer.c **** 
  67:Core/Src/USER/circular_buffer.c **** size_t circle_available(CCBuf *c)
  68:Core/Src/USER/circular_buffer.c **** {
 859              		.loc 3 68 1 is_stmt 1 view -0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              		@ link register save eliminated.
  69:Core/Src/USER/circular_buffer.c **** return c->count;
 864              		.loc 3 69 1 view .LVU223
  70:Core/Src/USER/circular_buffer.c **** }
 865              		.loc 3 70 1 is_stmt 0 view .LVU224
 866 0000 C068     		ldr	r0, [r0, #12]
 867              	.LVL35:
 868              		.loc 3 70 1 view .LVU225
 869 0002 7047     		bx	lr
 870              		.cfi_endproc
 871              	.LFE83:
 873              		.section	.text.circle_free,"ax",%progbits
 874              		.align	1
 875              		.global	circle_free
 876              		.syntax unified
 877              		.thumb
 878              		.thumb_func
 879              		.fpu softvfp
 881              	circle_free:
 882              	.LVL36:
 883              	.LFB84:
  71:Core/Src/USER/circular_buffer.c **** size_t circle_free(CCBuf *c)
  72:Core/Src/USER/circular_buffer.c **** {
 884              		.loc 3 72 1 is_stmt 1 view -0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              		@ link register save eliminated.
  73:Core/Src/USER/circular_buffer.c **** return c->max - c->count;
 889              		.loc 3 73 1 view .LVU227
 890              		.loc 3 73 9 is_stmt 0 view .LVU228
 891 0000 0269     		ldr	r2, [r0, #16]
 892              		.loc 3 73 18 view .LVU229
 893 0002 C068     		ldr	r0, [r0, #12]
 894              	.LVL37:
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 29


  74:Core/Src/USER/circular_buffer.c **** }
 895              		.loc 3 74 1 view .LVU230
 896 0004 101A     		subs	r0, r2, r0
 897 0006 7047     		bx	lr
 898              		.cfi_endproc
 899              	.LFE84:
 901              		.section	.text.user_usb_rx,"ax",%progbits
 902              		.align	1
 903              		.global	user_usb_rx
 904              		.syntax unified
 905              		.thumb
 906              		.thumb_func
 907              		.fpu softvfp
 909              	user_usb_rx:
 910              	.LVL38:
 911              	.LFB85:
 912              		.file 4 "Core/Src/USER/user.c"
   1:Core/Src/USER/user.c **** /* ***********************************************
   2:Core/Src/USER/user.c **** **                                              **
   3:Core/Src/USER/user.c **** ** 40mA   RTC clock V1.0 www.vabolis.lt (c)2023 **
   4:Core/Src/USER/user.c **** **                                              **
   5:Core/Src/USER/user.c **** ************************************************ */
   6:Core/Src/USER/user.c **** 
   7:Core/Src/USER/user.c **** #include "user.h"
   8:Core/Src/USER/user.c **** 
   9:Core/Src/USER/user.c **** 
  10:Core/Src/USER/user.c **** #include "rtc.c"
  11:Core/Src/USER/user.c **** #include "circular_buffer.c"
  12:Core/Src/USER/user.c **** 
  13:Core/Src/USER/user.c **** extern IWDG_HandleTypeDef hiwdg;
  14:Core/Src/USER/user.c **** extern RTC_HandleTypeDef hrtc;
  15:Core/Src/USER/user.c **** extern TIM_HandleTypeDef htim1;
  16:Core/Src/USER/user.c **** 
  17:Core/Src/USER/user.c **** 
  18:Core/Src/USER/user.c **** #define BUFFER_SIZE 64
  19:Core/Src/USER/user.c **** unsigned char testas[BUFFER_SIZE];
  20:Core/Src/USER/user.c **** 
  21:Core/Src/USER/user.c **** CCBuf cc; //struktura
  22:Core/Src/USER/user.c **** 
  23:Core/Src/USER/user.c **** volatile char seconds;
  24:Core/Src/USER/user.c **** 
  25:Core/Src/USER/user.c **** 
  26:Core/Src/USER/user.c **** void user_usb_rx(uint8_t* Buf, uint32_t *Len)
  27:Core/Src/USER/user.c **** {
 913              		.loc 4 27 1 is_stmt 1 view -0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 0
 916              		@ frame_needed = 0, uses_anonymous_args = 0
 917              		.loc 4 27 1 is_stmt 0 view .LVU232
 918 0000 70B5     		push	{r4, r5, r6, lr}
 919              	.LCFI15:
 920              		.cfi_def_cfa_offset 16
 921              		.cfi_offset 4, -16
 922              		.cfi_offset 5, -12
 923              		.cfi_offset 6, -8
 924              		.cfi_offset 14, -4
 925 0002 0646     		mov	r6, r0
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 30


 926 0004 0D46     		mov	r5, r1
  28:Core/Src/USER/user.c **** unsigned char i,a;
 927              		.loc 4 28 1 is_stmt 1 view .LVU233
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 928              		.loc 4 29 1 view .LVU234
 929              	.LVL39:
 930              		.loc 4 29 7 is_stmt 0 view .LVU235
 931 0006 0024     		movs	r4, #0
 932              		.loc 4 29 1 view .LVU236
 933 0008 04E0     		b	.L53
 934              	.LVL40:
 935              	.L58:
  30:Core/Src/USER/user.c **** 	{
  31:Core/Src/USER/user.c **** 		a=Buf[i];
  32:Core/Src/USER/user.c **** 		if (a>10) circle_push(&cc , a);
 936              		.loc 4 32 13 is_stmt 1 discriminator 1 view .LVU237
 937 000a 0648     		ldr	r0, .L59
 938 000c FFF7FEFF 		bl	circle_push
 939              	.LVL41:
 940              	.L54:
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 941              		.loc 4 29 17 discriminator 2 view .LVU238
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 942              		.loc 4 29 18 is_stmt 0 discriminator 2 view .LVU239
 943 0010 0134     		adds	r4, r4, #1
 944              	.LVL42:
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 945              		.loc 4 29 18 discriminator 2 view .LVU240
 946 0012 E4B2     		uxtb	r4, r4
 947              	.LVL43:
 948              	.L53:
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 949              		.loc 4 29 10 is_stmt 1 discriminator 1 view .LVU241
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 950              		.loc 4 29 12 is_stmt 0 discriminator 1 view .LVU242
 951 0014 2B68     		ldr	r3, [r5]
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 952              		.loc 4 29 1 discriminator 1 view .LVU243
 953 0016 9C42     		cmp	r4, r3
 954 0018 03D2     		bcs	.L57
  31:Core/Src/USER/user.c **** 		if (a>10) circle_push(&cc , a);
 955              		.loc 4 31 3 is_stmt 1 view .LVU244
  31:Core/Src/USER/user.c **** 		if (a>10) circle_push(&cc , a);
 956              		.loc 4 31 4 is_stmt 0 view .LVU245
 957 001a 315D     		ldrb	r1, [r6, r4]	@ zero_extendqisi2
 958              	.LVL44:
 959              		.loc 4 32 3 is_stmt 1 view .LVU246
 960              		.loc 4 32 6 is_stmt 0 view .LVU247
 961 001c 0A29     		cmp	r1, #10
 962 001e F7D9     		bls	.L54
 963 0020 F3E7     		b	.L58
 964              	.LVL45:
 965              	.L57:
  33:Core/Src/USER/user.c **** 	}
  34:Core/Src/USER/user.c **** }
 966              		.loc 4 34 1 view .LVU248
 967 0022 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 31


 968              	.LVL46:
 969              	.L60:
 970              		.loc 4 34 1 view .LVU249
 971              		.align	2
 972              	.L59:
 973 0024 00000000 		.word	cc
 974              		.cfi_endproc
 975              	.LFE85:
 977              		.section	.text.user_init,"ax",%progbits
 978              		.align	1
 979              		.global	user_init
 980              		.syntax unified
 981              		.thumb
 982              		.thumb_func
 983              		.fpu softvfp
 985              	user_init:
 986              	.LFB86:
  35:Core/Src/USER/user.c **** 
  36:Core/Src/USER/user.c **** void user_init(void)
  37:Core/Src/USER/user.c **** {
 987              		.loc 4 37 1 is_stmt 1 view -0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 0
 990              		@ frame_needed = 0, uses_anonymous_args = 0
 991 0000 10B5     		push	{r4, lr}
 992              	.LCFI16:
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 4, -8
 995              		.cfi_offset 14, -4
  38:Core/Src/USER/user.c **** 	cc.buffer=testas;
 996              		.loc 4 38 2 view .LVU251
 997              		.loc 4 38 11 is_stmt 0 view .LVU252
 998 0002 0948     		ldr	r0, .L63
 999 0004 094B     		ldr	r3, .L63+4
 1000 0006 0360     		str	r3, [r0]
  39:Core/Src/USER/user.c **** 	circle_reset(&cc,BUFFER_SIZE);			//init circle buffer
 1001              		.loc 4 39 2 is_stmt 1 view .LVU253
 1002 0008 4021     		movs	r1, #64
 1003 000a FFF7FEFF 		bl	circle_reset
 1004              	.LVL47:
  40:Core/Src/USER/user.c **** 	rtc_int_init();
 1005              		.loc 4 40 2 view .LVU254
 1006 000e FFF7FEFF 		bl	rtc_int_init
 1007              	.LVL48:
  41:Core/Src/USER/user.c **** 	
  42:Core/Src/USER/user.c **** 	//HAL_TIM_Base_Start(&htim1);
  43:Core/Src/USER/user.c **** 	
  44:Core/Src/USER/user.c **** 	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1008              		.loc 4 44 2 view .LVU255
 1009 0012 074C     		ldr	r4, .L63+8
 1010 0014 0021     		movs	r1, #0
 1011 0016 2046     		mov	r0, r4
 1012 0018 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1013              	.LVL49:
  45:Core/Src/USER/user.c **** 	//HAL_TIM_Base_Start_IT(&htim1);
  46:Core/Src/USER/user.c **** __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,5*255);
 1014              		.loc 4 46 1 view .LVU256
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 32


 1015 001c 2368     		ldr	r3, [r4]
 1016 001e 40F2FB42 		movw	r2, #1275
 1017 0022 5A63     		str	r2, [r3, #52]
  47:Core/Src/USER/user.c **** 	//HAL_RTCEx_SetSmoothCalib(&hrtc,0,0,10); // du nuliai nes F1 nera. paskutinis- skaicius 0-7F, tik
  48:Core/Src/USER/user.c **** }
 1018              		.loc 4 48 1 is_stmt 0 view .LVU257
 1019 0024 10BD     		pop	{r4, pc}
 1020              	.L64:
 1021 0026 00BF     		.align	2
 1022              	.L63:
 1023 0028 00000000 		.word	cc
 1024 002c 00000000 		.word	testas
 1025 0030 00000000 		.word	htim1
 1026              		.cfi_endproc
 1027              	.LFE86:
 1029              		.section	.text.user_seconds_job,"ax",%progbits
 1030              		.align	1
 1031              		.global	user_seconds_job
 1032              		.syntax unified
 1033              		.thumb
 1034              		.thumb_func
 1035              		.fpu softvfp
 1037              	user_seconds_job:
 1038              	.LFB89:
  49:Core/Src/USER/user.c **** 
  50:Core/Src/USER/user.c **** 
  51:Core/Src/USER/user.c **** 
  52:Core/Src/USER/user.c **** void commandcom(char * txt) // network (UART,USB) command interpreter
  53:Core/Src/USER/user.c **** {
  54:Core/Src/USER/user.c **** 
  55:Core/Src/USER/user.c **** if (txt[0] !='A' || txt[1]!='T') return;
  56:Core/Src/USER/user.c **** 
  57:Core/Src/USER/user.c **** 	switch(txt[2])
  58:Core/Src/USER/user.c **** 	{
  59:Core/Src/USER/user.c **** 		case 'T':
  60:Core/Src/USER/user.c **** 			rtc_set_time_text(txt+3);
  61:Core/Src/USER/user.c **** 		break;
  62:Core/Src/USER/user.c **** 		case 'D':
  63:Core/Src/USER/user.c **** 			rtc_set_date_text(txt+3);		
  64:Core/Src/USER/user.c **** 		break; 
  65:Core/Src/USER/user.c **** 		case 'I':
  66:Core/Src/USER/user.c **** 			CDC_Transmit_FS((uint8_t*) "9H CLOCK\r\n(c)2023 Vabolis.lt\r\n",33);
  67:Core/Src/USER/user.c **** 		break;
  68:Core/Src/USER/user.c **** 		case 'A':
  69:Core/Src/USER/user.c **** 			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,55*255);
  70:Core/Src/USER/user.c **** 		break;
  71:Core/Src/USER/user.c **** 	}
  72:Core/Src/USER/user.c **** }
  73:Core/Src/USER/user.c **** 
  74:Core/Src/USER/user.c **** 
  75:Core/Src/USER/user.c **** void user_loop(void)
  76:Core/Src/USER/user.c **** {
  77:Core/Src/USER/user.c **** char a;
  78:Core/Src/USER/user.c **** char txt[32];
  79:Core/Src/USER/user.c **** unsigned char txtp=0;
  80:Core/Src/USER/user.c **** 
  81:Core/Src/USER/user.c **** while(1)
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 33


  82:Core/Src/USER/user.c **** 	{
  83:Core/Src/USER/user.c **** 	HAL_IWDG_Refresh(&hiwdg); //watchdogas
  84:Core/Src/USER/user.c **** 	while(circle_available(&cc)>0) 
  85:Core/Src/USER/user.c **** 		{
  86:Core/Src/USER/user.c **** 			a=circle_pull(&cc);
  87:Core/Src/USER/user.c **** 			
  88:Core/Src/USER/user.c **** 			if (a>=' ' && a<='z')
  89:Core/Src/USER/user.c **** 			{
  90:Core/Src/USER/user.c **** 				txt[txtp]=a;
  91:Core/Src/USER/user.c **** 				txtp++;
  92:Core/Src/USER/user.c **** 				txt[txtp]=0;
  93:Core/Src/USER/user.c **** 				if (txtp >30) {txtp=0;}
  94:Core/Src/USER/user.c **** 			}
  95:Core/Src/USER/user.c **** 			else if (a<' ')
  96:Core/Src/USER/user.c **** 			{
  97:Core/Src/USER/user.c **** 				if (txtp>2)commandcom(txt);
  98:Core/Src/USER/user.c **** 				txt[0]=0;
  99:Core/Src/USER/user.c **** 				txtp=0;
 100:Core/Src/USER/user.c **** 			}
 101:Core/Src/USER/user.c **** 		}
 102:Core/Src/USER/user.c **** 	}
 103:Core/Src/USER/user.c **** } /* be isejimo is loop! */
 104:Core/Src/USER/user.c **** 
 105:Core/Src/USER/user.c **** 
 106:Core/Src/USER/user.c **** 
 107:Core/Src/USER/user.c **** void user_seconds_job(void)
 108:Core/Src/USER/user.c **** {
 1039              		.loc 4 108 1 is_stmt 1 view -0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043 0000 08B5     		push	{r3, lr}
 1044              	.LCFI17:
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 3, -8
 1047              		.cfi_offset 14, -4
 109:Core/Src/USER/user.c **** 	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 1048              		.loc 4 109 2 view .LVU259
 1049 0002 0022     		movs	r2, #0
 1050 0004 0949     		ldr	r1, .L67
 1051 0006 0A48     		ldr	r0, .L67+4
 1052 0008 FFF7FEFF 		bl	HAL_RTC_GetTime
 1053              	.LVL50:
 110:Core/Src/USER/user.c **** 
 111:Core/Src/USER/user.c **** 	HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 1054              		.loc 4 111 2 view .LVU260
 1055 000c 0121     		movs	r1, #1
 1056 000e 0948     		ldr	r0, .L67+8
 1057 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1058              	.LVL51:
 112:Core/Src/USER/user.c **** seconds++;
 1059              		.loc 4 112 1 view .LVU261
 1060              		.loc 4 112 8 is_stmt 0 view .LVU262
 1061 0014 084A     		ldr	r2, .L67+12
 1062 0016 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1063 0018 0133     		adds	r3, r3, #1
 1064 001a DBB2     		uxtb	r3, r3
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 34


 1065 001c 1370     		strb	r3, [r2]
 113:Core/Src/USER/user.c **** __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,seconds*255);
 1066              		.loc 4 113 1 is_stmt 1 view .LVU263
 1067 001e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1068 0020 064A     		ldr	r2, .L67+16
 1069 0022 1268     		ldr	r2, [r2]
 1070 0024 C3EB0323 		rsb	r3, r3, r3, lsl #8
 1071 0028 5363     		str	r3, [r2, #52]
 114:Core/Src/USER/user.c **** }
 1072              		.loc 4 114 1 is_stmt 0 view .LVU264
 1073 002a 08BD     		pop	{r3, pc}
 1074              	.L68:
 1075              		.align	2
 1076              	.L67:
 1077 002c 00000000 		.word	.LANCHOR1
 1078 0030 00000000 		.word	hrtc
 1079 0034 00080140 		.word	1073809408
 1080 0038 00000000 		.word	seconds
 1081 003c 00000000 		.word	htim1
 1082              		.cfi_endproc
 1083              	.LFE89:
 1085              		.section	.text.HAL_RTCEx_RTCEventCallback,"ax",%progbits
 1086              		.align	1
 1087              		.global	HAL_RTCEx_RTCEventCallback
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1091              		.fpu softvfp
 1093              	HAL_RTCEx_RTCEventCallback:
 1094              	.LVL52:
 1095              	.LFB78:
 235:Core/Src/USER/rtc.c **** 
 236:Core/Src/USER/rtc.c **** 
 237:Core/Src/USER/rtc.c **** /**
 238:Core/Src/USER/rtc.c ****   * @brief  Second event callback.
 239:Core/Src/USER/rtc.c **** **/
 240:Core/Src/USER/rtc.c **** /* kas sekunde, turi buti ijungtas INT */
 241:Core/Src/USER/rtc.c **** void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
 242:Core/Src/USER/rtc.c **** {
 1096              		.loc 2 242 1 is_stmt 1 view -0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              		.loc 2 242 1 is_stmt 0 view .LVU266
 1101 0000 08B5     		push	{r3, lr}
 1102              	.LCFI18:
 1103              		.cfi_def_cfa_offset 8
 1104              		.cfi_offset 3, -8
 1105              		.cfi_offset 14, -4
 243:Core/Src/USER/rtc.c **** 	user_seconds_job();
 1106              		.loc 2 243 2 is_stmt 1 view .LVU267
 1107 0002 FFF7FEFF 		bl	user_seconds_job
 1108              	.LVL53:
 244:Core/Src/USER/rtc.c **** 	//if(LastHour != currTime.Hours) {rtc_backup_date(); LastHour=currTime.Hours;}
 245:Core/Src/USER/rtc.c **** }...
 1109              		.loc 2 245 1 is_stmt 0 view .LVU268
 1110 0006 08BD     		pop	{r3, pc}
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 35


 1111              		.cfi_endproc
 1112              	.LFE78:
 1114              		.section	.text.Error_Handler,"ax",%progbits
 1115              		.align	1
 1116              		.global	Error_Handler
 1117              		.syntax unified
 1118              		.thumb
 1119              		.thumb_func
 1120              		.fpu softvfp
 1122              	Error_Handler:
 1123              	.LFB96:
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c **** /* USER CODE END 4 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c **** /**
 395:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 396:Core/Src/main.c ****   * @retval None
 397:Core/Src/main.c ****   */
 398:Core/Src/main.c **** void Error_Handler(void)
 399:Core/Src/main.c **** {
 1124              		.loc 1 399 1 is_stmt 1 view -0
 1125              		.cfi_startproc
 1126              		@ Volatile: function does not return.
 1127              		@ args = 0, pretend = 0, frame = 0
 1128              		@ frame_needed = 0, uses_anonymous_args = 0
 1129              		@ link register save eliminated.
 400:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 401:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 402:Core/Src/main.c ****   __disable_irq();
 1130              		.loc 1 402 3 view .LVU270
 1131              	.LBB7:
 1132              	.LBI7:
 1133              		.file 5 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 36


  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 37


  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 38


 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1134              		.loc 5 140 27 view .LVU271
 1135              	.LBB8:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1136              		.loc 5 142 3 view .LVU272
 1137              		.syntax unified
 1138              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1139 0000 72B6     		cpsid i
 1140              	@ 0 "" 2
 1141              		.thumb
 1142              		.syntax unified
 1143              	.L72:
 1144              	.LBE8:
 1145              	.LBE7:
 403:Core/Src/main.c ****   while (1)
 1146              		.loc 1 403 3 discriminator 1 view .LVU273
 404:Core/Src/main.c ****   {
 405:Core/Src/main.c ****   }
 1147              		.loc 1 405 3 discriminator 1 view .LVU274
 403:Core/Src/main.c ****   while (1)
 1148              		.loc 1 403 9 discriminator 1 view .LVU275
 1149 0002 FEE7     		b	.L72
 1150              		.cfi_endproc
 1151              	.LFE96:
 1153              		.section	.text.rtc_set_date_text,"ax",%progbits
 1154              		.align	1
 1155              		.global	rtc_set_date_text
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1159              		.fpu softvfp
 1161              	rtc_set_date_text:
 1162              	.LVL54:
 1163              	.LFB70:
  95:Core/Src/USER/rtc.c **** {
 1164              		.loc 2 95 1 view -0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 8
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
  95:Core/Src/USER/rtc.c **** {
 1168              		.loc 2 95 1 is_stmt 0 view .LVU277
 1169 0000 10B5     		push	{r4, lr}
 1170              	.LCFI19:
 1171              		.cfi_def_cfa_offset 8
 1172              		.cfi_offset 4, -8
 1173              		.cfi_offset 14, -4
 1174 0002 82B0     		sub	sp, sp, #8
 1175              	.LCFI20:
 1176              		.cfi_def_cfa_offset 16
 1177 0004 0446     		mov	r4, r0
  96:Core/Src/USER/rtc.c **** filter_string(Buf);
 1178              		.loc 2 96 1 is_stmt 1 view .LVU278
 1179 0006 FFF7FEFF 		bl	filter_string
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 39


 1180              	.LVL55:
  99:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 1181              		.loc 2 99 1 view .LVU279
 101:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1182              		.loc 2 101 1 view .LVU280
 101:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1183              		.loc 2 101 4 is_stmt 0 view .LVU281
 1184 000a 2046     		mov	r0, r4
 1185 000c FFF7FEFF 		bl	strlen
 1186              	.LVL56:
 101:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1187              		.loc 2 101 3 view .LVU282
 1188 0010 0728     		cmp	r0, #7
 1189 0012 01D8     		bhi	.L78
 1190              	.L73:
 119:Core/Src/USER/rtc.c **** }
 1191              		.loc 2 119 1 view .LVU283
 1192 0014 02B0     		add	sp, sp, #8
 1193              	.LCFI21:
 1194              		.cfi_remember_state
 1195              		.cfi_def_cfa_offset 8
 1196              		@ sp needed
 1197 0016 10BD     		pop	{r4, pc}
 1198              	.LVL57:
 1199              	.L78:
 1200              	.LCFI22:
 1201              		.cfi_restore_state
 102:Core/Src/USER/rtc.c **** 	char delim[] = ".";
 1202              		.loc 2 102 2 is_stmt 1 view .LVU284
 102:Core/Src/USER/rtc.c **** 	char delim[] = ".";
 1203              		.loc 2 102 7 is_stmt 0 view .LVU285
 1204 0018 2E23     		movs	r3, #46
 1205 001a ADF80030 		strh	r3, [sp]	@ movhi
 104:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 1206              		.loc 2 104 2 is_stmt 1 view .LVU286
 104:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 1207              		.loc 2 104 14 is_stmt 0 view .LVU287
 1208 001e 6946     		mov	r1, sp
 1209 0020 2046     		mov	r0, r4
 1210 0022 FFF7FEFF 		bl	strtok
 1211              	.LVL58:
 105:Core/Src/USER/rtc.c **** 	dienos.Year=atoi(ptr);
 1212              		.loc 2 105 2 is_stmt 1 view .LVU288
 105:Core/Src/USER/rtc.c **** 	dienos.Year=atoi(ptr);
 1213              		.loc 2 105 14 is_stmt 0 view .LVU289
 1214 0026 FFF7FEFF 		bl	atoi
 1215              	.LVL59:
 105:Core/Src/USER/rtc.c **** 	dienos.Year=atoi(ptr);
 1216              		.loc 2 105 13 view .LVU290
 1217 002a 8DF80700 		strb	r0, [sp, #7]
 107:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1218              		.loc 2 107 2 is_stmt 1 view .LVU291
 107:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1219              		.loc 2 107 8 is_stmt 0 view .LVU292
 1220 002e 6946     		mov	r1, sp
 1221 0030 0020     		movs	r0, #0
 1222 0032 FFF7FEFF 		bl	strtok
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 40


 1223              	.LVL60:
 108:Core/Src/USER/rtc.c **** 	dienos.Month=atoi(ptr);
 1224              		.loc 2 108 2 is_stmt 1 view .LVU293
 108:Core/Src/USER/rtc.c **** 	dienos.Month=atoi(ptr);
 1225              		.loc 2 108 15 is_stmt 0 view .LVU294
 1226 0036 FFF7FEFF 		bl	atoi
 1227              	.LVL61:
 108:Core/Src/USER/rtc.c **** 	dienos.Month=atoi(ptr);
 1228              		.loc 2 108 14 view .LVU295
 1229 003a 8DF80500 		strb	r0, [sp, #5]
 110:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1230              		.loc 2 110 2 is_stmt 1 view .LVU296
 110:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1231              		.loc 2 110 8 is_stmt 0 view .LVU297
 1232 003e 6946     		mov	r1, sp
 1233 0040 0020     		movs	r0, #0
 1234 0042 FFF7FEFF 		bl	strtok
 1235              	.LVL62:
 111:Core/Src/USER/rtc.c **** 	dienos.Date=atoi(ptr);
 1236              		.loc 2 111 2 is_stmt 1 view .LVU298
 111:Core/Src/USER/rtc.c **** 	dienos.Date=atoi(ptr);
 1237              		.loc 2 111 14 is_stmt 0 view .LVU299
 1238 0046 FFF7FEFF 		bl	atoi
 1239              	.LVL63:
 111:Core/Src/USER/rtc.c **** 	dienos.Date=atoi(ptr);
 1240              		.loc 2 111 13 view .LVU300
 1241 004a 8DF80600 		strb	r0, [sp, #6]
 113:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1242              		.loc 2 113 2 is_stmt 1 view .LVU301
 113:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1243              		.loc 2 113 6 is_stmt 0 view .LVU302
 1244 004e 0022     		movs	r2, #0
 1245 0050 01A9     		add	r1, sp, #4
 1246 0052 0448     		ldr	r0, .L80
 1247 0054 FFF7FEFF 		bl	HAL_RTC_SetDate
 1248              	.LVL64:
 113:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1249              		.loc 2 113 5 view .LVU303
 1250 0058 10B9     		cbnz	r0, .L79
 118:Core/Src/USER/rtc.c ****   rtc_backup_date();
 1251              		.loc 2 118 3 is_stmt 1 view .LVU304
 1252 005a FFF7FEFF 		bl	rtc_backup_date
 1253              	.LVL65:
 1254 005e D9E7     		b	.L73
 1255              	.L79:
 115:Core/Src/USER/rtc.c ****     Error_Handler();
 1256              		.loc 2 115 5 view .LVU305
 1257 0060 FFF7FEFF 		bl	Error_Handler
 1258              	.LVL66:
 1259              	.L81:
 1260              		.align	2
 1261              	.L80:
 1262 0064 00000000 		.word	hrtc
 1263              		.cfi_endproc
 1264              	.LFE70:
 1266              		.section	.text.rtc_set_time_text,"ax",%progbits
 1267              		.align	1
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 41


 1268              		.global	rtc_set_time_text
 1269              		.syntax unified
 1270              		.thumb
 1271              		.thumb_func
 1272              		.fpu softvfp
 1274              	rtc_set_time_text:
 1275              	.LVL67:
 1276              	.LFB71:
 123:Core/Src/USER/rtc.c **** {
 1277              		.loc 2 123 1 view -0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 8
 1280              		@ frame_needed = 0, uses_anonymous_args = 0
 123:Core/Src/USER/rtc.c **** {
 1281              		.loc 2 123 1 is_stmt 0 view .LVU307
 1282 0000 10B5     		push	{r4, lr}
 1283              	.LCFI23:
 1284              		.cfi_def_cfa_offset 8
 1285              		.cfi_offset 4, -8
 1286              		.cfi_offset 14, -4
 1287 0002 82B0     		sub	sp, sp, #8
 1288              	.LCFI24:
 1289              		.cfi_def_cfa_offset 16
 1290 0004 0446     		mov	r4, r0
 128:Core/Src/USER/rtc.c **** filter_string(Buf);
 1291              		.loc 2 128 1 is_stmt 1 view .LVU308
 1292 0006 FFF7FEFF 		bl	filter_string
 1293              	.LVL68:
 130:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1294              		.loc 2 130 1 view .LVU309
 130:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1295              		.loc 2 130 4 is_stmt 0 view .LVU310
 1296 000a 2046     		mov	r0, r4
 1297 000c FFF7FEFF 		bl	strlen
 1298              	.LVL69:
 130:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1299              		.loc 2 130 3 view .LVU311
 1300 0010 0728     		cmp	r0, #7
 1301 0012 01D8     		bhi	.L87
 1302              	.LVL70:
 1303              	.L82:
 148:Core/Src/USER/rtc.c **** }
 1304              		.loc 2 148 1 view .LVU312
 1305 0014 02B0     		add	sp, sp, #8
 1306              	.LCFI25:
 1307              		.cfi_remember_state
 1308              		.cfi_def_cfa_offset 8
 1309              		@ sp needed
 1310 0016 10BD     		pop	{r4, pc}
 1311              	.LVL71:
 1312              	.L87:
 1313              	.LCFI26:
 1314              		.cfi_restore_state
 132:Core/Src/USER/rtc.c **** 	char delim[] = ":";
 1315              		.loc 2 132 2 is_stmt 1 view .LVU313
 132:Core/Src/USER/rtc.c **** 	char delim[] = ":";
 1316              		.loc 2 132 7 is_stmt 0 view .LVU314
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 42


 1317 0018 3A23     		movs	r3, #58
 1318 001a ADF80430 		strh	r3, [sp, #4]	@ movhi
 134:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 1319              		.loc 2 134 2 is_stmt 1 view .LVU315
 134:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 1320              		.loc 2 134 14 is_stmt 0 view .LVU316
 1321 001e 01A9     		add	r1, sp, #4
 1322 0020 2046     		mov	r0, r4
 1323 0022 FFF7FEFF 		bl	strtok
 1324              	.LVL72:
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 1325              		.loc 2 135 2 is_stmt 1 view .LVU317
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 1326              		.loc 2 135 17 is_stmt 0 view .LVU318
 1327 0026 FFF7FEFF 		bl	atoi
 1328              	.LVL73:
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 1329              		.loc 2 135 16 view .LVU319
 1330 002a 0C4C     		ldr	r4, .L88
 1331              	.LVL74:
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 1332              		.loc 2 135 16 view .LVU320
 1333 002c 2070     		strb	r0, [r4]
 137:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1334              		.loc 2 137 2 is_stmt 1 view .LVU321
 137:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1335              		.loc 2 137 8 is_stmt 0 view .LVU322
 1336 002e 01A9     		add	r1, sp, #4
 1337 0030 0020     		movs	r0, #0
 1338 0032 FFF7FEFF 		bl	strtok
 1339              	.LVL75:
 138:Core/Src/USER/rtc.c **** 	currTime.Minutes=atoi(ptr);
 1340              		.loc 2 138 2 is_stmt 1 view .LVU323
 138:Core/Src/USER/rtc.c **** 	currTime.Minutes=atoi(ptr);
 1341              		.loc 2 138 19 is_stmt 0 view .LVU324
 1342 0036 FFF7FEFF 		bl	atoi
 1343              	.LVL76:
 138:Core/Src/USER/rtc.c **** 	currTime.Minutes=atoi(ptr);
 1344              		.loc 2 138 18 view .LVU325
 1345 003a 6070     		strb	r0, [r4, #1]
 140:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1346              		.loc 2 140 2 is_stmt 1 view .LVU326
 140:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1347              		.loc 2 140 8 is_stmt 0 view .LVU327
 1348 003c 01A9     		add	r1, sp, #4
 1349 003e 0020     		movs	r0, #0
 1350 0040 FFF7FEFF 		bl	strtok
 1351              	.LVL77:
 141:Core/Src/USER/rtc.c **** 	currTime.Seconds=atoi(ptr);
 1352              		.loc 2 141 2 is_stmt 1 view .LVU328
 141:Core/Src/USER/rtc.c **** 	currTime.Seconds=atoi(ptr);
 1353              		.loc 2 141 19 is_stmt 0 view .LVU329
 1354 0044 FFF7FEFF 		bl	atoi
 1355              	.LVL78:
 141:Core/Src/USER/rtc.c **** 	currTime.Seconds=atoi(ptr);
 1356              		.loc 2 141 18 view .LVU330
 1357 0048 A070     		strb	r0, [r4, #2]
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 43


 143:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
 1358              		.loc 2 143 2 is_stmt 1 view .LVU331
 143:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
 1359              		.loc 2 143 6 is_stmt 0 view .LVU332
 1360 004a 0022     		movs	r2, #0
 1361 004c 2146     		mov	r1, r4
 1362 004e 0448     		ldr	r0, .L88+4
 1363 0050 FFF7FEFF 		bl	HAL_RTC_SetTime
 1364              	.LVL79:
 143:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
 1365              		.loc 2 143 5 view .LVU333
 1366 0054 0028     		cmp	r0, #0
 1367 0056 DDD0     		beq	.L82
 145:Core/Src/USER/rtc.c ****     Error_Handler();
 1368              		.loc 2 145 5 is_stmt 1 view .LVU334
 1369 0058 FFF7FEFF 		bl	Error_Handler
 1370              	.LVL80:
 1371              	.L89:
 1372              		.align	2
 1373              	.L88:
 1374 005c 00000000 		.word	.LANCHOR1
 1375 0060 00000000 		.word	hrtc
 1376              		.cfi_endproc
 1377              	.LFE71:
 1379              		.section	.rodata.commandcom.str1.4,"aMS",%progbits,1
 1380              		.align	2
 1381              	.LC0:
 1382 0000 39482043 		.ascii	"9H CLOCK\015\012(c)2023 Vabolis.lt\015\012\000"
 1382      4C4F434B 
 1382      0D0A2863 
 1382      29323032 
 1382      33205661 
 1383              		.section	.text.commandcom,"ax",%progbits
 1384              		.align	1
 1385              		.global	commandcom
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu softvfp
 1391              	commandcom:
 1392              	.LVL81:
 1393              	.LFB87:
  53:Core/Src/USER/user.c **** 
 1394              		.loc 4 53 1 view -0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
  53:Core/Src/USER/user.c **** 
 1398              		.loc 4 53 1 is_stmt 0 view .LVU336
 1399 0000 08B5     		push	{r3, lr}
 1400              	.LCFI27:
 1401              		.cfi_def_cfa_offset 8
 1402              		.cfi_offset 3, -8
 1403              		.cfi_offset 14, -4
  55:Core/Src/USER/user.c **** 
 1404              		.loc 4 55 1 is_stmt 1 view .LVU337
  55:Core/Src/USER/user.c **** 
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 44


 1405              		.loc 4 55 8 is_stmt 0 view .LVU338
 1406 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  55:Core/Src/USER/user.c **** 
 1407              		.loc 4 55 4 view .LVU339
 1408 0004 412B     		cmp	r3, #65
 1409 0006 15D1     		bne	.L90
  55:Core/Src/USER/user.c **** 
 1410              		.loc 4 55 24 discriminator 2 view .LVU340
 1411 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  55:Core/Src/USER/user.c **** 
 1412              		.loc 4 55 18 discriminator 2 view .LVU341
 1413 000a 542B     		cmp	r3, #84
 1414 000c 12D1     		bne	.L90
  57:Core/Src/USER/user.c **** 	{
 1415              		.loc 4 57 2 is_stmt 1 view .LVU342
  57:Core/Src/USER/user.c **** 	{
 1416              		.loc 4 57 12 is_stmt 0 view .LVU343
 1417 000e 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 1418 0010 413B     		subs	r3, r3, #65
 1419 0012 132B     		cmp	r3, #19
 1420 0014 0ED8     		bhi	.L90
 1421 0016 DFE803F0 		tbb	[pc, r3]
 1422              	.L93:
 1423 001a 17       		.byte	(.L96-.L93)/2
 1424 001b 0D       		.byte	(.L90-.L93)/2
 1425 001c 0D       		.byte	(.L90-.L93)/2
 1426 001d 0E       		.byte	(.L95-.L93)/2
 1427 001e 0D       		.byte	(.L90-.L93)/2
 1428 001f 0D       		.byte	(.L90-.L93)/2
 1429 0020 0D       		.byte	(.L90-.L93)/2
 1430 0021 0D       		.byte	(.L90-.L93)/2
 1431 0022 12       		.byte	(.L94-.L93)/2
 1432 0023 0D       		.byte	(.L90-.L93)/2
 1433 0024 0D       		.byte	(.L90-.L93)/2
 1434 0025 0D       		.byte	(.L90-.L93)/2
 1435 0026 0D       		.byte	(.L90-.L93)/2
 1436 0027 0D       		.byte	(.L90-.L93)/2
 1437 0028 0D       		.byte	(.L90-.L93)/2
 1438 0029 0D       		.byte	(.L90-.L93)/2
 1439 002a 0D       		.byte	(.L90-.L93)/2
 1440 002b 0D       		.byte	(.L90-.L93)/2
 1441 002c 0D       		.byte	(.L90-.L93)/2
 1442 002d 0A       		.byte	(.L92-.L93)/2
 1443              		.p2align 1
 1444              	.L92:
  60:Core/Src/USER/user.c **** 		break;
 1445              		.loc 4 60 4 is_stmt 1 view .LVU344
 1446 002e 0330     		adds	r0, r0, #3
 1447              	.LVL82:
  60:Core/Src/USER/user.c **** 		break;
 1448              		.loc 4 60 4 is_stmt 0 view .LVU345
 1449 0030 FFF7FEFF 		bl	rtc_set_time_text
 1450              	.LVL83:
  61:Core/Src/USER/user.c **** 		case 'D':
 1451              		.loc 4 61 3 is_stmt 1 view .LVU346
 1452              	.L90:
  72:Core/Src/USER/user.c **** 
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 45


 1453              		.loc 4 72 1 is_stmt 0 view .LVU347
 1454 0034 08BD     		pop	{r3, pc}
 1455              	.LVL84:
 1456              	.L95:
  63:Core/Src/USER/user.c **** 		break; 
 1457              		.loc 4 63 4 is_stmt 1 view .LVU348
 1458 0036 0330     		adds	r0, r0, #3
 1459              	.LVL85:
  63:Core/Src/USER/user.c **** 		break; 
 1460              		.loc 4 63 4 is_stmt 0 view .LVU349
 1461 0038 FFF7FEFF 		bl	rtc_set_date_text
 1462              	.LVL86:
  64:Core/Src/USER/user.c **** 		case 'I':
 1463              		.loc 4 64 3 is_stmt 1 view .LVU350
 1464 003c FAE7     		b	.L90
 1465              	.LVL87:
 1466              	.L94:
  66:Core/Src/USER/user.c **** 		break;
 1467              		.loc 4 66 4 view .LVU351
 1468 003e 2121     		movs	r1, #33
 1469 0040 0448     		ldr	r0, .L98
 1470              	.LVL88:
  66:Core/Src/USER/user.c **** 		break;
 1471              		.loc 4 66 4 is_stmt 0 view .LVU352
 1472 0042 FFF7FEFF 		bl	CDC_Transmit_FS
 1473              	.LVL89:
  67:Core/Src/USER/user.c **** 		case 'A':
 1474              		.loc 4 67 3 is_stmt 1 view .LVU353
 1475 0046 F5E7     		b	.L90
 1476              	.LVL90:
 1477              	.L96:
  69:Core/Src/USER/user.c **** 		break;
 1478              		.loc 4 69 4 view .LVU354
 1479 0048 034B     		ldr	r3, .L98+4
 1480 004a 1B68     		ldr	r3, [r3]
 1481 004c 43F2C962 		movw	r2, #14025
 1482 0050 5A63     		str	r2, [r3, #52]
  70:Core/Src/USER/user.c **** 	}
 1483              		.loc 4 70 3 view .LVU355
 1484 0052 EFE7     		b	.L90
 1485              	.L99:
 1486              		.align	2
 1487              	.L98:
 1488 0054 00000000 		.word	.LC0
 1489 0058 00000000 		.word	htim1
 1490              		.cfi_endproc
 1491              	.LFE87:
 1493              		.section	.text.user_loop,"ax",%progbits
 1494              		.align	1
 1495              		.global	user_loop
 1496              		.syntax unified
 1497              		.thumb
 1498              		.thumb_func
 1499              		.fpu softvfp
 1501              	user_loop:
 1502              	.LFB88:
  76:Core/Src/USER/user.c **** char a;
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 46


 1503              		.loc 4 76 1 view -0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 32
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507 0000 10B5     		push	{r4, lr}
 1508              	.LCFI28:
 1509              		.cfi_def_cfa_offset 8
 1510              		.cfi_offset 4, -8
 1511              		.cfi_offset 14, -4
 1512 0002 88B0     		sub	sp, sp, #32
 1513              	.LCFI29:
 1514              		.cfi_def_cfa_offset 40
  77:Core/Src/USER/user.c **** char txt[32];
 1515              		.loc 4 77 1 view .LVU357
  78:Core/Src/USER/user.c **** unsigned char txtp=0;
 1516              		.loc 4 78 1 view .LVU358
  79:Core/Src/USER/user.c **** 
 1517              		.loc 4 79 1 view .LVU359
 1518              	.LVL91:
  79:Core/Src/USER/user.c **** 
 1519              		.loc 4 79 15 is_stmt 0 view .LVU360
 1520 0004 0024     		movs	r4, #0
 1521              	.LVL92:
 1522              	.L106:
  81:Core/Src/USER/user.c **** 	{
 1523              		.loc 4 81 1 is_stmt 1 view .LVU361
  83:Core/Src/USER/user.c **** 	while(circle_available(&cc)>0) 
 1524              		.loc 4 83 2 view .LVU362
 1525 0006 1548     		ldr	r0, .L110
 1526 0008 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1527              	.LVL93:
  84:Core/Src/USER/user.c **** 		{
 1528              		.loc 4 84 2 view .LVU363
 1529              	.L101:
  84:Core/Src/USER/user.c **** 		{
 1530              		.loc 4 84 7 view .LVU364
  84:Core/Src/USER/user.c **** 		{
 1531              		.loc 4 84 8 is_stmt 0 view .LVU365
 1532 000c 1448     		ldr	r0, .L110+4
 1533 000e FFF7FEFF 		bl	circle_available
 1534              	.LVL94:
  84:Core/Src/USER/user.c **** 		{
 1535              		.loc 4 84 7 view .LVU366
 1536 0012 0028     		cmp	r0, #0
 1537 0014 F7D0     		beq	.L106
  86:Core/Src/USER/user.c **** 			
 1538              		.loc 4 86 4 is_stmt 1 view .LVU367
  86:Core/Src/USER/user.c **** 			
 1539              		.loc 4 86 6 is_stmt 0 view .LVU368
 1540 0016 1248     		ldr	r0, .L110+4
 1541 0018 FFF7FEFF 		bl	circle_pull
 1542              	.LVL95:
  88:Core/Src/USER/user.c **** 			{
 1543              		.loc 4 88 4 is_stmt 1 view .LVU369
  88:Core/Src/USER/user.c **** 			{
 1544              		.loc 4 88 15 is_stmt 0 view .LVU370
 1545 001c A0F12003 		sub	r3, r0, #32
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 47


 1546 0020 DBB2     		uxtb	r3, r3
  88:Core/Src/USER/user.c **** 			{
 1547              		.loc 4 88 7 view .LVU371
 1548 0022 5A2B     		cmp	r3, #90
 1549 0024 0ED8     		bhi	.L102
  90:Core/Src/USER/user.c **** 				txtp++;
 1550              		.loc 4 90 5 is_stmt 1 view .LVU372
  90:Core/Src/USER/user.c **** 				txtp++;
 1551              		.loc 4 90 14 is_stmt 0 view .LVU373
 1552 0026 08AB     		add	r3, sp, #32
 1553 0028 2344     		add	r3, r3, r4
 1554 002a 03F8200C 		strb	r0, [r3, #-32]
  91:Core/Src/USER/user.c **** 				txt[txtp]=0;
 1555              		.loc 4 91 5 is_stmt 1 view .LVU374
  91:Core/Src/USER/user.c **** 				txt[txtp]=0;
 1556              		.loc 4 91 9 is_stmt 0 view .LVU375
 1557 002e 0134     		adds	r4, r4, #1
 1558              	.LVL96:
  91:Core/Src/USER/user.c **** 				txt[txtp]=0;
 1559              		.loc 4 91 9 view .LVU376
 1560 0030 E4B2     		uxtb	r4, r4
 1561              	.LVL97:
  92:Core/Src/USER/user.c **** 				if (txtp >30) {txtp=0;}
 1562              		.loc 4 92 5 is_stmt 1 view .LVU377
  92:Core/Src/USER/user.c **** 				if (txtp >30) {txtp=0;}
 1563              		.loc 4 92 14 is_stmt 0 view .LVU378
 1564 0032 08AB     		add	r3, sp, #32
 1565 0034 2344     		add	r3, r3, r4
 1566 0036 0022     		movs	r2, #0
 1567 0038 03F8202C 		strb	r2, [r3, #-32]
  93:Core/Src/USER/user.c **** 			}
 1568              		.loc 4 93 5 is_stmt 1 view .LVU379
  93:Core/Src/USER/user.c **** 			}
 1569              		.loc 4 93 8 is_stmt 0 view .LVU380
 1570 003c 1E2C     		cmp	r4, #30
 1571 003e E5D9     		bls	.L101
  93:Core/Src/USER/user.c **** 			}
 1572              		.loc 4 93 24 view .LVU381
 1573 0040 0024     		movs	r4, #0
 1574              	.LVL98:
  93:Core/Src/USER/user.c **** 			}
 1575              		.loc 4 93 24 view .LVU382
 1576 0042 E3E7     		b	.L101
 1577              	.LVL99:
 1578              	.L102:
  95:Core/Src/USER/user.c **** 			{
 1579              		.loc 4 95 9 is_stmt 1 view .LVU383
  95:Core/Src/USER/user.c **** 			{
 1580              		.loc 4 95 12 is_stmt 0 view .LVU384
 1581 0044 1F28     		cmp	r0, #31
 1582 0046 E1D8     		bhi	.L101
  97:Core/Src/USER/user.c **** 				txt[0]=0;
 1583              		.loc 4 97 5 is_stmt 1 view .LVU385
  97:Core/Src/USER/user.c **** 				txt[0]=0;
 1584              		.loc 4 97 8 is_stmt 0 view .LVU386
 1585 0048 022C     		cmp	r4, #2
 1586 004a 03D8     		bhi	.L109
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 48


 1587              	.LVL100:
 1588              	.L104:
  98:Core/Src/USER/user.c **** 				txtp=0;
 1589              		.loc 4 98 5 is_stmt 1 view .LVU387
  98:Core/Src/USER/user.c **** 				txtp=0;
 1590              		.loc 4 98 11 is_stmt 0 view .LVU388
 1591 004c 0024     		movs	r4, #0
 1592              	.LVL101:
  98:Core/Src/USER/user.c **** 				txtp=0;
 1593              		.loc 4 98 11 view .LVU389
 1594 004e 8DF80040 		strb	r4, [sp]
  99:Core/Src/USER/user.c **** 			}
 1595              		.loc 4 99 5 is_stmt 1 view .LVU390
 1596              	.LVL102:
  99:Core/Src/USER/user.c **** 			}
 1597              		.loc 4 99 5 is_stmt 0 view .LVU391
 1598 0052 DBE7     		b	.L101
 1599              	.LVL103:
 1600              	.L109:
  97:Core/Src/USER/user.c **** 				txt[0]=0;
 1601              		.loc 4 97 16 is_stmt 1 discriminator 1 view .LVU392
 1602 0054 6846     		mov	r0, sp
 1603              	.LVL104:
  97:Core/Src/USER/user.c **** 				txt[0]=0;
 1604              		.loc 4 97 16 is_stmt 0 discriminator 1 view .LVU393
 1605 0056 FFF7FEFF 		bl	commandcom
 1606              	.LVL105:
 1607 005a F7E7     		b	.L104
 1608              	.L111:
 1609              		.align	2
 1610              	.L110:
 1611 005c 00000000 		.word	hiwdg
 1612 0060 00000000 		.word	cc
 1613              		.cfi_endproc
 1614              	.LFE88:
 1616              		.section	.text.rtc_check_screwd_calendar,"ax",%progbits
 1617              		.align	1
 1618              		.global	rtc_check_screwd_calendar
 1619              		.syntax unified
 1620              		.thumb
 1621              		.thumb_func
 1622              		.fpu softvfp
 1624              	rtc_check_screwd_calendar:
 1625              	.LFB76:
 201:Core/Src/USER/rtc.c **** {
 1626              		.loc 2 201 1 is_stmt 1 view -0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 8
 1629              		@ frame_needed = 0, uses_anonymous_args = 0
 1630 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1631              	.LCFI30:
 1632              		.cfi_def_cfa_offset 24
 1633              		.cfi_offset 4, -24
 1634              		.cfi_offset 5, -20
 1635              		.cfi_offset 6, -16
 1636              		.cfi_offset 7, -12
 1637              		.cfi_offset 8, -8
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 49


 1638              		.cfi_offset 14, -4
 1639 0004 82B0     		sub	sp, sp, #8
 1640              	.LCFI31:
 1641              		.cfi_def_cfa_offset 32
 202:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 1642              		.loc 2 202 1 view .LVU395
 203:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 1643              		.loc 2 203 2 view .LVU396
 203:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 1644              		.loc 2 203 5 is_stmt 0 view .LVU397
 1645 0006 0121     		movs	r1, #1
 1646 0008 2A48     		ldr	r0, .L118
 1647 000a FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 1648              	.LVL106:
 203:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 1649              		.loc 2 203 4 view .LVU398
 1650 000e 45F25103 		movw	r3, #20561
 1651 0012 9842     		cmp	r0, r3
 1652 0014 02D0     		beq	.L116
 1653              	.L112:
 225:Core/Src/USER/rtc.c **** }
 1654              		.loc 2 225 1 view .LVU399
 1655 0016 02B0     		add	sp, sp, #8
 1656              	.LCFI32:
 1657              		.cfi_remember_state
 1658              		.cfi_def_cfa_offset 24
 1659              		@ sp needed
 1660 0018 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1661              	.L116:
 1662              	.LCFI33:
 1663              		.cfi_restore_state
 1664              	.LBB9:
 205:Core/Src/USER/rtc.c **** 		HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 1665              		.loc 2 205 3 is_stmt 1 view .LVU400
 1666 001c DFF89480 		ldr	r8, .L118
 1667 0020 0022     		movs	r2, #0
 1668 0022 01A9     		add	r1, sp, #4
 1669 0024 4046     		mov	r0, r8
 1670 0026 FFF7FEFF 		bl	HAL_RTC_GetDate
 1671              	.LVL107:
 206:Core/Src/USER/rtc.c **** 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 1672              		.loc 2 206 3 view .LVU401
 1673 002a 234C     		ldr	r4, .L118+4
 1674 002c 0022     		movs	r2, #0
 1675 002e 2146     		mov	r1, r4
 1676 0030 4046     		mov	r0, r8
 1677 0032 FFF7FEFF 		bl	HAL_RTC_GetTime
 1678              	.LVL108:
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1679              		.loc 2 207 3 view .LVU402
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1680              		.loc 2 207 27 is_stmt 0 view .LVU403
 1681 0036 2678     		ldrb	r6, [r4]	@ zero_extendqisi2
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1682              		.loc 2 207 40 view .LVU404
 1683 0038 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 50


 1684              		.loc 2 207 45 view .LVU405
 1685 003c 03EB4303 		add	r3, r3, r3, lsl #1
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1686              		.loc 2 207 33 view .LVU406
 1687 0040 06EBC303 		add	r3, r6, r3, lsl #3
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1688              		.loc 2 207 55 view .LVU407
 1689 0044 9DF80560 		ldrb	r6, [sp, #5]	@ zero_extendqisi2
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1690              		.loc 2 207 64 view .LVU408
 1691 0048 4FF43A77 		mov	r7, #744
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1692              		.loc 2 207 48 view .LVU409
 1693 004c 07FB0633 		mla	r3, r7, r6, r3
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1694              		.loc 2 207 74 view .LVU410
 1695 0050 9DF80760 		ldrb	r6, [sp, #7]	@ zero_extendqisi2
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1696              		.loc 2 207 83 view .LVU411
 1697 0054 42F25024 		movw	r4, #8784
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1698              		.loc 2 207 67 view .LVU412
 1699 0058 04FB0636 		mla	r6, r4, r6, r3
 1700              	.LVL109:
 209:Core/Src/USER/rtc.c **** 		uint32_t tmp=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR2);
 1701              		.loc 2 209 3 is_stmt 1 view .LVU413
 209:Core/Src/USER/rtc.c **** 		uint32_t tmp=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR2);
 1702              		.loc 2 209 16 is_stmt 0 view .LVU414
 1703 005c 0221     		movs	r1, #2
 1704 005e 4046     		mov	r0, r8
 1705 0060 FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 1706              	.LVL110:
 1707 0064 0546     		mov	r5, r0
 1708              	.LVL111:
 210:Core/Src/USER/rtc.c **** 		uint32_t tmp2=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR3);	
 1709              		.loc 2 210 3 is_stmt 1 view .LVU415
 210:Core/Src/USER/rtc.c **** 		uint32_t tmp2=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR3);	
 1710              		.loc 2 210 17 is_stmt 0 view .LVU416
 1711 0066 0321     		movs	r1, #3
 1712 0068 4046     		mov	r0, r8
 1713              	.LVL112:
 210:Core/Src/USER/rtc.c **** 		uint32_t tmp2=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR3);	
 1714              		.loc 2 210 17 view .LVU417
 1715 006a FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 1716              	.LVL113:
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1717              		.loc 2 212 3 is_stmt 1 view .LVU418
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1718              		.loc 2 212 24 is_stmt 0 view .LVU419
 1719 006e 290A     		lsrs	r1, r5, #8
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1720              		.loc 2 212 41 view .LVU420
 1721 0070 05F00F03 		and	r3, r5, #15
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1722              		.loc 2 212 53 view .LVU421
 1723 0074 07FB03F7 		mul	r7, r7, r3
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 51


 1724              		.loc 2 212 35 view .LVU422
 1725 0078 04FB0174 		mla	r4, r4, r1, r7
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1726              		.loc 2 212 62 view .LVU423
 1727 007c 020A     		lsrs	r2, r0, #8
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1728              		.loc 2 212 66 view .LVU424
 1729 007e 02EB4203 		add	r3, r2, r2, lsl #1
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1730              		.loc 2 212 56 view .LVU425
 1731 0082 04EBC304 		add	r4, r4, r3, lsl #3
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1732              		.loc 2 212 76 view .LVU426
 1733 0086 C3B2     		uxtb	r3, r0
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1734              		.loc 2 212 12 view .LVU427
 1735 0088 1C44     		add	r4, r4, r3
 1736              	.LVL114:
 213:Core/Src/USER/rtc.c **** 		if(now_was > now_is)
 1737              		.loc 2 213 3 is_stmt 1 view .LVU428
 213:Core/Src/USER/rtc.c **** 		if(now_was > now_is)
 1738              		.loc 2 213 5 is_stmt 0 view .LVU429
 1739 008a A642     		cmp	r6, r4
 1740 008c C3D2     		bcs	.L112
 215:Core/Src/USER/rtc.c **** 			dienos.Year=(tmp >> 8);
 1741              		.loc 2 215 4 is_stmt 1 view .LVU430
 215:Core/Src/USER/rtc.c **** 			dienos.Year=(tmp >> 8);
 1742              		.loc 2 215 15 is_stmt 0 view .LVU431
 1743 008e 8DF80710 		strb	r1, [sp, #7]
 216:Core/Src/USER/rtc.c **** 			dienos.Month=tmp & 0x0F;
 1744              		.loc 2 216 4 is_stmt 1 view .LVU432
 216:Core/Src/USER/rtc.c **** 			dienos.Month=tmp & 0x0F;
 1745              		.loc 2 216 21 is_stmt 0 view .LVU433
 1746 0092 05F00F05 		and	r5, r5, #15
 1747              	.LVL115:
 216:Core/Src/USER/rtc.c **** 			dienos.Month=tmp & 0x0F;
 1748              		.loc 2 216 16 view .LVU434
 1749 0096 8DF80550 		strb	r5, [sp, #5]
 217:Core/Src/USER/rtc.c **** 			dienos.Date=(tmp2 >> 8);
 1750              		.loc 2 217 4 is_stmt 1 view .LVU435
 217:Core/Src/USER/rtc.c **** 			dienos.Date=(tmp2 >> 8);
 1751              		.loc 2 217 15 is_stmt 0 view .LVU436
 1752 009a 8DF80620 		strb	r2, [sp, #6]
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1753              		.loc 2 218 5 is_stmt 1 view .LVU437
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1754              		.loc 2 218 9 is_stmt 0 view .LVU438
 1755 009e 0022     		movs	r2, #0
 1756 00a0 01A9     		add	r1, sp, #4
 1757 00a2 4046     		mov	r0, r8
 1758              	.LVL116:
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1759              		.loc 2 218 9 view .LVU439
 1760 00a4 FFF7FEFF 		bl	HAL_RTC_SetDate
 1761              	.LVL117:
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1762              		.loc 2 218 8 view .LVU440
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 52


 1763 00a8 10B9     		cbnz	r0, .L117
 222:Core/Src/USER/rtc.c **** 			 rtc_backup_date();
 1764              		.loc 2 222 5 is_stmt 1 view .LVU441
 1765 00aa FFF7FEFF 		bl	rtc_backup_date
 1766              	.LVL118:
 1767              	.LBE9:
 225:Core/Src/USER/rtc.c **** }
 1768              		.loc 2 225 1 is_stmt 0 view .LVU442
 1769 00ae B2E7     		b	.L112
 1770              	.L117:
 1771              	.LBB10:
 220:Core/Src/USER/rtc.c **** 				Error_Handler();
 1772              		.loc 2 220 5 is_stmt 1 view .LVU443
 1773 00b0 FFF7FEFF 		bl	Error_Handler
 1774              	.LVL119:
 1775              	.L119:
 1776              		.align	2
 1777              	.L118:
 1778 00b4 00000000 		.word	hrtc
 1779 00b8 00000000 		.word	.LANCHOR1
 1780              	.LBE10:
 1781              		.cfi_endproc
 1782              	.LFE76:
 1784              		.section	.text.MX_RTC_Init,"ax",%progbits
 1785              		.align	1
 1786              		.syntax unified
 1787              		.thumb
 1788              		.thumb_func
 1789              		.fpu softvfp
 1791              	MX_RTC_Init:
 1792              	.LFB93:
 201:Core/Src/main.c **** 
 1793              		.loc 1 201 1 view -0
 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 16
 1796              		@ frame_needed = 0, uses_anonymous_args = 0
 1797 0000 10B5     		push	{r4, lr}
 1798              	.LCFI34:
 1799              		.cfi_def_cfa_offset 8
 1800              		.cfi_offset 4, -8
 1801              		.cfi_offset 14, -4
 1802 0002 84B0     		sub	sp, sp, #16
 1803              	.LCFI35:
 1804              		.cfi_def_cfa_offset 24
 207:Core/Src/main.c ****   RTC_DateTypeDef DateToUpdate = {0};
 1805              		.loc 1 207 3 view .LVU445
 207:Core/Src/main.c ****   RTC_DateTypeDef DateToUpdate = {0};
 1806              		.loc 1 207 19 is_stmt 0 view .LVU446
 1807 0004 0023     		movs	r3, #0
 1808 0006 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 1809 000a 8DF80E30 		strb	r3, [sp, #14]
 208:Core/Src/main.c **** 
 1810              		.loc 1 208 3 is_stmt 1 view .LVU447
 208:Core/Src/main.c **** 
 1811              		.loc 1 208 19 is_stmt 0 view .LVU448
 1812 000e 0293     		str	r3, [sp, #8]
 211:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 53


 1813              		.loc 1 211 3 is_stmt 1 view .LVU449
 211:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 1814              		.loc 1 211 17 is_stmt 0 view .LVU450
 1815 0010 2F4B     		ldr	r3, .L130
 1816 0012 304A     		ldr	r2, .L130+4
 1817 0014 1A60     		str	r2, [r3]
 212:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 1818              		.loc 1 212 3 is_stmt 1 view .LVU451
 212:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 1819              		.loc 1 212 26 is_stmt 0 view .LVU452
 1820 0016 4FF0FF32 		mov	r2, #-1
 1821 001a 5A60     		str	r2, [r3, #4]
 213:Core/Src/main.c ****   if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 1822              		.loc 1 213 3 is_stmt 1 view .LVU453
 213:Core/Src/main.c ****   if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 1823              		.loc 1 213 20 is_stmt 0 view .LVU454
 1824 001c 4FF48072 		mov	r2, #256
 1825 0020 9A60     		str	r2, [r3, #8]
 214:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 1826              		.loc 1 214 3 is_stmt 1 view .LVU455
 214:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 1827              		.loc 1 214 11 is_stmt 0 view .LVU456
 1828 0022 2D4B     		ldr	r3, .L130+8
 1829 0024 1B6A     		ldr	r3, [r3, #32]
 214:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 1830              		.loc 1 214 6 view .LVU457
 1831 0026 13F4004F 		tst	r3, #32768
 1832 002a 05D1     		bne	.L121
 219:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 1833              		.loc 1 219 3 is_stmt 1 view .LVU458
 220:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 1834              		.loc 1 220 3 view .LVU459
 221:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 1835              		.loc 1 221 3 view .LVU460
 222:Core/Src/main.c ****   {
 1836              		.loc 1 222 3 view .LVU461
 222:Core/Src/main.c ****   {
 1837              		.loc 1 222 7 is_stmt 0 view .LVU462
 1838 002c 2848     		ldr	r0, .L130
 1839 002e FFF7FEFF 		bl	HAL_RTC_Init
 1840              	.LVL120:
 222:Core/Src/main.c ****   {
 1841              		.loc 1 222 6 view .LVU463
 1842 0032 48B1     		cbz	r0, .L122
 224:Core/Src/main.c ****   }
 1843              		.loc 1 224 5 is_stmt 1 view .LVU464
 1844 0034 FFF7FEFF 		bl	Error_Handler
 1845              	.LVL121:
 1846              	.L121:
 230:Core/Src/main.c **** 	  HAL_NVIC_EnableIRQ(RTC_IRQn);
 1847              		.loc 1 230 4 view .LVU465
 1848 0038 0022     		movs	r2, #0
 1849 003a 0F21     		movs	r1, #15
 1850 003c 0320     		movs	r0, #3
 1851 003e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1852              	.LVL122:
 231:Core/Src/main.c **** 	}
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 54


 1853              		.loc 1 231 4 view .LVU466
 1854 0042 0320     		movs	r0, #3
 1855 0044 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1856              	.LVL123:
 1857              	.L122:
 233:Core/Src/main.c **** 	{
 1858              		.loc 1 233 2 view .LVU467
 233:Core/Src/main.c **** 	{
 1859              		.loc 1 233 5 is_stmt 0 view .LVU468
 1860 0048 0121     		movs	r1, #1
 1861 004a 2148     		ldr	r0, .L130
 1862 004c FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 1863              	.LVL124:
 233:Core/Src/main.c **** 	{
 1864              		.loc 1 233 4 view .LVU469
 1865 0050 45F25103 		movw	r3, #20561
 1866 0054 9842     		cmp	r0, r3
 1867 0056 1BD0     		beq	.L123
 239:Core/Src/main.c ****   sTime.Minutes = 0x0;
 1868              		.loc 1 239 3 is_stmt 1 view .LVU470
 239:Core/Src/main.c ****   sTime.Minutes = 0x0;
 1869              		.loc 1 239 15 is_stmt 0 view .LVU471
 1870 0058 0023     		movs	r3, #0
 1871 005a 8DF80C30 		strb	r3, [sp, #12]
 240:Core/Src/main.c ****   sTime.Seconds = 0x0;
 1872              		.loc 1 240 3 is_stmt 1 view .LVU472
 240:Core/Src/main.c ****   sTime.Seconds = 0x0;
 1873              		.loc 1 240 17 is_stmt 0 view .LVU473
 1874 005e 8DF80D30 		strb	r3, [sp, #13]
 241:Core/Src/main.c **** 
 1875              		.loc 1 241 3 is_stmt 1 view .LVU474
 241:Core/Src/main.c **** 
 1876              		.loc 1 241 17 is_stmt 0 view .LVU475
 1877 0062 8DF80E30 		strb	r3, [sp, #14]
 243:Core/Src/main.c ****   {
 1878              		.loc 1 243 3 is_stmt 1 view .LVU476
 243:Core/Src/main.c ****   {
 1879              		.loc 1 243 7 is_stmt 0 view .LVU477
 1880 0066 0122     		movs	r2, #1
 1881 0068 03A9     		add	r1, sp, #12
 1882 006a 1948     		ldr	r0, .L130
 1883 006c FFF7FEFF 		bl	HAL_RTC_SetTime
 1884              	.LVL125:
 243:Core/Src/main.c ****   {
 1885              		.loc 1 243 6 view .LVU478
 1886 0070 30BB     		cbnz	r0, .L127
 247:Core/Src/main.c ****   DateToUpdate.Month = RTC_MONTH_JANUARY;
 1887              		.loc 1 247 3 is_stmt 1 view .LVU479
 247:Core/Src/main.c ****   DateToUpdate.Month = RTC_MONTH_JANUARY;
 1888              		.loc 1 247 24 is_stmt 0 view .LVU480
 1889 0072 0122     		movs	r2, #1
 1890 0074 8DF80820 		strb	r2, [sp, #8]
 248:Core/Src/main.c ****   DateToUpdate.Date = 0x1;
 1891              		.loc 1 248 3 is_stmt 1 view .LVU481
 248:Core/Src/main.c ****   DateToUpdate.Date = 0x1;
 1892              		.loc 1 248 22 is_stmt 0 view .LVU482
 1893 0078 8DF80920 		strb	r2, [sp, #9]
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 55


 249:Core/Src/main.c ****   DateToUpdate.Year = 0x0;
 1894              		.loc 1 249 3 is_stmt 1 view .LVU483
 249:Core/Src/main.c ****   DateToUpdate.Year = 0x0;
 1895              		.loc 1 249 21 is_stmt 0 view .LVU484
 1896 007c 8DF80A20 		strb	r2, [sp, #10]
 250:Core/Src/main.c **** 
 1897              		.loc 1 250 3 is_stmt 1 view .LVU485
 250:Core/Src/main.c **** 
 1898              		.loc 1 250 21 is_stmt 0 view .LVU486
 1899 0080 0023     		movs	r3, #0
 1900 0082 8DF80B30 		strb	r3, [sp, #11]
 252:Core/Src/main.c ****   {
 1901              		.loc 1 252 3 is_stmt 1 view .LVU487
 252:Core/Src/main.c ****   {
 1902              		.loc 1 252 7 is_stmt 0 view .LVU488
 1903 0086 02A9     		add	r1, sp, #8
 1904 0088 1148     		ldr	r0, .L130
 1905 008a FFF7FEFF 		bl	HAL_RTC_SetDate
 1906              	.LVL126:
 252:Core/Src/main.c ****   {
 1907              		.loc 1 252 6 view .LVU489
 1908 008e C8B9     		cbnz	r0, .L128
 1909              	.L123:
 264:Core/Src/main.c **** /* read time seconds for epoch */
 1910              		.loc 1 264 2 is_stmt 1 view .LVU490
 1911 0090 0F4C     		ldr	r4, .L130
 1912 0092 0022     		movs	r2, #0
 1913 0094 1149     		ldr	r1, .L130+12
 1914 0096 2046     		mov	r0, r4
 1915 0098 FFF7FEFF 		bl	HAL_RTC_GetTime
 1916              	.LVL127:
 271:Core/Src/main.c **** 	HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 1917              		.loc 1 271 2 view .LVU491
 271:Core/Src/main.c **** 	HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 1918              		.loc 1 271 18 is_stmt 0 view .LVU492
 1919 009c 0022     		movs	r2, #0
 1920 009e 0192     		str	r2, [sp, #4]
 272:Core/Src/main.c **** 	if(dienos.Year < 20) {rtc_check_screwd_calendar();}
 1921              		.loc 1 272 2 is_stmt 1 view .LVU493
 1922 00a0 01A9     		add	r1, sp, #4
 1923 00a2 2046     		mov	r0, r4
 1924 00a4 FFF7FEFF 		bl	HAL_RTC_GetDate
 1925              	.LVL128:
 273:Core/Src/main.c **** 	
 1926              		.loc 1 273 2 view .LVU494
 273:Core/Src/main.c **** 	
 1927              		.loc 1 273 11 is_stmt 0 view .LVU495
 1928 00a8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 273:Core/Src/main.c **** 	
 1929              		.loc 1 273 4 view .LVU496
 1930 00ac 132B     		cmp	r3, #19
 1931 00ae 0BD9     		bls	.L129
 1932              	.L125:
 278:Core/Src/main.c **** 
 1933              		.loc 1 278 2 is_stmt 1 view .LVU497
 1934 00b0 45F25102 		movw	r2, #20561
 1935 00b4 0121     		movs	r1, #1
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 56


 1936 00b6 0648     		ldr	r0, .L130
 1937 00b8 FFF7FEFF 		bl	HAL_RTCEx_BKUPWrite
 1938              	.LVL129:
 283:Core/Src/main.c **** 
 1939              		.loc 1 283 1 is_stmt 0 view .LVU498
 1940 00bc 04B0     		add	sp, sp, #16
 1941              	.LCFI36:
 1942              		.cfi_remember_state
 1943              		.cfi_def_cfa_offset 8
 1944              		@ sp needed
 1945 00be 10BD     		pop	{r4, pc}
 1946              	.L127:
 1947              	.LCFI37:
 1948              		.cfi_restore_state
 245:Core/Src/main.c ****   }
 1949              		.loc 1 245 5 is_stmt 1 view .LVU499
 1950 00c0 FFF7FEFF 		bl	Error_Handler
 1951              	.LVL130:
 1952              	.L128:
 254:Core/Src/main.c ****   }
 1953              		.loc 1 254 5 view .LVU500
 1954 00c4 FFF7FEFF 		bl	Error_Handler
 1955              	.LVL131:
 1956              	.L129:
 273:Core/Src/main.c **** 	
 1957              		.loc 1 273 24 discriminator 1 view .LVU501
 1958 00c8 FFF7FEFF 		bl	rtc_check_screwd_calendar
 1959              	.LVL132:
 1960 00cc F0E7     		b	.L125
 1961              	.L131:
 1962 00ce 00BF     		.align	2
 1963              	.L130:
 1964 00d0 00000000 		.word	hrtc
 1965 00d4 00280040 		.word	1073752064
 1966 00d8 00100240 		.word	1073876992
 1967 00dc 00000000 		.word	.LANCHOR1
 1968              		.cfi_endproc
 1969              	.LFE93:
 1971              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1972              		.align	1
 1973              		.syntax unified
 1974              		.thumb
 1975              		.thumb_func
 1976              		.fpu softvfp
 1978              	MX_TIM1_Init:
 1979              	.LFB94:
 291:Core/Src/main.c **** 
 1980              		.loc 1 291 1 view -0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 88
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 1984 0000 10B5     		push	{r4, lr}
 1985              	.LCFI38:
 1986              		.cfi_def_cfa_offset 8
 1987              		.cfi_offset 4, -8
 1988              		.cfi_offset 14, -4
 1989 0002 96B0     		sub	sp, sp, #88
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 57


 1990              	.LCFI39:
 1991              		.cfi_def_cfa_offset 96
 297:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1992              		.loc 1 297 3 view .LVU503
 297:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1993              		.loc 1 297 26 is_stmt 0 view .LVU504
 1994 0004 0024     		movs	r4, #0
 1995 0006 1294     		str	r4, [sp, #72]
 1996 0008 1394     		str	r4, [sp, #76]
 1997 000a 1494     		str	r4, [sp, #80]
 1998 000c 1594     		str	r4, [sp, #84]
 298:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1999              		.loc 1 298 3 is_stmt 1 view .LVU505
 298:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 2000              		.loc 1 298 27 is_stmt 0 view .LVU506
 2001 000e 1094     		str	r4, [sp, #64]
 2002 0010 1194     		str	r4, [sp, #68]
 299:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 2003              		.loc 1 299 3 is_stmt 1 view .LVU507
 299:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 2004              		.loc 1 299 22 is_stmt 0 view .LVU508
 2005 0012 0994     		str	r4, [sp, #36]
 2006 0014 0A94     		str	r4, [sp, #40]
 2007 0016 0B94     		str	r4, [sp, #44]
 2008 0018 0C94     		str	r4, [sp, #48]
 2009 001a 0D94     		str	r4, [sp, #52]
 2010 001c 0E94     		str	r4, [sp, #56]
 2011 001e 0F94     		str	r4, [sp, #60]
 300:Core/Src/main.c **** 
 2012              		.loc 1 300 3 is_stmt 1 view .LVU509
 300:Core/Src/main.c **** 
 2013              		.loc 1 300 34 is_stmt 0 view .LVU510
 2014 0020 2022     		movs	r2, #32
 2015 0022 2146     		mov	r1, r4
 2016 0024 01A8     		add	r0, sp, #4
 2017 0026 FFF7FEFF 		bl	memset
 2018              	.LVL133:
 305:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 2019              		.loc 1 305 3 is_stmt 1 view .LVU511
 305:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 2020              		.loc 1 305 18 is_stmt 0 view .LVU512
 2021 002a 2B48     		ldr	r0, .L146
 2022 002c 2B4B     		ldr	r3, .L146+4
 2023 002e 0360     		str	r3, [r0]
 306:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 2024              		.loc 1 306 3 is_stmt 1 view .LVU513
 306:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 2025              		.loc 1 306 24 is_stmt 0 view .LVU514
 2026 0030 4460     		str	r4, [r0, #4]
 307:Core/Src/main.c ****   htim1.Init.Period = 65535;
 2027              		.loc 1 307 3 is_stmt 1 view .LVU515
 307:Core/Src/main.c ****   htim1.Init.Period = 65535;
 2028              		.loc 1 307 26 is_stmt 0 view .LVU516
 2029 0032 8460     		str	r4, [r0, #8]
 308:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2030              		.loc 1 308 3 is_stmt 1 view .LVU517
 308:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 58


 2031              		.loc 1 308 21 is_stmt 0 view .LVU518
 2032 0034 4FF6FF73 		movw	r3, #65535
 2033 0038 C360     		str	r3, [r0, #12]
 309:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 2034              		.loc 1 309 3 is_stmt 1 view .LVU519
 309:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 2035              		.loc 1 309 28 is_stmt 0 view .LVU520
 2036 003a 0461     		str	r4, [r0, #16]
 310:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2037              		.loc 1 310 3 is_stmt 1 view .LVU521
 310:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2038              		.loc 1 310 32 is_stmt 0 view .LVU522
 2039 003c 4461     		str	r4, [r0, #20]
 311:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 2040              		.loc 1 311 3 is_stmt 1 view .LVU523
 311:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 2041              		.loc 1 311 32 is_stmt 0 view .LVU524
 2042 003e 8023     		movs	r3, #128
 2043 0040 8361     		str	r3, [r0, #24]
 312:Core/Src/main.c ****   {
 2044              		.loc 1 312 3 is_stmt 1 view .LVU525
 312:Core/Src/main.c ****   {
 2045              		.loc 1 312 7 is_stmt 0 view .LVU526
 2046 0042 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2047              	.LVL134:
 312:Core/Src/main.c ****   {
 2048              		.loc 1 312 6 view .LVU527
 2049 0046 0028     		cmp	r0, #0
 2050 0048 39D1     		bne	.L140
 316:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 2051              		.loc 1 316 3 is_stmt 1 view .LVU528
 316:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 2052              		.loc 1 316 34 is_stmt 0 view .LVU529
 2053 004a 4FF48053 		mov	r3, #4096
 2054 004e 1293     		str	r3, [sp, #72]
 317:Core/Src/main.c ****   {
 2055              		.loc 1 317 3 is_stmt 1 view .LVU530
 317:Core/Src/main.c ****   {
 2056              		.loc 1 317 7 is_stmt 0 view .LVU531
 2057 0050 12A9     		add	r1, sp, #72
 2058 0052 2148     		ldr	r0, .L146
 2059 0054 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2060              	.LVL135:
 317:Core/Src/main.c ****   {
 2061              		.loc 1 317 6 view .LVU532
 2062 0058 0028     		cmp	r0, #0
 2063 005a 32D1     		bne	.L141
 321:Core/Src/main.c ****   {
 2064              		.loc 1 321 3 is_stmt 1 view .LVU533
 321:Core/Src/main.c ****   {
 2065              		.loc 1 321 7 is_stmt 0 view .LVU534
 2066 005c 1E48     		ldr	r0, .L146
 2067 005e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 2068              	.LVL136:
 321:Core/Src/main.c ****   {
 2069              		.loc 1 321 6 view .LVU535
 2070 0062 0028     		cmp	r0, #0
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 59


 2071 0064 2FD1     		bne	.L142
 325:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2072              		.loc 1 325 3 is_stmt 1 view .LVU536
 325:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2073              		.loc 1 325 37 is_stmt 0 view .LVU537
 2074 0066 0023     		movs	r3, #0
 2075 0068 1093     		str	r3, [sp, #64]
 326:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2076              		.loc 1 326 3 is_stmt 1 view .LVU538
 326:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2077              		.loc 1 326 33 is_stmt 0 view .LVU539
 2078 006a 1193     		str	r3, [sp, #68]
 327:Core/Src/main.c ****   {
 2079              		.loc 1 327 3 is_stmt 1 view .LVU540
 327:Core/Src/main.c ****   {
 2080              		.loc 1 327 7 is_stmt 0 view .LVU541
 2081 006c 10A9     		add	r1, sp, #64
 2082 006e 1A48     		ldr	r0, .L146
 2083 0070 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2084              	.LVL137:
 327:Core/Src/main.c ****   {
 2085              		.loc 1 327 6 view .LVU542
 2086 0074 48BB     		cbnz	r0, .L143
 331:Core/Src/main.c ****   sConfigOC.Pulse = 15000;
 2087              		.loc 1 331 3 is_stmt 1 view .LVU543
 331:Core/Src/main.c ****   sConfigOC.Pulse = 15000;
 2088              		.loc 1 331 20 is_stmt 0 view .LVU544
 2089 0076 6023     		movs	r3, #96
 2090 0078 0993     		str	r3, [sp, #36]
 332:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2091              		.loc 1 332 3 is_stmt 1 view .LVU545
 332:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2092              		.loc 1 332 19 is_stmt 0 view .LVU546
 2093 007a 43F69823 		movw	r3, #15000
 2094 007e 0A93     		str	r3, [sp, #40]
 333:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 2095              		.loc 1 333 3 is_stmt 1 view .LVU547
 333:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 2096              		.loc 1 333 24 is_stmt 0 view .LVU548
 2097 0080 0022     		movs	r2, #0
 2098 0082 0B92     		str	r2, [sp, #44]
 334:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2099              		.loc 1 334 3 is_stmt 1 view .LVU549
 334:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2100              		.loc 1 334 25 is_stmt 0 view .LVU550
 2101 0084 0C92     		str	r2, [sp, #48]
 335:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 2102              		.loc 1 335 3 is_stmt 1 view .LVU551
 335:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 2103              		.loc 1 335 24 is_stmt 0 view .LVU552
 2104 0086 0D92     		str	r2, [sp, #52]
 336:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 2105              		.loc 1 336 3 is_stmt 1 view .LVU553
 336:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 2106              		.loc 1 336 25 is_stmt 0 view .LVU554
 2107 0088 0E92     		str	r2, [sp, #56]
 337:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 60


 2108              		.loc 1 337 3 is_stmt 1 view .LVU555
 337:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2109              		.loc 1 337 26 is_stmt 0 view .LVU556
 2110 008a 0F92     		str	r2, [sp, #60]
 338:Core/Src/main.c ****   {
 2111              		.loc 1 338 3 is_stmt 1 view .LVU557
 338:Core/Src/main.c ****   {
 2112              		.loc 1 338 7 is_stmt 0 view .LVU558
 2113 008c 09A9     		add	r1, sp, #36
 2114 008e 1248     		ldr	r0, .L146
 2115 0090 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2116              	.LVL138:
 338:Core/Src/main.c ****   {
 2117              		.loc 1 338 6 view .LVU559
 2118 0094 D8B9     		cbnz	r0, .L144
 342:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 2119              		.loc 1 342 3 is_stmt 1 view .LVU560
 342:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 2120              		.loc 1 342 40 is_stmt 0 view .LVU561
 2121 0096 0023     		movs	r3, #0
 2122 0098 0193     		str	r3, [sp, #4]
 343:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 2123              		.loc 1 343 3 is_stmt 1 view .LVU562
 343:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 2124              		.loc 1 343 41 is_stmt 0 view .LVU563
 2125 009a 0293     		str	r3, [sp, #8]
 344:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 2126              		.loc 1 344 3 is_stmt 1 view .LVU564
 344:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 2127              		.loc 1 344 34 is_stmt 0 view .LVU565
 2128 009c 0393     		str	r3, [sp, #12]
 345:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 2129              		.loc 1 345 3 is_stmt 1 view .LVU566
 345:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 2130              		.loc 1 345 33 is_stmt 0 view .LVU567
 2131 009e 0493     		str	r3, [sp, #16]
 346:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 2132              		.loc 1 346 3 is_stmt 1 view .LVU568
 346:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 2133              		.loc 1 346 35 is_stmt 0 view .LVU569
 2134 00a0 0593     		str	r3, [sp, #20]
 347:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 2135              		.loc 1 347 3 is_stmt 1 view .LVU570
 347:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 2136              		.loc 1 347 38 is_stmt 0 view .LVU571
 2137 00a2 4FF40052 		mov	r2, #8192
 2138 00a6 0692     		str	r2, [sp, #24]
 348:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 2139              		.loc 1 348 3 is_stmt 1 view .LVU572
 348:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 2140              		.loc 1 348 40 is_stmt 0 view .LVU573
 2141 00a8 0893     		str	r3, [sp, #32]
 349:Core/Src/main.c ****   {
 2142              		.loc 1 349 3 is_stmt 1 view .LVU574
 349:Core/Src/main.c ****   {
 2143              		.loc 1 349 7 is_stmt 0 view .LVU575
 2144 00aa 01A9     		add	r1, sp, #4
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 61


 2145 00ac 0A48     		ldr	r0, .L146
 2146 00ae FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 2147              	.LVL139:
 349:Core/Src/main.c ****   {
 2148              		.loc 1 349 6 view .LVU576
 2149 00b2 70B9     		cbnz	r0, .L145
 356:Core/Src/main.c **** 
 2150              		.loc 1 356 3 is_stmt 1 view .LVU577
 2151 00b4 0848     		ldr	r0, .L146
 2152 00b6 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2153              	.LVL140:
 358:Core/Src/main.c **** 
 2154              		.loc 1 358 1 is_stmt 0 view .LVU578
 2155 00ba 16B0     		add	sp, sp, #88
 2156              	.LCFI40:
 2157              		.cfi_remember_state
 2158              		.cfi_def_cfa_offset 8
 2159              		@ sp needed
 2160 00bc 10BD     		pop	{r4, pc}
 2161              	.L140:
 2162              	.LCFI41:
 2163              		.cfi_restore_state
 314:Core/Src/main.c ****   }
 2164              		.loc 1 314 5 is_stmt 1 view .LVU579
 2165 00be FFF7FEFF 		bl	Error_Handler
 2166              	.LVL141:
 2167              	.L141:
 319:Core/Src/main.c ****   }
 2168              		.loc 1 319 5 view .LVU580
 2169 00c2 FFF7FEFF 		bl	Error_Handler
 2170              	.LVL142:
 2171              	.L142:
 323:Core/Src/main.c ****   }
 2172              		.loc 1 323 5 view .LVU581
 2173 00c6 FFF7FEFF 		bl	Error_Handler
 2174              	.LVL143:
 2175              	.L143:
 329:Core/Src/main.c ****   }
 2176              		.loc 1 329 5 view .LVU582
 2177 00ca FFF7FEFF 		bl	Error_Handler
 2178              	.LVL144:
 2179              	.L144:
 340:Core/Src/main.c ****   }
 2180              		.loc 1 340 5 view .LVU583
 2181 00ce FFF7FEFF 		bl	Error_Handler
 2182              	.LVL145:
 2183              	.L145:
 351:Core/Src/main.c ****   }
 2184              		.loc 1 351 5 view .LVU584
 2185 00d2 FFF7FEFF 		bl	Error_Handler
 2186              	.LVL146:
 2187              	.L147:
 2188 00d6 00BF     		.align	2
 2189              	.L146:
 2190 00d8 00000000 		.word	htim1
 2191 00dc 002C0140 		.word	1073818624
 2192              		.cfi_endproc
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 62


 2193              	.LFE94:
 2195              		.section	.text.MX_IWDG_Init,"ax",%progbits
 2196              		.align	1
 2197              		.syntax unified
 2198              		.thumb
 2199              		.thumb_func
 2200              		.fpu softvfp
 2202              	MX_IWDG_Init:
 2203              	.LFB92:
 173:Core/Src/main.c **** 
 2204              		.loc 1 173 1 view -0
 2205              		.cfi_startproc
 2206              		@ args = 0, pretend = 0, frame = 0
 2207              		@ frame_needed = 0, uses_anonymous_args = 0
 2208 0000 08B5     		push	{r3, lr}
 2209              	.LCFI42:
 2210              		.cfi_def_cfa_offset 8
 2211              		.cfi_offset 3, -8
 2212              		.cfi_offset 14, -4
 182:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 2213              		.loc 1 182 3 view .LVU586
 182:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 2214              		.loc 1 182 18 is_stmt 0 view .LVU587
 2215 0002 0748     		ldr	r0, .L152
 2216 0004 074B     		ldr	r3, .L152+4
 2217 0006 0360     		str	r3, [r0]
 183:Core/Src/main.c ****   hiwdg.Init.Reload = 4095;
 2218              		.loc 1 183 3 is_stmt 1 view .LVU588
 183:Core/Src/main.c ****   hiwdg.Init.Reload = 4095;
 2219              		.loc 1 183 24 is_stmt 0 view .LVU589
 2220 0008 0023     		movs	r3, #0
 2221 000a 4360     		str	r3, [r0, #4]
 184:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 2222              		.loc 1 184 3 is_stmt 1 view .LVU590
 184:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 2223              		.loc 1 184 21 is_stmt 0 view .LVU591
 2224 000c 40F6FF73 		movw	r3, #4095
 2225 0010 8360     		str	r3, [r0, #8]
 185:Core/Src/main.c ****   {
 2226              		.loc 1 185 3 is_stmt 1 view .LVU592
 185:Core/Src/main.c ****   {
 2227              		.loc 1 185 7 is_stmt 0 view .LVU593
 2228 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 2229              	.LVL147:
 185:Core/Src/main.c ****   {
 2230              		.loc 1 185 6 view .LVU594
 2231 0016 00B9     		cbnz	r0, .L151
 193:Core/Src/main.c **** 
 2232              		.loc 1 193 1 view .LVU595
 2233 0018 08BD     		pop	{r3, pc}
 2234              	.L151:
 187:Core/Src/main.c ****   }
 2235              		.loc 1 187 5 is_stmt 1 view .LVU596
 2236 001a FFF7FEFF 		bl	Error_Handler
 2237              	.LVL148:
 2238              	.L153:
 2239 001e 00BF     		.align	2
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 63


 2240              	.L152:
 2241 0020 00000000 		.word	hiwdg
 2242 0024 00300040 		.word	1073754112
 2243              		.cfi_endproc
 2244              	.LFE92:
 2246              		.section	.text.SystemClock_Config,"ax",%progbits
 2247              		.align	1
 2248              		.global	SystemClock_Config
 2249              		.syntax unified
 2250              		.thumb
 2251              		.thumb_func
 2252              		.fpu softvfp
 2254              	SystemClock_Config:
 2255              	.LFB91:
 122:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2256              		.loc 1 122 1 view -0
 2257              		.cfi_startproc
 2258              		@ args = 0, pretend = 0, frame = 88
 2259              		@ frame_needed = 0, uses_anonymous_args = 0
 2260 0000 00B5     		push	{lr}
 2261              	.LCFI43:
 2262              		.cfi_def_cfa_offset 4
 2263              		.cfi_offset 14, -4
 2264 0002 97B0     		sub	sp, sp, #92
 2265              	.LCFI44:
 2266              		.cfi_def_cfa_offset 96
 123:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2267              		.loc 1 123 3 view .LVU598
 123:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2268              		.loc 1 123 22 is_stmt 0 view .LVU599
 2269 0004 0023     		movs	r3, #0
 2270 0006 1193     		str	r3, [sp, #68]
 124:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2271              		.loc 1 124 3 is_stmt 1 view .LVU600
 124:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2272              		.loc 1 124 22 is_stmt 0 view .LVU601
 2273 0008 0793     		str	r3, [sp, #28]
 2274 000a 0893     		str	r3, [sp, #32]
 2275 000c 0993     		str	r3, [sp, #36]
 2276 000e 0A93     		str	r3, [sp, #40]
 2277 0010 0B93     		str	r3, [sp, #44]
 125:Core/Src/main.c **** 
 2278              		.loc 1 125 3 is_stmt 1 view .LVU602
 125:Core/Src/main.c **** 
 2279              		.loc 1 125 28 is_stmt 0 view .LVU603
 2280 0012 0193     		str	r3, [sp, #4]
 2281 0014 0293     		str	r3, [sp, #8]
 2282 0016 0393     		str	r3, [sp, #12]
 2283 0018 0493     		str	r3, [sp, #16]
 2284 001a 0593     		str	r3, [sp, #20]
 2285 001c 0693     		str	r3, [sp, #24]
 130:Core/Src/main.c ****                               |RCC_OSCILLATORTYPE_LSE;
 2286              		.loc 1 130 3 is_stmt 1 view .LVU604
 130:Core/Src/main.c ****                               |RCC_OSCILLATORTYPE_LSE;
 2287              		.loc 1 130 36 is_stmt 0 view .LVU605
 2288 001e 0D22     		movs	r2, #13
 2289 0020 0C92     		str	r2, [sp, #48]
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 64


 132:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 2290              		.loc 1 132 3 is_stmt 1 view .LVU606
 132:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 2291              		.loc 1 132 30 is_stmt 0 view .LVU607
 2292 0022 4FF48032 		mov	r2, #65536
 2293 0026 0D92     		str	r2, [sp, #52]
 133:Core/Src/main.c ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 2294              		.loc 1 133 3 is_stmt 1 view .LVU608
 133:Core/Src/main.c ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 2295              		.loc 1 133 36 is_stmt 0 view .LVU609
 2296 0028 0E93     		str	r3, [sp, #56]
 134:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2297              		.loc 1 134 3 is_stmt 1 view .LVU610
 134:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2298              		.loc 1 134 30 is_stmt 0 view .LVU611
 2299 002a 0123     		movs	r3, #1
 2300 002c 0F93     		str	r3, [sp, #60]
 135:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 2301              		.loc 1 135 3 is_stmt 1 view .LVU612
 135:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 2302              		.loc 1 135 30 is_stmt 0 view .LVU613
 2303 002e 1093     		str	r3, [sp, #64]
 136:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2304              		.loc 1 136 3 is_stmt 1 view .LVU614
 136:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2305              		.loc 1 136 30 is_stmt 0 view .LVU615
 2306 0030 1293     		str	r3, [sp, #72]
 137:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2307              		.loc 1 137 3 is_stmt 1 view .LVU616
 137:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2308              		.loc 1 137 34 is_stmt 0 view .LVU617
 2309 0032 0223     		movs	r3, #2
 2310 0034 1393     		str	r3, [sp, #76]
 138:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 2311              		.loc 1 138 3 is_stmt 1 view .LVU618
 138:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 2312              		.loc 1 138 35 is_stmt 0 view .LVU619
 2313 0036 1492     		str	r2, [sp, #80]
 139:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2314              		.loc 1 139 3 is_stmt 1 view .LVU620
 139:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2315              		.loc 1 139 32 is_stmt 0 view .LVU621
 2316 0038 4FF48013 		mov	r3, #1048576
 2317 003c 1593     		str	r3, [sp, #84]
 140:Core/Src/main.c ****   {
 2318              		.loc 1 140 3 is_stmt 1 view .LVU622
 140:Core/Src/main.c ****   {
 2319              		.loc 1 140 7 is_stmt 0 view .LVU623
 2320 003e 0CA8     		add	r0, sp, #48
 2321 0040 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2322              	.LVL149:
 140:Core/Src/main.c ****   {
 2323              		.loc 1 140 6 view .LVU624
 2324 0044 E8B9     		cbnz	r0, .L159
 147:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2325              		.loc 1 147 3 is_stmt 1 view .LVU625
 147:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 65


 2326              		.loc 1 147 31 is_stmt 0 view .LVU626
 2327 0046 0F23     		movs	r3, #15
 2328 0048 0793     		str	r3, [sp, #28]
 149:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2329              		.loc 1 149 3 is_stmt 1 view .LVU627
 149:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2330              		.loc 1 149 34 is_stmt 0 view .LVU628
 2331 004a 0223     		movs	r3, #2
 2332 004c 0893     		str	r3, [sp, #32]
 150:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2333              		.loc 1 150 3 is_stmt 1 view .LVU629
 150:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2334              		.loc 1 150 35 is_stmt 0 view .LVU630
 2335 004e 0023     		movs	r3, #0
 2336 0050 0993     		str	r3, [sp, #36]
 151:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2337              		.loc 1 151 3 is_stmt 1 view .LVU631
 151:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2338              		.loc 1 151 36 is_stmt 0 view .LVU632
 2339 0052 4FF48062 		mov	r2, #1024
 2340 0056 0A92     		str	r2, [sp, #40]
 152:Core/Src/main.c **** 
 2341              		.loc 1 152 3 is_stmt 1 view .LVU633
 152:Core/Src/main.c **** 
 2342              		.loc 1 152 36 is_stmt 0 view .LVU634
 2343 0058 0B93     		str	r3, [sp, #44]
 154:Core/Src/main.c ****   {
 2344              		.loc 1 154 3 is_stmt 1 view .LVU635
 154:Core/Src/main.c ****   {
 2345              		.loc 1 154 7 is_stmt 0 view .LVU636
 2346 005a 0121     		movs	r1, #1
 2347 005c 07A8     		add	r0, sp, #28
 2348 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2349              	.LVL150:
 154:Core/Src/main.c ****   {
 2350              		.loc 1 154 6 view .LVU637
 2351 0062 80B9     		cbnz	r0, .L160
 158:Core/Src/main.c ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 2352              		.loc 1 158 3 is_stmt 1 view .LVU638
 158:Core/Src/main.c ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 2353              		.loc 1 158 38 is_stmt 0 view .LVU639
 2354 0064 1123     		movs	r3, #17
 2355 0066 0193     		str	r3, [sp, #4]
 159:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 2356              		.loc 1 159 3 is_stmt 1 view .LVU640
 159:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 2357              		.loc 1 159 35 is_stmt 0 view .LVU641
 2358 0068 4FF48073 		mov	r3, #256
 2359 006c 0293     		str	r3, [sp, #8]
 160:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 2360              		.loc 1 160 3 is_stmt 1 view .LVU642
 160:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 2361              		.loc 1 160 35 is_stmt 0 view .LVU643
 2362 006e 4FF48003 		mov	r3, #4194304
 2363 0072 0693     		str	r3, [sp, #24]
 161:Core/Src/main.c ****   {
 2364              		.loc 1 161 3 is_stmt 1 view .LVU644
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 66


 161:Core/Src/main.c ****   {
 2365              		.loc 1 161 7 is_stmt 0 view .LVU645
 2366 0074 01A8     		add	r0, sp, #4
 2367 0076 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2368              	.LVL151:
 161:Core/Src/main.c ****   {
 2369              		.loc 1 161 6 view .LVU646
 2370 007a 30B9     		cbnz	r0, .L161
 165:Core/Src/main.c **** 
 2371              		.loc 1 165 1 view .LVU647
 2372 007c 17B0     		add	sp, sp, #92
 2373              	.LCFI45:
 2374              		.cfi_remember_state
 2375              		.cfi_def_cfa_offset 4
 2376              		@ sp needed
 2377 007e 5DF804FB 		ldr	pc, [sp], #4
 2378              	.L159:
 2379              	.LCFI46:
 2380              		.cfi_restore_state
 142:Core/Src/main.c ****   }
 2381              		.loc 1 142 5 is_stmt 1 view .LVU648
 2382 0082 FFF7FEFF 		bl	Error_Handler
 2383              	.LVL152:
 2384              	.L160:
 156:Core/Src/main.c ****   }
 2385              		.loc 1 156 5 view .LVU649
 2386 0086 FFF7FEFF 		bl	Error_Handler
 2387              	.LVL153:
 2388              	.L161:
 163:Core/Src/main.c ****   }
 2389              		.loc 1 163 5 view .LVU650
 2390 008a FFF7FEFF 		bl	Error_Handler
 2391              	.LVL154:
 2392              		.cfi_endproc
 2393              	.LFE91:
 2395              		.section	.text.main,"ax",%progbits
 2396              		.align	1
 2397              		.global	main
 2398              		.syntax unified
 2399              		.thumb
 2400              		.thumb_func
 2401              		.fpu softvfp
 2403              	main:
 2404              	.LFB90:
  74:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 2405              		.loc 1 74 1 view -0
 2406              		.cfi_startproc
 2407              		@ Volatile: function does not return.
 2408              		@ args = 0, pretend = 0, frame = 0
 2409              		@ frame_needed = 0, uses_anonymous_args = 0
 2410 0000 08B5     		push	{r3, lr}
 2411              	.LCFI47:
 2412              		.cfi_def_cfa_offset 8
 2413              		.cfi_offset 3, -8
 2414              		.cfi_offset 14, -4
  82:Core/Src/main.c **** 
 2415              		.loc 1 82 3 view .LVU652
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 67


 2416 0002 FFF7FEFF 		bl	HAL_Init
 2417              	.LVL155:
  89:Core/Src/main.c **** 
 2418              		.loc 1 89 3 view .LVU653
 2419 0006 FFF7FEFF 		bl	SystemClock_Config
 2420              	.LVL156:
  96:Core/Src/main.c ****   MX_RTC_Init();
 2421              		.loc 1 96 3 view .LVU654
 2422 000a FFF7FEFF 		bl	MX_GPIO_Init
 2423              	.LVL157:
  97:Core/Src/main.c ****   MX_TIM1_Init();
 2424              		.loc 1 97 3 view .LVU655
 2425 000e FFF7FEFF 		bl	MX_RTC_Init
 2426              	.LVL158:
  98:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 2427              		.loc 1 98 3 view .LVU656
 2428 0012 FFF7FEFF 		bl	MX_TIM1_Init
 2429              	.LVL159:
  99:Core/Src/main.c ****   MX_IWDG_Init();
 2430              		.loc 1 99 3 view .LVU657
 2431 0016 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 2432              	.LVL160:
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2433              		.loc 1 100 3 view .LVU658
 2434 001a FFF7FEFF 		bl	MX_IWDG_Init
 2435              	.LVL161:
 102:Core/Src/main.c ****   /* USER CODE END 2 */
 2436              		.loc 1 102 1 view .LVU659
 2437 001e FFF7FEFF 		bl	user_init
 2438              	.LVL162:
 107:Core/Src/main.c ****   {
 2439              		.loc 1 107 3 view .LVU660
 112:Core/Src/main.c ****   }
 2440              		.loc 1 112 2 view .LVU661
 2441 0022 FFF7FEFF 		bl	user_loop
 2442              	.LVL163:
 2443              		.cfi_endproc
 2444              	.LFE90:
 2446              		.comm	htim1,72,4
 2447              		.comm	hrtc,20,4
 2448              		.comm	hiwdg,12,4
 2449              		.comm	seconds,1,1
 2450              		.comm	cc,20,4
 2451              		.comm	testas,64,4
 2452              		.global	LastHour
 2453              		.global	oldTime
 2454              		.global	currTime
 2455              		.section	.bss.currTime,"aw",%nobits
 2456              		.align	2
 2457              		.set	.LANCHOR1,. + 0
 2460              	currTime:
 2461 0000 000000   		.space	3
 2462              		.section	.data.LastHour,"aw"
 2465              	LastHour:
 2466 0000 FF       		.byte	-1
 2467              		.section	.data.oldTime,"aw"
 2468              		.align	2
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 68


 2469              		.set	.LANCHOR0,. + 0
 2472              	oldTime:
 2473 0000 FF       		.byte	-1
 2474 0001 FF       		.byte	-1
 2475 0002 FF       		.byte	-1
 2476              		.text
 2477              	.Letext0:
 2478              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\machine
 2479              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\sys\\_s
 2480              		.file 8 "Drivers/CMSIS/Include/core_cm3.h"
 2481              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2482              		.file 10 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2483              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1
 2484              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2485              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2486              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2487              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2488              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2489              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 2490              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 2491              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2492              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2493              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\sys\\l
 2494              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\sys\\_
 2495              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\sys\\r
 2496              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\stdlib
 2497              		.file 25 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 2498              		.file 26 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 2499              		.file 27 "USB_DEVICE/App/usbd_cdc_if.h"
 2500              		.file 28 "Core/Src/USER/circular_buffer.h"
 2501              		.file 29 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2502              		.file 30 "Core/Inc/main.h"
 2503              		.file 31 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 2504              		.file 32 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc_ex.h"
 2505              		.file 33 "USB_DEVICE/App/usb_device.h"
 2506              		.file 34 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\string
 2507              		.file 35 "<built-in>"
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 69


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
X:\TMP\USER_T~1\ccsdGSHn.s:16     .text.MX_GPIO_Init:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:23     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
X:\TMP\USER_T~1\ccsdGSHn.s:127    .text.MX_GPIO_Init:0000006c $d
X:\TMP\USER_T~1\ccsdGSHn.s:133    .text.rtc_clean:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:140    .text.rtc_clean:00000000 rtc_clean
X:\TMP\USER_T~1\ccsdGSHn.s:164    .text.rtc_clean:0000000c $d
X:\TMP\USER_T~1\ccsdGSHn.s:169    .text.filter_string:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:176    .text.filter_string:00000000 filter_string
X:\TMP\USER_T~1\ccsdGSHn.s:271    .text.rtc_update:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:278    .text.rtc_update:00000000 rtc_update
X:\TMP\USER_T~1\ccsdGSHn.s:300    .text.rtc_update:00000010 $d
                            *COM*:00000014 hrtc
X:\TMP\USER_T~1\ccsdGSHn.s:306    .text.rtc_time_string:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:313    .text.rtc_time_string:00000000 rtc_time_string
X:\TMP\USER_T~1\ccsdGSHn.s:409    .text.rtc_time_string:00000074 $d
X:\TMP\USER_T~1\ccsdGSHn.s:416    .text.rtc_date_string:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:423    .text.rtc_date_string:00000000 rtc_date_string
X:\TMP\USER_T~1\ccsdGSHn.s:521    .text.rtc_date_string:00000074 $d
X:\TMP\USER_T~1\ccsdGSHn.s:527    .text.rtc_backup_date:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:534    .text.rtc_backup_date:00000000 rtc_backup_date
X:\TMP\USER_T~1\ccsdGSHn.s:612    .text.rtc_backup_date:00000058 $d
X:\TMP\USER_T~1\ccsdGSHn.s:618    .text.rtc_int_init:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:625    .text.rtc_int_init:00000000 rtc_int_init
X:\TMP\USER_T~1\ccsdGSHn.s:643    .text.rtc_int_init:00000010 $d
X:\TMP\USER_T~1\ccsdGSHn.s:648    .text.circle_reset:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:655    .text.circle_reset:00000000 circle_reset
X:\TMP\USER_T~1\ccsdGSHn.s:683    .text.circle_push:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:690    .text.circle_push:00000000 circle_push
X:\TMP\USER_T~1\ccsdGSHn.s:736    .text.circle_pull:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:743    .text.circle_pull:00000000 circle_pull
X:\TMP\USER_T~1\ccsdGSHn.s:792    .text.circle_push_buf:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:799    .text.circle_push_buf:00000000 circle_push_buf
X:\TMP\USER_T~1\ccsdGSHn.s:849    .text.circle_available:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:856    .text.circle_available:00000000 circle_available
X:\TMP\USER_T~1\ccsdGSHn.s:874    .text.circle_free:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:881    .text.circle_free:00000000 circle_free
X:\TMP\USER_T~1\ccsdGSHn.s:902    .text.user_usb_rx:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:909    .text.user_usb_rx:00000000 user_usb_rx
X:\TMP\USER_T~1\ccsdGSHn.s:973    .text.user_usb_rx:00000024 $d
                            *COM*:00000014 cc
X:\TMP\USER_T~1\ccsdGSHn.s:978    .text.user_init:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:985    .text.user_init:00000000 user_init
X:\TMP\USER_T~1\ccsdGSHn.s:1023   .text.user_init:00000028 $d
                            *COM*:00000040 testas
                            *COM*:00000048 htim1
X:\TMP\USER_T~1\ccsdGSHn.s:1030   .text.user_seconds_job:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1037   .text.user_seconds_job:00000000 user_seconds_job
X:\TMP\USER_T~1\ccsdGSHn.s:1077   .text.user_seconds_job:0000002c $d
                            *COM*:00000001 seconds
X:\TMP\USER_T~1\ccsdGSHn.s:1086   .text.HAL_RTCEx_RTCEventCallback:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1093   .text.HAL_RTCEx_RTCEventCallback:00000000 HAL_RTCEx_RTCEventCallback
X:\TMP\USER_T~1\ccsdGSHn.s:1115   .text.Error_Handler:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1122   .text.Error_Handler:00000000 Error_Handler
X:\TMP\USER_T~1\ccsdGSHn.s:1154   .text.rtc_set_date_text:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1161   .text.rtc_set_date_text:00000000 rtc_set_date_text
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 70


X:\TMP\USER_T~1\ccsdGSHn.s:1262   .text.rtc_set_date_text:00000064 $d
X:\TMP\USER_T~1\ccsdGSHn.s:1267   .text.rtc_set_time_text:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1274   .text.rtc_set_time_text:00000000 rtc_set_time_text
X:\TMP\USER_T~1\ccsdGSHn.s:1374   .text.rtc_set_time_text:0000005c $d
X:\TMP\USER_T~1\ccsdGSHn.s:1380   .rodata.commandcom.str1.4:00000000 $d
X:\TMP\USER_T~1\ccsdGSHn.s:1384   .text.commandcom:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1391   .text.commandcom:00000000 commandcom
X:\TMP\USER_T~1\ccsdGSHn.s:1423   .text.commandcom:0000001a $d
X:\TMP\USER_T~1\ccsdGSHn.s:1443   .text.commandcom:0000002e $t
X:\TMP\USER_T~1\ccsdGSHn.s:1488   .text.commandcom:00000054 $d
X:\TMP\USER_T~1\ccsdGSHn.s:1494   .text.user_loop:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1501   .text.user_loop:00000000 user_loop
X:\TMP\USER_T~1\ccsdGSHn.s:1611   .text.user_loop:0000005c $d
                            *COM*:0000000c hiwdg
X:\TMP\USER_T~1\ccsdGSHn.s:1617   .text.rtc_check_screwd_calendar:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1624   .text.rtc_check_screwd_calendar:00000000 rtc_check_screwd_calendar
X:\TMP\USER_T~1\ccsdGSHn.s:1778   .text.rtc_check_screwd_calendar:000000b4 $d
X:\TMP\USER_T~1\ccsdGSHn.s:1785   .text.MX_RTC_Init:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1791   .text.MX_RTC_Init:00000000 MX_RTC_Init
X:\TMP\USER_T~1\ccsdGSHn.s:1964   .text.MX_RTC_Init:000000d0 $d
X:\TMP\USER_T~1\ccsdGSHn.s:1972   .text.MX_TIM1_Init:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:1978   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
X:\TMP\USER_T~1\ccsdGSHn.s:2190   .text.MX_TIM1_Init:000000d8 $d
X:\TMP\USER_T~1\ccsdGSHn.s:2196   .text.MX_IWDG_Init:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:2202   .text.MX_IWDG_Init:00000000 MX_IWDG_Init
X:\TMP\USER_T~1\ccsdGSHn.s:2241   .text.MX_IWDG_Init:00000020 $d
X:\TMP\USER_T~1\ccsdGSHn.s:2247   .text.SystemClock_Config:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:2254   .text.SystemClock_Config:00000000 SystemClock_Config
X:\TMP\USER_T~1\ccsdGSHn.s:2396   .text.main:00000000 $t
X:\TMP\USER_T~1\ccsdGSHn.s:2403   .text.main:00000000 main
X:\TMP\USER_T~1\ccsdGSHn.s:2465   .data.LastHour:00000000 LastHour
X:\TMP\USER_T~1\ccsdGSHn.s:2472   .data.oldTime:00000000 oldTime
X:\TMP\USER_T~1\ccsdGSHn.s:2460   .bss.currTime:00000000 currTime
X:\TMP\USER_T~1\ccsdGSHn.s:2456   .bss.currTime:00000000 $d
X:\TMP\USER_T~1\ccsdGSHn.s:2468   .data.oldTime:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_RTC_GetTime
HAL_RTC_GetDate
HAL_RTCEx_BKUPRead
HAL_RTCEx_BKUPWrite
HAL_TIM_PWM_Start
HAL_GPIO_TogglePin
strlen
strtok
atoi
HAL_RTC_SetDate
HAL_RTC_SetTime
CDC_Transmit_FS
HAL_IWDG_Refresh
HAL_RTC_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
memset
HAL_TIM_Base_Init
ARM GAS  X:\TMP\USER_T~1\ccsdGSHn.s 			page 71


HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_IWDG_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
