ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB95:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : RTC 9H
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "usb_device.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "USER/user.c"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** IWDG_HandleTypeDef hiwdg;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** RTC_HandleTypeDef hrtc;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/main.c **** void SystemClock_Config(void);
  56:Core/Src/main.c **** static void MX_GPIO_Init(void);
  57:Core/Src/main.c **** static void MX_RTC_Init(void);
  58:Core/Src/main.c **** static void MX_TIM1_Init(void);
  59:Core/Src/main.c **** static void MX_IWDG_Init(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END 0 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /**
  70:Core/Src/main.c ****   * @brief  The application entry point.
  71:Core/Src/main.c ****   * @retval int
  72:Core/Src/main.c ****   */
  73:Core/Src/main.c **** int main(void)
  74:Core/Src/main.c **** {
  75:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* USER CODE END 1 */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  82:Core/Src/main.c ****   HAL_Init();
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END Init */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* Configure the system clock */
  89:Core/Src/main.c ****   SystemClock_Config();
  90:Core/Src/main.c **** 
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 3


  91:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END SysInit */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Initialize all configured peripherals */
  96:Core/Src/main.c ****   MX_GPIO_Init();
  97:Core/Src/main.c ****   MX_RTC_Init();
  98:Core/Src/main.c ****   MX_TIM1_Init();
  99:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 100:Core/Src/main.c ****   MX_IWDG_Init();
 101:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 102:Core/Src/main.c **** user_init();
 103:Core/Src/main.c ****   /* USER CODE END 2 */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* Infinite loop */
 106:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 107:Core/Src/main.c ****   while (1)
 108:Core/Src/main.c ****   {
 109:Core/Src/main.c ****     /* USER CODE END WHILE */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 112:Core/Src/main.c **** 	user_loop();
 113:Core/Src/main.c ****   }
 114:Core/Src/main.c ****   /* USER CODE END 3 */
 115:Core/Src/main.c **** }
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /**
 118:Core/Src/main.c ****   * @brief System Clock Configuration
 119:Core/Src/main.c ****   * @retval None
 120:Core/Src/main.c ****   */
 121:Core/Src/main.c **** void SystemClock_Config(void)
 122:Core/Src/main.c **** {
 123:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 124:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 125:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 128:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 129:Core/Src/main.c ****   */
 130:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 131:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 132:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 133:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 134:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 135:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 136:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 137:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 138:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 139:Core/Src/main.c ****   {
 140:Core/Src/main.c ****     Error_Handler();
 141:Core/Src/main.c ****   }
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 144:Core/Src/main.c ****   */
 145:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 146:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 147:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 4


 148:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 149:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 150:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 153:Core/Src/main.c ****   {
 154:Core/Src/main.c ****     Error_Handler();
 155:Core/Src/main.c ****   }
 156:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 157:Core/Src/main.c ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 158:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 159:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 160:Core/Src/main.c ****   {
 161:Core/Src/main.c ****     Error_Handler();
 162:Core/Src/main.c ****   }
 163:Core/Src/main.c **** }
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** /**
 166:Core/Src/main.c ****   * @brief IWDG Initialization Function
 167:Core/Src/main.c ****   * @param None
 168:Core/Src/main.c ****   * @retval None
 169:Core/Src/main.c ****   */
 170:Core/Src/main.c **** static void MX_IWDG_Init(void)
 171:Core/Src/main.c **** {
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 0 */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* USER CODE END IWDG_Init 0 */
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 1 */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE END IWDG_Init 1 */
 180:Core/Src/main.c ****   hiwdg.Instance = IWDG;
 181:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 182:Core/Src/main.c ****   hiwdg.Init.Reload = 4095;
 183:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 184:Core/Src/main.c ****   {
 185:Core/Src/main.c ****     Error_Handler();
 186:Core/Src/main.c ****   }
 187:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 2 */
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE END IWDG_Init 2 */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** /**
 194:Core/Src/main.c ****   * @brief RTC Initialization Function
 195:Core/Src/main.c ****   * @param None
 196:Core/Src/main.c ****   * @retval None
 197:Core/Src/main.c ****   */
 198:Core/Src/main.c **** static void MX_RTC_Init(void)
 199:Core/Src/main.c **** {
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 0 */
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* USER CODE END RTC_Init 0 */
 204:Core/Src/main.c **** 
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 5


 205:Core/Src/main.c ****   RTC_TimeTypeDef sTime = {0};
 206:Core/Src/main.c ****   RTC_DateTypeDef DateToUpdate = {0};
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 1 */
 209:Core/Src/main.c ****   hrtc.Instance = RTC;
 210:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 211:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 212:Core/Src/main.c ****   if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 213:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /** Initialize RTC Only
 216:Core/Src/main.c ****   */
 217:Core/Src/main.c ****   hrtc.Instance = RTC;
 218:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 219:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 220:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 221:Core/Src/main.c ****   {
 222:Core/Src/main.c ****     Error_Handler();
 223:Core/Src/main.c ****   }
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN Check_RTC_BKUP */
 226:Core/Src/main.c ****   } else
 227:Core/Src/main.c ****     {
 228:Core/Src/main.c **** 	  HAL_NVIC_SetPriority(RTC_IRQn,15,0);
 229:Core/Src/main.c **** 	  HAL_NVIC_EnableIRQ(RTC_IRQn);
 230:Core/Src/main.c **** 	}
 231:Core/Src/main.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)!= 0x5051)
 232:Core/Src/main.c **** 	{
 233:Core/Src/main.c ****   /* USER CODE END Check_RTC_BKUP */
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /** Initialize RTC and set the Time and Date
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c ****   sTime.Hours = 0x0;
 238:Core/Src/main.c ****   sTime.Minutes = 0x0;
 239:Core/Src/main.c ****   sTime.Seconds = 0x0;
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 242:Core/Src/main.c ****   {
 243:Core/Src/main.c ****     Error_Handler();
 244:Core/Src/main.c ****   }
 245:Core/Src/main.c ****   DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 246:Core/Src/main.c ****   DateToUpdate.Month = RTC_MONTH_JANUARY;
 247:Core/Src/main.c ****   DateToUpdate.Date = 0x1;
 248:Core/Src/main.c ****   DateToUpdate.Year = 0x0;
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 251:Core/Src/main.c ****   {
 252:Core/Src/main.c ****     Error_Handler();
 253:Core/Src/main.c ****   }
 254:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 2 */
 255:Core/Src/main.c **** 	} // Kitame user code virsuje yra IF komanda. Cia ji uzsidaro.
 256:Core/Src/main.c ****   // LAIKAS BUVO ISSAUGOTAS, NES USER REGISTRAS TURI MAGIC skaiciu 0x5051
 257:Core/Src/main.c ****   
 258:Core/Src/main.c ****   
 259:Core/Src/main.c **** // LAIKRODZIO TIKRINIMAS  
 260:Core/Src/main.c ****   
 261:Core/Src/main.c **** /* read RTC for time */
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 6


 262:Core/Src/main.c **** 	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 263:Core/Src/main.c **** /* read time seconds for epoch */
 264:Core/Src/main.c **** // uint32_t nowsecons=currTime.Hours*3600+currTime.Minutes*60+currTime.Seconds+(dienos.Date-1)*8640
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** //KALENDORIAUS TIKRINIMAS
 267:Core/Src/main.c **** 
 268:Core/Src/main.c **** 	//RTC kalendorius FAIL! Pas F103 jo ir nera. Cold boot su gyvu RTC
 269:Core/Src/main.c **** 	RTC_DateTypeDef dienos= {0};
 270:Core/Src/main.c **** 	HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 271:Core/Src/main.c **** 	if(dienos.Year < 20) {rtc_check_screwd_calendar();}
 272:Core/Src/main.c **** 	
 273:Core/Src/main.c **** //HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 274:Core/Src/main.c **** 
 275:Core/Src/main.c **** //Cia irasom MAGIC skaiciu. Jis po pilno reseto ir RTC mirties turi neislikti.
 276:Core/Src/main.c **** 	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);//Write data to the specified backing area registe
 277:Core/Src/main.c **** 
 278:Core/Src/main.c **** //HAL_RTCEx_SetSmoothCalib(&hrtc,0,0,10);
 279:Core/Src/main.c ****   /* USER CODE END RTC_Init 2 */
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** }
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** /**
 284:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 285:Core/Src/main.c ****   * @param None
 286:Core/Src/main.c ****   * @retval None
 287:Core/Src/main.c ****   */
 288:Core/Src/main.c **** static void MX_TIM1_Init(void)
 289:Core/Src/main.c **** {
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 296:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 297:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 298:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 303:Core/Src/main.c ****   htim1.Instance = TIM1;
 304:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 305:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 306:Core/Src/main.c ****   htim1.Init.Period = 35535;
 307:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 308:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 309:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 310:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 311:Core/Src/main.c ****   {
 312:Core/Src/main.c ****     Error_Handler();
 313:Core/Src/main.c ****   }
 314:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 315:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 316:Core/Src/main.c ****   {
 317:Core/Src/main.c ****     Error_Handler();
 318:Core/Src/main.c ****   }
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 7


 319:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 320:Core/Src/main.c ****   {
 321:Core/Src/main.c ****     Error_Handler();
 322:Core/Src/main.c ****   }
 323:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 324:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 325:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 326:Core/Src/main.c ****   {
 327:Core/Src/main.c ****     Error_Handler();
 328:Core/Src/main.c ****   }
 329:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 330:Core/Src/main.c ****   sConfigOC.Pulse = 15000;
 331:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 332:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 333:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 334:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 335:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 336:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 337:Core/Src/main.c ****   {
 338:Core/Src/main.c ****     Error_Handler();
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 341:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 342:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 343:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 344:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 345:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 346:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 347:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 348:Core/Src/main.c ****   {
 349:Core/Src/main.c ****     Error_Handler();
 350:Core/Src/main.c ****   }
 351:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 354:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 355:Core/Src/main.c **** 
 356:Core/Src/main.c **** }
 357:Core/Src/main.c **** 
 358:Core/Src/main.c **** /**
 359:Core/Src/main.c ****   * @brief GPIO Initialization Function
 360:Core/Src/main.c ****   * @param None
 361:Core/Src/main.c ****   * @retval None
 362:Core/Src/main.c ****   */
 363:Core/Src/main.c **** static void MX_GPIO_Init(void)
 364:Core/Src/main.c **** {
  26              		.loc 1 364 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 87B0     		sub	sp, sp, #28
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 8


  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
 365:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 365 3 view .LVU1
  40              		.loc 1 365 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0294     		str	r4, [sp, #8]
  43 0008 0394     		str	r4, [sp, #12]
  44 000a 0494     		str	r4, [sp, #16]
  45 000c 0594     		str	r4, [sp, #20]
 366:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 367:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 370:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  46              		.loc 1 370 3 is_stmt 1 view .LVU3
  47              	.LBB4:
  48              		.loc 1 370 3 view .LVU4
  49              		.loc 1 370 3 view .LVU5
  50 000e 124B     		ldr	r3, .L3
  51 0010 9A69     		ldr	r2, [r3, #24]
  52 0012 42F02002 		orr	r2, r2, #32
  53 0016 9A61     		str	r2, [r3, #24]
  54              		.loc 1 370 3 view .LVU6
  55 0018 9A69     		ldr	r2, [r3, #24]
  56 001a 02F02002 		and	r2, r2, #32
  57 001e 0092     		str	r2, [sp]
  58              		.loc 1 370 3 view .LVU7
  59 0020 009A     		ldr	r2, [sp]
  60              	.LBE4:
  61              		.loc 1 370 3 view .LVU8
 371:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  62              		.loc 1 371 3 view .LVU9
  63              	.LBB5:
  64              		.loc 1 371 3 view .LVU10
  65              		.loc 1 371 3 view .LVU11
  66 0022 9A69     		ldr	r2, [r3, #24]
  67 0024 42F00402 		orr	r2, r2, #4
  68 0028 9A61     		str	r2, [r3, #24]
  69              		.loc 1 371 3 view .LVU12
  70 002a 9B69     		ldr	r3, [r3, #24]
  71 002c 03F00403 		and	r3, r3, #4
  72 0030 0193     		str	r3, [sp, #4]
  73              		.loc 1 371 3 view .LVU13
  74 0032 019B     		ldr	r3, [sp, #4]
  75              	.LBE5:
  76              		.loc 1 371 3 view .LVU14
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 374:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  77              		.loc 1 374 3 view .LVU15
  78 0034 094D     		ldr	r5, .L3+4
  79 0036 2246     		mov	r2, r4
  80 0038 0121     		movs	r1, #1
  81 003a 2846     		mov	r0, r5
  82 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
  83              	.LVL0:
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 9


 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /*Configure GPIO pin : LED_Pin */
 377:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin;
  84              		.loc 1 377 3 view .LVU16
  85              		.loc 1 377 23 is_stmt 0 view .LVU17
  86 0040 0123     		movs	r3, #1
  87 0042 0293     		str	r3, [sp, #8]
 378:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  88              		.loc 1 378 3 is_stmt 1 view .LVU18
  89              		.loc 1 378 24 is_stmt 0 view .LVU19
  90 0044 0393     		str	r3, [sp, #12]
 379:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  91              		.loc 1 379 3 is_stmt 1 view .LVU20
  92              		.loc 1 379 24 is_stmt 0 view .LVU21
  93 0046 0494     		str	r4, [sp, #16]
 380:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  94              		.loc 1 380 3 is_stmt 1 view .LVU22
  95              		.loc 1 380 25 is_stmt 0 view .LVU23
  96 0048 0223     		movs	r3, #2
  97 004a 0593     		str	r3, [sp, #20]
 381:Core/Src/main.c ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
  98              		.loc 1 381 3 is_stmt 1 view .LVU24
  99 004c 02A9     		add	r1, sp, #8
 100 004e 2846     		mov	r0, r5
 101 0050 FFF7FEFF 		bl	HAL_GPIO_Init
 102              	.LVL1:
 382:Core/Src/main.c **** 
 383:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 384:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 385:Core/Src/main.c **** }
 103              		.loc 1 385 1 is_stmt 0 view .LVU25
 104 0054 07B0     		add	sp, sp, #28
 105              	.LCFI2:
 106              		.cfi_def_cfa_offset 12
 107              		@ sp needed
 108 0056 30BD     		pop	{r4, r5, pc}
 109              	.L4:
 110              		.align	2
 111              	.L3:
 112 0058 00100240 		.word	1073876992
 113 005c 00080140 		.word	1073809408
 114              		.cfi_endproc
 115              	.LFE95:
 117              		.section	.text.rtc_clean,"ax",%progbits
 118              		.align	1
 119              		.global	rtc_clean
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu softvfp
 125              	rtc_clean:
 126              	.LFB68:
 127              		.file 2 "Core/Src/USER/rtc.c"
   1:Core/Src/USER/rtc.c **** /* ********************************************* */
   2:Core/Src/USER/rtc.c **** /* (c)2022 by www.vabolis.lt, Kaunas             */
   3:Core/Src/USER/rtc.c **** /**
   4:Core/Src/USER/rtc.c ****   **********************************************
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 10


   5:Core/Src/USER/rtc.c ****   * @file           : rtc.c
   6:Core/Src/USER/rtc.c ****   * @version        : 1.0
   7:Core/Src/USER/rtc.c ****   * @brief          : generic RTC clock and calendar for STM32
   8:Core/Src/USER/rtc.c **** **/  
   9:Core/Src/USER/rtc.c **** /* ********************************************* */
  10:Core/Src/USER/rtc.c **** 
  11:Core/Src/USER/rtc.c **** #include "rtc.h"
  12:Core/Src/USER/rtc.c **** #include "user.h"
  13:Core/Src/USER/rtc.c **** #include "usbd_cdc_if.h"
  14:Core/Src/USER/rtc.c **** 
  15:Core/Src/USER/rtc.c **** //#include "epoch.c"
  16:Core/Src/USER/rtc.c **** 
  17:Core/Src/USER/rtc.c **** extern RTC_HandleTypeDef hrtc;
  18:Core/Src/USER/rtc.c **** 
  19:Core/Src/USER/rtc.c **** 
  20:Core/Src/USER/rtc.c **** // ****** pacioje pradzioje, globalus laikas. Galima persideklaruoti, bet ar verta?
  21:Core/Src/USER/rtc.c **** 
  22:Core/Src/USER/rtc.c **** RTC_TimeTypeDef currTime = {0};
  23:Core/Src/USER/rtc.c **** RTC_TimeTypeDef oldTime = {0xFF,0xFF,0xFF}; //del refresh
  24:Core/Src/USER/rtc.c **** volatile unsigned char LastHour=255;
  25:Core/Src/USER/rtc.c **** 
  26:Core/Src/USER/rtc.c **** /* instrukcijos kurias reikia ikelti i main.c */
  27:Core/Src/USER/rtc.c **** 
  28:Core/Src/USER/rtc.c **** //-  /* USER CODE BEGIN Check_RTC_BKUP */
  29:Core/Src/USER/rtc.c **** //-  
  30:Core/Src/USER/rtc.c **** //-  // CIA TIKRINAM AR RTC ir kiti RAM baitai isliko gyvi.
  31:Core/Src/USER/rtc.c **** //-    if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)!= 0x5051)
  32:Core/Src/USER/rtc.c **** //-	{
  33:Core/Src/USER/rtc.c **** //-  /* USER CODE END Check_RTC_BKUP */
  34:Core/Src/USER/rtc.c **** 
  35:Core/Src/USER/rtc.c **** 
  36:Core/Src/USER/rtc.c **** //- /* USER CODE BEGIN RTC_Init 2 */
  37:Core/Src/USER/rtc.c **** //-	} // Kitame user code virsuje yra IF komanda. Cia ji uzsidaro.
  38:Core/Src/USER/rtc.c **** //-  // LAIKAS BUVO ISSAUGOTAS, NES USER REGISTRAS TURI MAGIC skaiciu 0x5051
  39:Core/Src/USER/rtc.c **** //- 
  40:Core/Src/USER/rtc.c **** //- /* read RTC for time */
  41:Core/Src/USER/rtc.c **** //-	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
  42:Core/Src/USER/rtc.c **** //- /* read time seconds for epoch */
  43:Core/Src/USER/rtc.c **** //- // uint32_t nowsecons=currTime.Hours*3600+currTime.Minutes*60+currTime.Seconds+(dienos.Date-1)*
  44:Core/Src/USER/rtc.c **** //-
  45:Core/Src/USER/rtc.c **** //- /* set time to RTC */
  46:Core/Src/USER/rtc.c **** //-	if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
  47:Core/Src/USER/rtc.c **** //-	{
  48:Core/Src/USER/rtc.c **** //-	Error_Handler();
  49:Core/Src/USER/rtc.c **** //-	}
  50:Core/Src/USER/rtc.c **** //-
  51:Core/Src/USER/rtc.c **** //- // DEMESIO! STM32F103 NETURI KALENDORIAUS ir panasu, kad neturi epoch skaitliuko.
  52:Core/Src/USER/rtc.c **** //-	//RTC_DateTypeDef dienos= {0};
  53:Core/Src/USER/rtc.c **** //-	//HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
  54:Core/Src/USER/rtc.c **** //-	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
  55:Core/Src/USER/rtc.c **** //-
  56:Core/Src/USER/rtc.c **** //- //Cia irasom MAGIC skaiciu. Jis po pilno reseto ir RTC mirties turi neislikti.
  57:Core/Src/USER/rtc.c **** //-	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);//Write data to the specified backing area regi
  58:Core/Src/USER/rtc.c **** //-
  59:Core/Src/USER/rtc.c **** //- //HAL_RTCEx_SetSmoothCalib(&hrtc,0,0,10);
  60:Core/Src/USER/rtc.c **** //-   /* USER CODE END RTC_Init 2 */
  61:Core/Src/USER/rtc.c **** 
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 11


  62:Core/Src/USER/rtc.c **** 
  63:Core/Src/USER/rtc.c **** // sunaikina sena laika. Naudojama LCD grafikos spartinimui
  64:Core/Src/USER/rtc.c **** void rtc_clean(void)
  65:Core/Src/USER/rtc.c **** {
 128              		.loc 2 65 1 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
  66:Core/Src/USER/rtc.c **** 	oldTime.Hours = 60;
 133              		.loc 2 66 2 view .LVU27
 134              		.loc 2 66 16 is_stmt 0 view .LVU28
 135 0000 024B     		ldr	r3, .L6
 136 0002 3C22     		movs	r2, #60
 137 0004 1A70     		strb	r2, [r3]
  67:Core/Src/USER/rtc.c **** 	oldTime.Minutes = 60;
 138              		.loc 2 67 2 is_stmt 1 view .LVU29
 139              		.loc 2 67 18 is_stmt 0 view .LVU30
 140 0006 5A70     		strb	r2, [r3, #1]
  68:Core/Src/USER/rtc.c **** 	oldTime.Seconds = 60;
 141              		.loc 2 68 2 is_stmt 1 view .LVU31
 142              		.loc 2 68 18 is_stmt 0 view .LVU32
 143 0008 9A70     		strb	r2, [r3, #2]
  69:Core/Src/USER/rtc.c **** }
 144              		.loc 2 69 1 view .LVU33
 145 000a 7047     		bx	lr
 146              	.L7:
 147              		.align	2
 148              	.L6:
 149 000c 00000000 		.word	.LANCHOR0
 150              		.cfi_endproc
 151              	.LFE68:
 153              		.section	.text.filter_string,"ax",%progbits
 154              		.align	1
 155              		.global	filter_string
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu softvfp
 161              	filter_string:
 162              	.LVL2:
 163              	.LFB69:
  70:Core/Src/USER/rtc.c **** 
  71:Core/Src/USER/rtc.c **** 
  72:Core/Src/USER/rtc.c **** 
  73:Core/Src/USER/rtc.c **** 
  74:Core/Src/USER/rtc.c **** // teksto filtras laiko ir datos nustatymui.
  75:Core/Src/USER/rtc.c **** void filter_string(char *Buf)
  76:Core/Src/USER/rtc.c **** {
 164              		.loc 2 76 1 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169              		.loc 2 76 1 is_stmt 0 view .LVU35
 170 0000 30B4     		push	{r4, r5}
 171              	.LCFI3:
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 12


 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 4, -8
 174              		.cfi_offset 5, -4
 175 0002 0246     		mov	r2, r0
  77:Core/Src/USER/rtc.c **** int i=0;
 176              		.loc 2 77 1 is_stmt 1 view .LVU36
 177              	.LVL3:
  78:Core/Src/USER/rtc.c **** int j=0;
 178              		.loc 2 78 1 view .LVU37
  79:Core/Src/USER/rtc.c **** 
  80:Core/Src/USER/rtc.c **** for(i=0;Buf[i] != 0; i++)
 179              		.loc 2 80 1 view .LVU38
 180              		.loc 2 80 6 is_stmt 0 view .LVU39
 181 0004 0024     		movs	r4, #0
 182              		.loc 2 80 1 view .LVU40
 183 0006 15E0     		b	.L9
 184              	.LVL4:
 185              	.L16:
  81:Core/Src/USER/rtc.c **** 	{
  82:Core/Src/USER/rtc.c **** 	while(!((Buf[i]>='0' && Buf[i]<='9') || Buf[i]==':' || Buf[i]=='.') && !(Buf[i]==0))
  83:Core/Src/USER/rtc.c **** 		{
  84:Core/Src/USER/rtc.c **** 			for(j=i;Buf[j] !=0; ++j)
  85:Core/Src/USER/rtc.c **** 				{
  86:Core/Src/USER/rtc.c **** 					Buf[j]=Buf[j+1];
  87:Core/Src/USER/rtc.c **** 				}
  88:Core/Src/USER/rtc.c **** 			Buf[j]=0;
 186              		.loc 2 88 4 is_stmt 1 view .LVU41
 187              		.loc 2 88 10 is_stmt 0 view .LVU42
 188 0008 0023     		movs	r3, #0
 189              	.LVL5:
 190              		.loc 2 88 10 view .LVU43
 191 000a 0370     		strb	r3, [r0]
 192              	.L13:
  82:Core/Src/USER/rtc.c **** 		{
 193              		.loc 2 82 7 is_stmt 1 view .LVU44
  82:Core/Src/USER/rtc.c **** 		{
 194              		.loc 2 82 14 is_stmt 0 view .LVU45
 195 000c 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
  82:Core/Src/USER/rtc.c **** 		{
 196              		.loc 2 82 39 view .LVU46
 197 000e A1F13003 		sub	r3, r1, #48
 198 0012 DBB2     		uxtb	r3, r3
  82:Core/Src/USER/rtc.c **** 		{
 199              		.loc 2 82 7 view .LVU47
 200 0014 0A2B     		cmp	r3, #10
 201 0016 0CD9     		bls	.L11
  82:Core/Src/USER/rtc.c **** 		{
 202              		.loc 2 82 8 discriminator 1 view .LVU48
 203 0018 2E29     		cmp	r1, #46
 204 001a 0AD0     		beq	.L11
  82:Core/Src/USER/rtc.c **** 		{
 205              		.loc 2 82 70 discriminator 2 view .LVU49
 206 001c 49B1     		cbz	r1, .L11
  84:Core/Src/USER/rtc.c **** 				{
 207              		.loc 2 84 9 view .LVU50
 208 001e 2346     		mov	r3, r4
 209              	.L12:
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 13


 210              	.LVL6:
  84:Core/Src/USER/rtc.c **** 				{
 211              		.loc 2 84 12 is_stmt 1 discriminator 1 view .LVU51
  84:Core/Src/USER/rtc.c **** 				{
 212              		.loc 2 84 15 is_stmt 0 discriminator 1 view .LVU52
 213 0020 D018     		adds	r0, r2, r3
 214 0022 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
  84:Core/Src/USER/rtc.c **** 				{
 215              		.loc 2 84 4 discriminator 1 view .LVU53
 216 0024 0029     		cmp	r1, #0
 217 0026 EFD0     		beq	.L16
  86:Core/Src/USER/rtc.c **** 				}
 218              		.loc 2 86 6 is_stmt 1 discriminator 3 view .LVU54
  86:Core/Src/USER/rtc.c **** 				}
 219              		.loc 2 86 16 is_stmt 0 discriminator 3 view .LVU55
 220 0028 D118     		adds	r1, r2, r3
 221 002a 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
  86:Core/Src/USER/rtc.c **** 				}
 222              		.loc 2 86 12 discriminator 3 view .LVU56
 223 002c D154     		strb	r1, [r2, r3]
  84:Core/Src/USER/rtc.c **** 				{
 224              		.loc 2 84 24 is_stmt 1 discriminator 3 view .LVU57
 225 002e 0133     		adds	r3, r3, #1
 226              	.LVL7:
  84:Core/Src/USER/rtc.c **** 				{
 227              		.loc 2 84 24 is_stmt 0 discriminator 3 view .LVU58
 228 0030 F6E7     		b	.L12
 229              	.LVL8:
 230              	.L11:
  80:Core/Src/USER/rtc.c **** 	{
 231              		.loc 2 80 22 is_stmt 1 discriminator 2 view .LVU59
  80:Core/Src/USER/rtc.c **** 	{
 232              		.loc 2 80 23 is_stmt 0 discriminator 2 view .LVU60
 233 0032 0134     		adds	r4, r4, #1
 234              	.LVL9:
 235              	.L9:
  80:Core/Src/USER/rtc.c **** 	{
 236              		.loc 2 80 9 is_stmt 1 discriminator 1 view .LVU61
  80:Core/Src/USER/rtc.c **** 	{
 237              		.loc 2 80 12 is_stmt 0 discriminator 1 view .LVU62
 238 0034 1519     		adds	r5, r2, r4
 239 0036 135D     		ldrb	r3, [r2, r4]	@ zero_extendqisi2
  80:Core/Src/USER/rtc.c **** 	{
 240              		.loc 2 80 1 discriminator 1 view .LVU63
 241 0038 002B     		cmp	r3, #0
 242 003a E7D1     		bne	.L13
  89:Core/Src/USER/rtc.c **** 		}
  90:Core/Src/USER/rtc.c **** 	}
  91:Core/Src/USER/rtc.c **** }
 243              		.loc 2 91 1 view .LVU64
 244 003c 30BC     		pop	{r4, r5}
 245              	.LCFI4:
 246              		.cfi_restore 5
 247              		.cfi_restore 4
 248              		.cfi_def_cfa_offset 0
 249              	.LVL10:
 250              		.loc 2 91 1 view .LVU65
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 14


 251 003e 7047     		bx	lr
 252              		.cfi_endproc
 253              	.LFE69:
 255              		.section	.text.rtc_update,"ax",%progbits
 256              		.align	1
 257              		.global	rtc_update
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu softvfp
 263              	rtc_update:
 264              	.LFB72:
  92:Core/Src/USER/rtc.c **** 
  93:Core/Src/USER/rtc.c **** //nustatyti kalendoriu.
  94:Core/Src/USER/rtc.c **** void rtc_set_date_text(char * Buf)
  95:Core/Src/USER/rtc.c **** {
  96:Core/Src/USER/rtc.c **** filter_string(Buf);
  97:Core/Src/USER/rtc.c **** //22.12.23
  98:Core/Src/USER/rtc.c **** 
  99:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 100:Core/Src/USER/rtc.c **** 
 101:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 102:Core/Src/USER/rtc.c **** 	char delim[] = ".";
 103:Core/Src/USER/rtc.c **** 
 104:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 105:Core/Src/USER/rtc.c **** 	dienos.Year=atoi(ptr);
 106:Core/Src/USER/rtc.c **** 	
 107:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 108:Core/Src/USER/rtc.c **** 	dienos.Month=atoi(ptr);
 109:Core/Src/USER/rtc.c **** 	
 110:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 111:Core/Src/USER/rtc.c **** 	dienos.Date=atoi(ptr);
 112:Core/Src/USER/rtc.c **** 	
 113:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 114:Core/Src/USER/rtc.c ****   {
 115:Core/Src/USER/rtc.c ****     Error_Handler();
 116:Core/Src/USER/rtc.c ****   }
 117:Core/Src/USER/rtc.c ****   
 118:Core/Src/USER/rtc.c ****   rtc_backup_date();
 119:Core/Src/USER/rtc.c **** }
 120:Core/Src/USER/rtc.c **** 
 121:Core/Src/USER/rtc.c **** //nustatyti laikrodi
 122:Core/Src/USER/rtc.c **** void rtc_set_time_text(char * Buf)
 123:Core/Src/USER/rtc.c **** {
 124:Core/Src/USER/rtc.c **** // echo ATT%TIME% >COMx
 125:Core/Src/USER/rtc.c **** //ATT19:14:32.94
 126:Core/Src/USER/rtc.c **** 
 127:Core/Src/USER/rtc.c **** 
 128:Core/Src/USER/rtc.c **** filter_string(Buf);
 129:Core/Src/USER/rtc.c **** 
 130:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 131:Core/Src/USER/rtc.c **** 
 132:Core/Src/USER/rtc.c **** 	char delim[] = ":";
 133:Core/Src/USER/rtc.c **** 
 134:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 136:Core/Src/USER/rtc.c **** 	
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 15


 137:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 138:Core/Src/USER/rtc.c **** 	currTime.Minutes=atoi(ptr);
 139:Core/Src/USER/rtc.c **** 	
 140:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 141:Core/Src/USER/rtc.c **** 	currTime.Seconds=atoi(ptr);
 142:Core/Src/USER/rtc.c **** 	
 143:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
 144:Core/Src/USER/rtc.c ****   {
 145:Core/Src/USER/rtc.c ****     Error_Handler();
 146:Core/Src/USER/rtc.c ****   }
 147:Core/Src/USER/rtc.c **** 
 148:Core/Src/USER/rtc.c **** }
 149:Core/Src/USER/rtc.c **** 
 150:Core/Src/USER/rtc.c **** // nuskaityti laika is hardwares.
 151:Core/Src/USER/rtc.c **** void rtc_update(void)
 152:Core/Src/USER/rtc.c **** {
 265              		.loc 2 152 1 is_stmt 1 view -0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 08B5     		push	{r3, lr}
 270              	.LCFI5:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 3, -8
 273              		.cfi_offset 14, -4
 153:Core/Src/USER/rtc.c **** 	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 274              		.loc 2 153 2 view .LVU67
 275 0002 0022     		movs	r2, #0
 276 0004 0249     		ldr	r1, .L19
 277 0006 0348     		ldr	r0, .L19+4
 278 0008 FFF7FEFF 		bl	HAL_RTC_GetTime
 279              	.LVL11:
 154:Core/Src/USER/rtc.c **** }
 280              		.loc 2 154 1 is_stmt 0 view .LVU68
 281 000c 08BD     		pop	{r3, pc}
 282              	.L20:
 283 000e 00BF     		.align	2
 284              	.L19:
 285 0010 00000000 		.word	.LANCHOR1
 286 0014 00000000 		.word	hrtc
 287              		.cfi_endproc
 288              	.LFE72:
 290              		.section	.text.rtc_time_string,"ax",%progbits
 291              		.align	1
 292              		.global	rtc_time_string
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu softvfp
 298              	rtc_time_string:
 299              	.LVL12:
 300              	.LFB73:
 155:Core/Src/USER/rtc.c **** 
 156:Core/Src/USER/rtc.c **** //rtc->tekstas
 157:Core/Src/USER/rtc.c **** void rtc_time_string(char * text)
 158:Core/Src/USER/rtc.c **** {
 301              		.loc 2 158 1 is_stmt 1 view -0
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 16


 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		.loc 2 158 1 is_stmt 0 view .LVU70
 306 0000 70B5     		push	{r4, r5, r6, lr}
 307              	.LCFI6:
 308              		.cfi_def_cfa_offset 16
 309              		.cfi_offset 4, -16
 310              		.cfi_offset 5, -12
 311              		.cfi_offset 6, -8
 312              		.cfi_offset 14, -4
 313 0002 0446     		mov	r4, r0
 159:Core/Src/USER/rtc.c **** 	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 314              		.loc 2 159 2 is_stmt 1 view .LVU71
 315 0004 1B4D     		ldr	r5, .L23
 316 0006 0022     		movs	r2, #0
 317 0008 2946     		mov	r1, r5
 318 000a 1B48     		ldr	r0, .L23+4
 319              	.LVL13:
 320              		.loc 2 159 2 is_stmt 0 view .LVU72
 321 000c FFF7FEFF 		bl	HAL_RTC_GetTime
 322              	.LVL14:
 160:Core/Src/USER/rtc.c **** 	text[0]=(currTime.Hours)/10+'0';
 323              		.loc 2 160 2 is_stmt 1 view .LVU73
 324              		.loc 2 160 19 is_stmt 0 view .LVU74
 325 0010 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 326              		.loc 2 160 29 view .LVU75
 327 0012 1A4B     		ldr	r3, .L23+8
 328 0014 A3FB0212 		umull	r1, r2, r3, r2
 329 0018 D208     		lsrs	r2, r2, #3
 330 001a 3032     		adds	r2, r2, #48
 331              		.loc 2 160 9 view .LVU76
 332 001c 2270     		strb	r2, [r4]
 161:Core/Src/USER/rtc.c **** 	text[1]=(currTime.Hours)%10+'0';
 333              		.loc 2 161 2 is_stmt 1 view .LVU77
 334              		.loc 2 161 19 is_stmt 0 view .LVU78
 335 001e 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 336              		.loc 2 161 29 view .LVU79
 337 0020 A3FB0201 		umull	r0, r1, r3, r2
 338 0024 C908     		lsrs	r1, r1, #3
 339 0026 01EB8101 		add	r1, r1, r1, lsl #2
 340 002a A2EB4102 		sub	r2, r2, r1, lsl #1
 341 002e 3032     		adds	r2, r2, #48
 342              		.loc 2 161 9 view .LVU80
 343 0030 6270     		strb	r2, [r4, #1]
 162:Core/Src/USER/rtc.c **** 	text[2]=':';	
 344              		.loc 2 162 2 is_stmt 1 view .LVU81
 345              		.loc 2 162 9 is_stmt 0 view .LVU82
 346 0032 3A20     		movs	r0, #58
 347 0034 A070     		strb	r0, [r4, #2]
 163:Core/Src/USER/rtc.c **** 
 164:Core/Src/USER/rtc.c **** 	text[3]=(currTime.Minutes)/10+'0';
 348              		.loc 2 164 2 is_stmt 1 view .LVU83
 349              		.loc 2 164 19 is_stmt 0 view .LVU84
 350 0036 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 351              		.loc 2 164 31 view .LVU85
 352 0038 A3FB0162 		umull	r6, r2, r3, r1
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 17


 353 003c D208     		lsrs	r2, r2, #3
 354 003e 02F13006 		add	r6, r2, #48
 355              		.loc 2 164 9 view .LVU86
 356 0042 E670     		strb	r6, [r4, #3]
 165:Core/Src/USER/rtc.c **** 	text[4]=(currTime.Minutes)%10+'0';
 357              		.loc 2 165 2 is_stmt 1 view .LVU87
 358              		.loc 2 165 31 is_stmt 0 view .LVU88
 359 0044 02EB8202 		add	r2, r2, r2, lsl #2
 360 0048 A1EB4202 		sub	r2, r1, r2, lsl #1
 361 004c 3032     		adds	r2, r2, #48
 362              		.loc 2 165 9 view .LVU89
 363 004e 2271     		strb	r2, [r4, #4]
 166:Core/Src/USER/rtc.c **** 	text[5]=':';	
 364              		.loc 2 166 2 is_stmt 1 view .LVU90
 365              		.loc 2 166 9 is_stmt 0 view .LVU91
 366 0050 6071     		strb	r0, [r4, #5]
 167:Core/Src/USER/rtc.c **** 
 168:Core/Src/USER/rtc.c **** 	text[6]=(currTime.Seconds)/10+'0';
 367              		.loc 2 168 2 is_stmt 1 view .LVU92
 368              		.loc 2 168 19 is_stmt 0 view .LVU93
 369 0052 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 370              		.loc 2 168 31 view .LVU94
 371 0054 A3FB0213 		umull	r1, r3, r3, r2
 372 0058 DB08     		lsrs	r3, r3, #3
 373 005a 03F13001 		add	r1, r3, #48
 374              		.loc 2 168 9 view .LVU95
 375 005e A171     		strb	r1, [r4, #6]
 169:Core/Src/USER/rtc.c **** 	text[7]=(currTime.Seconds)%10+'0';
 376              		.loc 2 169 2 is_stmt 1 view .LVU96
 377              		.loc 2 169 31 is_stmt 0 view .LVU97
 378 0060 03EB8303 		add	r3, r3, r3, lsl #2
 379 0064 A2EB4303 		sub	r3, r2, r3, lsl #1
 380 0068 3033     		adds	r3, r3, #48
 381              		.loc 2 169 9 view .LVU98
 382 006a E371     		strb	r3, [r4, #7]
 170:Core/Src/USER/rtc.c **** 	text[8]=0;
 383              		.loc 2 170 2 is_stmt 1 view .LVU99
 384              		.loc 2 170 9 is_stmt 0 view .LVU100
 385 006c 0023     		movs	r3, #0
 386 006e 2372     		strb	r3, [r4, #8]
 171:Core/Src/USER/rtc.c **** }
 387              		.loc 2 171 1 view .LVU101
 388 0070 70BD     		pop	{r4, r5, r6, pc}
 389              	.LVL15:
 390              	.L24:
 391              		.loc 2 171 1 view .LVU102
 392 0072 00BF     		.align	2
 393              	.L23:
 394 0074 00000000 		.word	.LANCHOR1
 395 0078 00000000 		.word	hrtc
 396 007c CDCCCCCC 		.word	-858993459
 397              		.cfi_endproc
 398              	.LFE73:
 400              		.section	.text.rtc_date_string,"ax",%progbits
 401              		.align	1
 402              		.global	rtc_date_string
 403              		.syntax unified
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 18


 404              		.thumb
 405              		.thumb_func
 406              		.fpu softvfp
 408              	rtc_date_string:
 409              	.LVL16:
 410              	.LFB74:
 172:Core/Src/USER/rtc.c **** void rtc_date_string(char * text)
 173:Core/Src/USER/rtc.c **** {
 411              		.loc 2 173 1 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 8
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		.loc 2 173 1 is_stmt 0 view .LVU104
 416 0000 30B5     		push	{r4, r5, lr}
 417              	.LCFI7:
 418              		.cfi_def_cfa_offset 12
 419              		.cfi_offset 4, -12
 420              		.cfi_offset 5, -8
 421              		.cfi_offset 14, -4
 422 0002 83B0     		sub	sp, sp, #12
 423              	.LCFI8:
 424              		.cfi_def_cfa_offset 24
 425 0004 0446     		mov	r4, r0
 174:Core/Src/USER/rtc.c **** 	RTC_DateTypeDef dienos;
 426              		.loc 2 174 2 is_stmt 1 view .LVU105
 175:Core/Src/USER/rtc.c **** 	HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 427              		.loc 2 175 2 view .LVU106
 428 0006 0022     		movs	r2, #0
 429 0008 01A9     		add	r1, sp, #4
 430 000a 1A48     		ldr	r0, .L27
 431              	.LVL17:
 432              		.loc 2 175 2 is_stmt 0 view .LVU107
 433 000c FFF7FEFF 		bl	HAL_RTC_GetDate
 434              	.LVL18:
 176:Core/Src/USER/rtc.c **** 
 177:Core/Src/USER/rtc.c **** 	text[0]=(dienos.Year)/10+'0';
 435              		.loc 2 177 2 is_stmt 1 view .LVU108
 436              		.loc 2 177 17 is_stmt 0 view .LVU109
 437 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 438              		.loc 2 177 26 view .LVU110
 439 0014 184B     		ldr	r3, .L27+4
 440 0016 A3FB0102 		umull	r0, r2, r3, r1
 441 001a D208     		lsrs	r2, r2, #3
 442 001c 02F13000 		add	r0, r2, #48
 443              		.loc 2 177 9 view .LVU111
 444 0020 2070     		strb	r0, [r4]
 178:Core/Src/USER/rtc.c **** 	text[1]=(dienos.Year)%10+'0';
 445              		.loc 2 178 2 is_stmt 1 view .LVU112
 446              		.loc 2 178 26 is_stmt 0 view .LVU113
 447 0022 02EB8202 		add	r2, r2, r2, lsl #2
 448 0026 A1EB4202 		sub	r2, r1, r2, lsl #1
 449 002a 3032     		adds	r2, r2, #48
 450              		.loc 2 178 9 view .LVU114
 451 002c 6270     		strb	r2, [r4, #1]
 179:Core/Src/USER/rtc.c **** 	text[2]='.';
 452              		.loc 2 179 2 is_stmt 1 view .LVU115
 453              		.loc 2 179 9 is_stmt 0 view .LVU116
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 19


 454 002e 2E20     		movs	r0, #46
 455 0030 A070     		strb	r0, [r4, #2]
 180:Core/Src/USER/rtc.c **** 	text[3]=(dienos.Month)/10+'0';
 456              		.loc 2 180 2 is_stmt 1 view .LVU117
 457              		.loc 2 180 17 is_stmt 0 view .LVU118
 458 0032 9DF80510 		ldrb	r1, [sp, #5]	@ zero_extendqisi2
 459              		.loc 2 180 27 view .LVU119
 460 0036 A3FB0152 		umull	r5, r2, r3, r1
 461 003a D208     		lsrs	r2, r2, #3
 462 003c 02F13005 		add	r5, r2, #48
 463              		.loc 2 180 9 view .LVU120
 464 0040 E570     		strb	r5, [r4, #3]
 181:Core/Src/USER/rtc.c **** 	text[4]=(dienos.Month)%10+'0';
 465              		.loc 2 181 2 is_stmt 1 view .LVU121
 466              		.loc 2 181 27 is_stmt 0 view .LVU122
 467 0042 02EB8202 		add	r2, r2, r2, lsl #2
 468 0046 A1EB4202 		sub	r2, r1, r2, lsl #1
 469 004a 3032     		adds	r2, r2, #48
 470              		.loc 2 181 9 view .LVU123
 471 004c 2271     		strb	r2, [r4, #4]
 182:Core/Src/USER/rtc.c **** 	text[5]='.';
 472              		.loc 2 182 2 is_stmt 1 view .LVU124
 473              		.loc 2 182 9 is_stmt 0 view .LVU125
 474 004e 6071     		strb	r0, [r4, #5]
 183:Core/Src/USER/rtc.c **** 	text[6]=(dienos.Date)/10+'0';
 475              		.loc 2 183 2 is_stmt 1 view .LVU126
 476              		.loc 2 183 17 is_stmt 0 view .LVU127
 477 0050 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 478              		.loc 2 183 26 view .LVU128
 479 0054 A3FB0213 		umull	r1, r3, r3, r2
 480 0058 DB08     		lsrs	r3, r3, #3
 481 005a 03F13001 		add	r1, r3, #48
 482              		.loc 2 183 9 view .LVU129
 483 005e A171     		strb	r1, [r4, #6]
 184:Core/Src/USER/rtc.c **** 	text[7]=(dienos.Date)%10+'0';
 484              		.loc 2 184 2 is_stmt 1 view .LVU130
 485              		.loc 2 184 26 is_stmt 0 view .LVU131
 486 0060 03EB8303 		add	r3, r3, r3, lsl #2
 487 0064 A2EB4303 		sub	r3, r2, r3, lsl #1
 488 0068 3033     		adds	r3, r3, #48
 489              		.loc 2 184 9 view .LVU132
 490 006a E371     		strb	r3, [r4, #7]
 185:Core/Src/USER/rtc.c **** 	text[8]=0;
 491              		.loc 2 185 2 is_stmt 1 view .LVU133
 492              		.loc 2 185 9 is_stmt 0 view .LVU134
 493 006c 0023     		movs	r3, #0
 494 006e 2372     		strb	r3, [r4, #8]
 186:Core/Src/USER/rtc.c **** }
 495              		.loc 2 186 1 view .LVU135
 496 0070 03B0     		add	sp, sp, #12
 497              	.LCFI9:
 498              		.cfi_def_cfa_offset 12
 499              		@ sp needed
 500 0072 30BD     		pop	{r4, r5, pc}
 501              	.LVL19:
 502              	.L28:
 503              		.loc 2 186 1 view .LVU136
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 20


 504              		.align	2
 505              	.L27:
 506 0074 00000000 		.word	hrtc
 507 0078 CDCCCCCC 		.word	-858993459
 508              		.cfi_endproc
 509              	.LFE74:
 511              		.section	.text.rtc_backup_date,"ax",%progbits
 512              		.align	1
 513              		.global	rtc_backup_date
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 517              		.fpu softvfp
 519              	rtc_backup_date:
 520              	.LFB75:
 187:Core/Src/USER/rtc.c **** 
 188:Core/Src/USER/rtc.c **** void rtc_backup_date(void)
 189:Core/Src/USER/rtc.c **** {
 521              		.loc 2 189 1 is_stmt 1 view -0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 8
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525 0000 30B5     		push	{r4, r5, lr}
 526              	.LCFI10:
 527              		.cfi_def_cfa_offset 12
 528              		.cfi_offset 4, -12
 529              		.cfi_offset 5, -8
 530              		.cfi_offset 14, -4
 531 0002 83B0     		sub	sp, sp, #12
 532              	.LCFI11:
 533              		.cfi_def_cfa_offset 24
 190:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 534              		.loc 2 190 1 view .LVU138
 191:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 535              		.loc 2 191 2 view .LVU139
 536              		.loc 2 191 5 is_stmt 0 view .LVU140
 537 0004 0121     		movs	r1, #1
 538 0006 1448     		ldr	r0, .L33
 539 0008 FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 540              	.LVL20:
 541              		.loc 2 191 4 view .LVU141
 542 000c 45F25103 		movw	r3, #20561
 543 0010 9842     		cmp	r0, r3
 544 0012 01D0     		beq	.L32
 545              	.L29:
 192:Core/Src/USER/rtc.c **** 	{
 193:Core/Src/USER/rtc.c **** 		HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 194:Core/Src/USER/rtc.c **** 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, (uint16_t) (dienos.Year<<8) + dienos.Month);	
 196:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 197:Core/Src/USER/rtc.c **** 	}
 198:Core/Src/USER/rtc.c **** }
 546              		.loc 2 198 1 view .LVU142
 547 0014 03B0     		add	sp, sp, #12
 548              	.LCFI12:
 549              		.cfi_remember_state
 550              		.cfi_def_cfa_offset 12
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 21


 551              		@ sp needed
 552 0016 30BD     		pop	{r4, r5, pc}
 553              	.L32:
 554              	.LCFI13:
 555              		.cfi_restore_state
 193:Core/Src/USER/rtc.c **** 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 556              		.loc 2 193 3 is_stmt 1 view .LVU143
 557 0018 0F4C     		ldr	r4, .L33
 558 001a 0022     		movs	r2, #0
 559 001c 01A9     		add	r1, sp, #4
 560 001e 2046     		mov	r0, r4
 561 0020 FFF7FEFF 		bl	HAL_RTC_GetDate
 562              	.LVL21:
 194:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, (uint16_t) (dienos.Year<<8) + dienos.Month);	
 563              		.loc 2 194 3 view .LVU144
 564 0024 0D4D     		ldr	r5, .L33+4
 565 0026 0022     		movs	r2, #0
 566 0028 2946     		mov	r1, r5
 567 002a 2046     		mov	r0, r4
 568 002c FFF7FEFF 		bl	HAL_RTC_GetTime
 569              	.LVL22:
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 570              		.loc 2 195 3 view .LVU145
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 571              		.loc 2 195 61 is_stmt 0 view .LVU146
 572 0030 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 573              		.loc 2 195 79 view .LVU147
 574 0034 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 195:Core/Src/USER/rtc.c **** 		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t) (dienos.Date<<8) + currTime.Hours);	
 575              		.loc 2 195 3 view .LVU148
 576 0038 03EB0222 		add	r2, r3, r2, lsl #8
 577 003c 0221     		movs	r1, #2
 578 003e 2046     		mov	r0, r4
 579 0040 FFF7FEFF 		bl	HAL_RTCEx_BKUPWrite
 580              	.LVL23:
 196:Core/Src/USER/rtc.c **** 	}
 581              		.loc 2 196 3 is_stmt 1 view .LVU149
 196:Core/Src/USER/rtc.c **** 	}
 582              		.loc 2 196 61 is_stmt 0 view .LVU150
 583 0044 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 196:Core/Src/USER/rtc.c **** 	}
 584              		.loc 2 196 81 view .LVU151
 585 0048 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 196:Core/Src/USER/rtc.c **** 	}
 586              		.loc 2 196 3 view .LVU152
 587 004a 03EB0222 		add	r2, r3, r2, lsl #8
 588 004e 0321     		movs	r1, #3
 589 0050 2046     		mov	r0, r4
 590 0052 FFF7FEFF 		bl	HAL_RTCEx_BKUPWrite
 591              	.LVL24:
 592              		.loc 2 198 1 view .LVU153
 593 0056 DDE7     		b	.L29
 594              	.L34:
 595              		.align	2
 596              	.L33:
 597 0058 00000000 		.word	hrtc
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 22


 598 005c 00000000 		.word	.LANCHOR1
 599              		.cfi_endproc
 600              	.LFE75:
 602              		.section	.text.rtc_int_init,"ax",%progbits
 603              		.align	1
 604              		.global	rtc_int_init
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu softvfp
 610              	rtc_int_init:
 611              	.LFB77:
 199:Core/Src/USER/rtc.c **** 
 200:Core/Src/USER/rtc.c **** void rtc_check_screwd_calendar(void)
 201:Core/Src/USER/rtc.c **** {
 202:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 203:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 204:Core/Src/USER/rtc.c **** 	{
 205:Core/Src/USER/rtc.c **** 		HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 206:Core/Src/USER/rtc.c **** 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 208:Core/Src/USER/rtc.c **** 		
 209:Core/Src/USER/rtc.c **** 		uint32_t tmp=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR2);
 210:Core/Src/USER/rtc.c **** 		uint32_t tmp2=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR3);	
 211:Core/Src/USER/rtc.c **** 	
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 213:Core/Src/USER/rtc.c **** 		if(now_was > now_is)
 214:Core/Src/USER/rtc.c **** 			{
 215:Core/Src/USER/rtc.c **** 			dienos.Year=(tmp >> 8);
 216:Core/Src/USER/rtc.c **** 			dienos.Month=tmp & 0x0F;
 217:Core/Src/USER/rtc.c **** 			dienos.Date=(tmp2 >> 8);
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 219:Core/Src/USER/rtc.c **** 			  {
 220:Core/Src/USER/rtc.c **** 				Error_Handler();
 221:Core/Src/USER/rtc.c **** 			  }
 222:Core/Src/USER/rtc.c **** 			 rtc_backup_date();
 223:Core/Src/USER/rtc.c **** 			}
 224:Core/Src/USER/rtc.c **** 	}
 225:Core/Src/USER/rtc.c **** }
 226:Core/Src/USER/rtc.c **** 
 227:Core/Src/USER/rtc.c **** 
 228:Core/Src/USER/rtc.c **** /* INT INT INT INT INT INT INT INT INT INT INT INT INT INT INT INT */
 229:Core/Src/USER/rtc.c **** 
 230:Core/Src/USER/rtc.c **** /* ijungti RTC pertraukimus */
 231:Core/Src/USER/rtc.c **** void rtc_int_init(void)
 232:Core/Src/USER/rtc.c **** {
 612              		.loc 2 232 1 is_stmt 1 view -0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 233:Core/Src/USER/rtc.c **** 	__HAL_RTC_SECOND_ENABLE_IT(&hrtc,RTC_IT_SEC); //turn on RTC clock seconds interrupt
 617              		.loc 2 233 2 view .LVU155
 618 0000 034B     		ldr	r3, .L36
 619 0002 1A68     		ldr	r2, [r3]
 620 0004 1368     		ldr	r3, [r2]
 621 0006 43F00103 		orr	r3, r3, #1
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 23


 622 000a 1360     		str	r3, [r2]
 234:Core/Src/USER/rtc.c **** }
 623              		.loc 2 234 1 is_stmt 0 view .LVU156
 624 000c 7047     		bx	lr
 625              	.L37:
 626 000e 00BF     		.align	2
 627              	.L36:
 628 0010 00000000 		.word	hrtc
 629              		.cfi_endproc
 630              	.LFE77:
 632              		.section	.text.circle_reset,"ax",%progbits
 633              		.align	1
 634              		.global	circle_reset
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu softvfp
 640              	circle_reset:
 641              	.LVL25:
 642              	.LFB79:
 643              		.file 3 "Core/Src/USER/circular_buffer.c"
   1:Core/Src/USER/circular_buffer.c **** /* ********************************************* */
   2:Core/Src/USER/circular_buffer.c **** /* (c)2022 by www.vabolis.lt, Kaunas             */
   3:Core/Src/USER/circular_buffer.c **** /**
   4:Core/Src/USER/circular_buffer.c ****   **********************************************
   5:Core/Src/USER/circular_buffer.c ****   * @file           : circular_buffer.c
   6:Core/Src/USER/circular_buffer.c ****   * @version        : 1.0
   7:Core/Src/USER/circular_buffer.c ****   * @brief          : circular buffer for uart/usb
   8:Core/Src/USER/circular_buffer.c **** **/  
   9:Core/Src/USER/circular_buffer.c **** /* ********************************************* */
  10:Core/Src/USER/circular_buffer.c **** 
  11:Core/Src/USER/circular_buffer.c **** #include "circular_buffer.h"
  12:Core/Src/USER/circular_buffer.c **** 
  13:Core/Src/USER/circular_buffer.c **** /* INSTRUKCIJA
  14:Core/Src/USER/circular_buffer.c **** #define BUFFER_SIZE 32
  15:Core/Src/USER/circular_buffer.c **** 
  16:Core/Src/USER/circular_buffer.c **** unsigned char testas[BUFFER_SIZE];
  17:Core/Src/USER/circular_buffer.c **** CCBuf cc; //struktura
  18:Core/Src/USER/circular_buffer.c **** //init
  19:Core/Src/USER/circular_buffer.c **** cc.buffer=testas;
  20:Core/Src/USER/circular_buffer.c **** circle_reset(&cc,BUFFER_SIZE);
  21:Core/Src/USER/circular_buffer.c **** 
  22:Core/Src/USER/circular_buffer.c **** //naudojimas
  23:Core/Src/USER/circular_buffer.c **** 
  24:Core/Src/USER/circular_buffer.c **** while(circle_available(&cc)>0) {a=circle_pull(&cc); naudoti duomenys}
  25:Core/Src/USER/circular_buffer.c **** 					
  26:Core/Src/USER/circular_buffer.c **** // uart callback
  27:Core/Src/USER/circular_buffer.c **** circle_push(&cc , baitinisbuferis); // push received byte to circular buffer
  28:Core/Src/USER/circular_buffer.c **** 					
  29:Core/Src/USER/circular_buffer.c **** 
  30:Core/Src/USER/circular_buffer.c **** ************* */
  31:Core/Src/USER/circular_buffer.c **** 
  32:Core/Src/USER/circular_buffer.c **** 
  33:Core/Src/USER/circular_buffer.c **** 
  34:Core/Src/USER/circular_buffer.c **** void circle_reset(CCBuf *c, size_t size)
  35:Core/Src/USER/circular_buffer.c **** {
 644              		.loc 3 35 1 is_stmt 1 view -0
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 24


 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              		@ link register save eliminated.
  36:Core/Src/USER/circular_buffer.c **** 	c->head=0;
 649              		.loc 3 36 2 view .LVU158
 650              		.loc 3 36 9 is_stmt 0 view .LVU159
 651 0000 0023     		movs	r3, #0
 652 0002 4360     		str	r3, [r0, #4]
  37:Core/Src/USER/circular_buffer.c **** 	c->tail=0;
 653              		.loc 3 37 2 is_stmt 1 view .LVU160
 654              		.loc 3 37 9 is_stmt 0 view .LVU161
 655 0004 8360     		str	r3, [r0, #8]
  38:Core/Src/USER/circular_buffer.c **** 	c->max=size; //sizeof(c->buffer); <-- negauna sitos informacijos
 656              		.loc 3 38 2 is_stmt 1 view .LVU162
 657              		.loc 3 38 8 is_stmt 0 view .LVU163
 658 0006 0161     		str	r1, [r0, #16]
  39:Core/Src/USER/circular_buffer.c **** 	c->count=0;
 659              		.loc 3 39 2 is_stmt 1 view .LVU164
 660              		.loc 3 39 10 is_stmt 0 view .LVU165
 661 0008 C360     		str	r3, [r0, #12]
  40:Core/Src/USER/circular_buffer.c **** }
 662              		.loc 3 40 1 view .LVU166
 663 000a 7047     		bx	lr
 664              		.cfi_endproc
 665              	.LFE79:
 667              		.section	.text.circle_push,"ax",%progbits
 668              		.align	1
 669              		.global	circle_push
 670              		.syntax unified
 671              		.thumb
 672              		.thumb_func
 673              		.fpu softvfp
 675              	circle_push:
 676              	.LVL26:
 677              	.LFB80:
  41:Core/Src/USER/circular_buffer.c **** 
  42:Core/Src/USER/circular_buffer.c **** void circle_push(CCBuf *c,unsigned char b)
  43:Core/Src/USER/circular_buffer.c **** {
 678              		.loc 3 43 1 is_stmt 1 view -0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 0, uses_anonymous_args = 0
 682              		@ link register save eliminated.
  44:Core/Src/USER/circular_buffer.c **** 	c->buffer[c->head]=b;
 683              		.loc 3 44 2 view .LVU168
 684              		.loc 3 44 3 is_stmt 0 view .LVU169
 685 0000 0268     		ldr	r2, [r0]
 686              		.loc 3 44 13 view .LVU170
 687 0002 4368     		ldr	r3, [r0, #4]
 688              		.loc 3 44 20 view .LVU171
 689 0004 D154     		strb	r1, [r2, r3]
  45:Core/Src/USER/circular_buffer.c **** 	c->head++; if(c->head == c->max) {c->head=0;}
 690              		.loc 3 45 2 is_stmt 1 view .LVU172
 691              		.loc 3 45 3 is_stmt 0 view .LVU173
 692 0006 4368     		ldr	r3, [r0, #4]
 693              		.loc 3 45 9 view .LVU174
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 25


 694 0008 0133     		adds	r3, r3, #1
 695 000a 4360     		str	r3, [r0, #4]
 696              		.loc 3 45 13 is_stmt 1 view .LVU175
 697              		.loc 3 45 28 is_stmt 0 view .LVU176
 698 000c 0269     		ldr	r2, [r0, #16]
 699              		.loc 3 45 15 view .LVU177
 700 000e 9342     		cmp	r3, r2
 701 0010 03D0     		beq	.L41
 702              	.L40:
  46:Core/Src/USER/circular_buffer.c **** 	c->count++;
 703              		.loc 3 46 2 is_stmt 1 view .LVU178
 704              		.loc 3 46 3 is_stmt 0 view .LVU179
 705 0012 C368     		ldr	r3, [r0, #12]
 706              		.loc 3 46 10 view .LVU180
 707 0014 0133     		adds	r3, r3, #1
 708 0016 C360     		str	r3, [r0, #12]
  47:Core/Src/USER/circular_buffer.c **** 	//if(c->count == c->max) {c->count=c->max;} //error
  48:Core/Src/USER/circular_buffer.c **** }
 709              		.loc 3 48 1 view .LVU181
 710 0018 7047     		bx	lr
 711              	.L41:
  45:Core/Src/USER/circular_buffer.c **** 	c->count++;
 712              		.loc 3 45 36 is_stmt 1 discriminator 1 view .LVU182
  45:Core/Src/USER/circular_buffer.c **** 	c->count++;
 713              		.loc 3 45 43 is_stmt 0 discriminator 1 view .LVU183
 714 001a 0023     		movs	r3, #0
 715 001c 4360     		str	r3, [r0, #4]
 716 001e F8E7     		b	.L40
 717              		.cfi_endproc
 718              	.LFE80:
 720              		.section	.text.circle_pull,"ax",%progbits
 721              		.align	1
 722              		.global	circle_pull
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 726              		.fpu softvfp
 728              	circle_pull:
 729              	.LVL27:
 730              	.LFB81:
  49:Core/Src/USER/circular_buffer.c **** 
  50:Core/Src/USER/circular_buffer.c **** unsigned char circle_pull(CCBuf *c)
  51:Core/Src/USER/circular_buffer.c **** {
 731              		.loc 3 51 1 is_stmt 1 view -0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735              		@ link register save eliminated.
 736              		.loc 3 51 1 is_stmt 0 view .LVU185
 737 0000 0346     		mov	r3, r0
  52:Core/Src/USER/circular_buffer.c **** unsigned char b;
 738              		.loc 3 52 1 is_stmt 1 view .LVU186
  53:Core/Src/USER/circular_buffer.c **** 	b=c->buffer[c->tail];
 739              		.loc 3 53 2 view .LVU187
 740              		.loc 3 53 5 is_stmt 0 view .LVU188
 741 0002 0168     		ldr	r1, [r0]
 742              		.loc 3 53 15 view .LVU189
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 26


 743 0004 8268     		ldr	r2, [r0, #8]
 744              		.loc 3 53 3 view .LVU190
 745 0006 885C     		ldrb	r0, [r1, r2]	@ zero_extendqisi2
 746              	.LVL28:
  54:Core/Src/USER/circular_buffer.c **** 	c->tail++;
 747              		.loc 3 54 2 is_stmt 1 view .LVU191
 748              		.loc 3 54 9 is_stmt 0 view .LVU192
 749 0008 0132     		adds	r2, r2, #1
 750 000a 9A60     		str	r2, [r3, #8]
  55:Core/Src/USER/circular_buffer.c **** 	if(c->tail == c->max) {c->tail=0;}
 751              		.loc 3 55 2 is_stmt 1 view .LVU193
 752              		.loc 3 55 17 is_stmt 0 view .LVU194
 753 000c 1969     		ldr	r1, [r3, #16]
 754              		.loc 3 55 4 view .LVU195
 755 000e 8A42     		cmp	r2, r1
 756 0010 03D0     		beq	.L44
 757              	.L43:
  56:Core/Src/USER/circular_buffer.c **** 	c->count--;
 758              		.loc 3 56 2 is_stmt 1 view .LVU196
 759              		.loc 3 56 3 is_stmt 0 view .LVU197
 760 0012 DA68     		ldr	r2, [r3, #12]
 761              		.loc 3 56 10 view .LVU198
 762 0014 013A     		subs	r2, r2, #1
 763 0016 DA60     		str	r2, [r3, #12]
  57:Core/Src/USER/circular_buffer.c **** 	//if(c->count == c->max){c->count=0;} //error
  58:Core/Src/USER/circular_buffer.c **** return b;
 764              		.loc 3 58 1 is_stmt 1 view .LVU199
  59:Core/Src/USER/circular_buffer.c **** }
 765              		.loc 3 59 1 is_stmt 0 view .LVU200
 766 0018 7047     		bx	lr
 767              	.L44:
  55:Core/Src/USER/circular_buffer.c **** 	c->count--;
 768              		.loc 3 55 25 is_stmt 1 discriminator 1 view .LVU201
  55:Core/Src/USER/circular_buffer.c **** 	c->count--;
 769              		.loc 3 55 32 is_stmt 0 discriminator 1 view .LVU202
 770 001a 0022     		movs	r2, #0
 771 001c 9A60     		str	r2, [r3, #8]
 772 001e F8E7     		b	.L43
 773              		.cfi_endproc
 774              	.LFE81:
 776              		.section	.text.circle_push_buf,"ax",%progbits
 777              		.align	1
 778              		.global	circle_push_buf
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 782              		.fpu softvfp
 784              	circle_push_buf:
 785              	.LVL29:
 786              	.LFB82:
  60:Core/Src/USER/circular_buffer.c **** 
  61:Core/Src/USER/circular_buffer.c **** void circle_push_buf(CCBuf *c, unsigned char *b, size_t len)
  62:Core/Src/USER/circular_buffer.c **** {
 787              		.loc 3 62 1 is_stmt 1 view -0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 27


 791              		.loc 3 62 1 is_stmt 0 view .LVU204
 792 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 793              	.LCFI14:
 794              		.cfi_def_cfa_offset 24
 795              		.cfi_offset 3, -24
 796              		.cfi_offset 4, -20
 797              		.cfi_offset 5, -16
 798              		.cfi_offset 6, -12
 799              		.cfi_offset 7, -8
 800              		.cfi_offset 14, -4
 801 0002 0746     		mov	r7, r0
 802 0004 0E46     		mov	r6, r1
 803 0006 1546     		mov	r5, r2
  63:Core/Src/USER/circular_buffer.c **** size_t i;
 804              		.loc 3 63 1 is_stmt 1 view .LVU205
  64:Core/Src/USER/circular_buffer.c **** for (i=0;i<len;i++){circle_push(c,b[i]);}
 805              		.loc 3 64 1 view .LVU206
 806              	.LVL30:
 807              		.loc 3 64 7 is_stmt 0 view .LVU207
 808 0008 0024     		movs	r4, #0
 809              	.LVL31:
 810              	.L46:
 811              		.loc 3 64 10 is_stmt 1 discriminator 1 view .LVU208
 812              		.loc 3 64 1 is_stmt 0 discriminator 1 view .LVU209
 813 000a AC42     		cmp	r4, r5
 814 000c 05D2     		bcs	.L49
 815              		.loc 3 64 21 is_stmt 1 discriminator 3 view .LVU210
 816 000e 315D     		ldrb	r1, [r6, r4]	@ zero_extendqisi2
 817 0010 3846     		mov	r0, r7
 818 0012 FFF7FEFF 		bl	circle_push
 819              	.LVL32:
 820              		.loc 3 64 16 discriminator 3 view .LVU211
 821              		.loc 3 64 17 is_stmt 0 discriminator 3 view .LVU212
 822 0016 0134     		adds	r4, r4, #1
 823              	.LVL33:
 824              		.loc 3 64 17 discriminator 3 view .LVU213
 825 0018 F7E7     		b	.L46
 826              	.L49:
  65:Core/Src/USER/circular_buffer.c **** }
 827              		.loc 3 65 1 view .LVU214
 828 001a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 829              		.loc 3 65 1 view .LVU215
 830              		.cfi_endproc
 831              	.LFE82:
 833              		.section	.text.circle_available,"ax",%progbits
 834              		.align	1
 835              		.global	circle_available
 836              		.syntax unified
 837              		.thumb
 838              		.thumb_func
 839              		.fpu softvfp
 841              	circle_available:
 842              	.LVL34:
 843              	.LFB83:
  66:Core/Src/USER/circular_buffer.c **** 
  67:Core/Src/USER/circular_buffer.c **** size_t circle_available(CCBuf *c)
  68:Core/Src/USER/circular_buffer.c **** {
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 28


 844              		.loc 3 68 1 is_stmt 1 view -0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
  69:Core/Src/USER/circular_buffer.c **** return c->count;
 849              		.loc 3 69 1 view .LVU217
  70:Core/Src/USER/circular_buffer.c **** }
 850              		.loc 3 70 1 is_stmt 0 view .LVU218
 851 0000 C068     		ldr	r0, [r0, #12]
 852              	.LVL35:
 853              		.loc 3 70 1 view .LVU219
 854 0002 7047     		bx	lr
 855              		.cfi_endproc
 856              	.LFE83:
 858              		.section	.text.circle_free,"ax",%progbits
 859              		.align	1
 860              		.global	circle_free
 861              		.syntax unified
 862              		.thumb
 863              		.thumb_func
 864              		.fpu softvfp
 866              	circle_free:
 867              	.LVL36:
 868              	.LFB84:
  71:Core/Src/USER/circular_buffer.c **** size_t circle_free(CCBuf *c)
  72:Core/Src/USER/circular_buffer.c **** {
 869              		.loc 3 72 1 is_stmt 1 view -0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              		@ link register save eliminated.
  73:Core/Src/USER/circular_buffer.c **** return c->max - c->count;
 874              		.loc 3 73 1 view .LVU221
 875              		.loc 3 73 9 is_stmt 0 view .LVU222
 876 0000 0269     		ldr	r2, [r0, #16]
 877              		.loc 3 73 18 view .LVU223
 878 0002 C068     		ldr	r0, [r0, #12]
 879              	.LVL37:
  74:Core/Src/USER/circular_buffer.c **** }
 880              		.loc 3 74 1 view .LVU224
 881 0004 101A     		subs	r0, r2, r0
 882 0006 7047     		bx	lr
 883              		.cfi_endproc
 884              	.LFE84:
 886              		.section	.text.user_usb_rx,"ax",%progbits
 887              		.align	1
 888              		.global	user_usb_rx
 889              		.syntax unified
 890              		.thumb
 891              		.thumb_func
 892              		.fpu softvfp
 894              	user_usb_rx:
 895              	.LVL38:
 896              	.LFB85:
 897              		.file 4 "Core/Src/USER/user.c"
   1:Core/Src/USER/user.c **** /* ***********************************************
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 29


   2:Core/Src/USER/user.c **** **                                              **
   3:Core/Src/USER/user.c **** ** 40mA   RTC clock V1.0 www.vabolis.lt (c)2023 **
   4:Core/Src/USER/user.c **** **                                              **
   5:Core/Src/USER/user.c **** ************************************************ */
   6:Core/Src/USER/user.c **** 
   7:Core/Src/USER/user.c **** #include "user.h"
   8:Core/Src/USER/user.c **** 
   9:Core/Src/USER/user.c **** 
  10:Core/Src/USER/user.c **** #include "rtc.c"
  11:Core/Src/USER/user.c **** #include "circular_buffer.c"
  12:Core/Src/USER/user.c **** 
  13:Core/Src/USER/user.c **** extern IWDG_HandleTypeDef hiwdg;
  14:Core/Src/USER/user.c **** extern RTC_HandleTypeDef hrtc;
  15:Core/Src/USER/user.c **** extern TIM_HandleTypeDef htim1;
  16:Core/Src/USER/user.c **** 
  17:Core/Src/USER/user.c **** 
  18:Core/Src/USER/user.c **** #define BUFFER_SIZE 64
  19:Core/Src/USER/user.c **** unsigned char testas[BUFFER_SIZE];
  20:Core/Src/USER/user.c **** 
  21:Core/Src/USER/user.c **** CCBuf cc; //struktura
  22:Core/Src/USER/user.c **** 
  23:Core/Src/USER/user.c **** 
  24:Core/Src/USER/user.c **** 
  25:Core/Src/USER/user.c **** 
  26:Core/Src/USER/user.c **** void user_usb_rx(uint8_t* Buf, uint32_t *Len)
  27:Core/Src/USER/user.c **** {
 898              		.loc 4 27 1 is_stmt 1 view -0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902              		.loc 4 27 1 is_stmt 0 view .LVU226
 903 0000 70B5     		push	{r4, r5, r6, lr}
 904              	.LCFI15:
 905              		.cfi_def_cfa_offset 16
 906              		.cfi_offset 4, -16
 907              		.cfi_offset 5, -12
 908              		.cfi_offset 6, -8
 909              		.cfi_offset 14, -4
 910 0002 0646     		mov	r6, r0
 911 0004 0D46     		mov	r5, r1
  28:Core/Src/USER/user.c **** unsigned char i,a;
 912              		.loc 4 28 1 is_stmt 1 view .LVU227
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 913              		.loc 4 29 1 view .LVU228
 914              	.LVL39:
 915              		.loc 4 29 7 is_stmt 0 view .LVU229
 916 0006 0024     		movs	r4, #0
 917              		.loc 4 29 1 view .LVU230
 918 0008 04E0     		b	.L53
 919              	.LVL40:
 920              	.L58:
  30:Core/Src/USER/user.c **** 	{
  31:Core/Src/USER/user.c **** 		a=Buf[i];
  32:Core/Src/USER/user.c **** 		if (a>10) circle_push(&cc , a);
 921              		.loc 4 32 13 is_stmt 1 discriminator 1 view .LVU231
 922 000a 0648     		ldr	r0, .L59
 923 000c FFF7FEFF 		bl	circle_push
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 30


 924              	.LVL41:
 925              	.L54:
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 926              		.loc 4 29 17 discriminator 2 view .LVU232
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 927              		.loc 4 29 18 is_stmt 0 discriminator 2 view .LVU233
 928 0010 0134     		adds	r4, r4, #1
 929              	.LVL42:
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 930              		.loc 4 29 18 discriminator 2 view .LVU234
 931 0012 E4B2     		uxtb	r4, r4
 932              	.LVL43:
 933              	.L53:
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 934              		.loc 4 29 10 is_stmt 1 discriminator 1 view .LVU235
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 935              		.loc 4 29 12 is_stmt 0 discriminator 1 view .LVU236
 936 0014 2B68     		ldr	r3, [r5]
  29:Core/Src/USER/user.c **** for (i=0;i<*Len;i++)
 937              		.loc 4 29 1 discriminator 1 view .LVU237
 938 0016 9C42     		cmp	r4, r3
 939 0018 03D2     		bcs	.L57
  31:Core/Src/USER/user.c **** 		if (a>10) circle_push(&cc , a);
 940              		.loc 4 31 3 is_stmt 1 view .LVU238
  31:Core/Src/USER/user.c **** 		if (a>10) circle_push(&cc , a);
 941              		.loc 4 31 4 is_stmt 0 view .LVU239
 942 001a 315D     		ldrb	r1, [r6, r4]	@ zero_extendqisi2
 943              	.LVL44:
 944              		.loc 4 32 3 is_stmt 1 view .LVU240
 945              		.loc 4 32 6 is_stmt 0 view .LVU241
 946 001c 0A29     		cmp	r1, #10
 947 001e F7D9     		bls	.L54
 948 0020 F3E7     		b	.L58
 949              	.LVL45:
 950              	.L57:
  33:Core/Src/USER/user.c **** 	}
  34:Core/Src/USER/user.c **** }
 951              		.loc 4 34 1 view .LVU242
 952 0022 70BD     		pop	{r4, r5, r6, pc}
 953              	.LVL46:
 954              	.L60:
 955              		.loc 4 34 1 view .LVU243
 956              		.align	2
 957              	.L59:
 958 0024 00000000 		.word	cc
 959              		.cfi_endproc
 960              	.LFE85:
 962              		.section	.text.user_init,"ax",%progbits
 963              		.align	1
 964              		.global	user_init
 965              		.syntax unified
 966              		.thumb
 967              		.thumb_func
 968              		.fpu softvfp
 970              	user_init:
 971              	.LFB86:
  35:Core/Src/USER/user.c **** 
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 31


  36:Core/Src/USER/user.c **** void user_init(void)
  37:Core/Src/USER/user.c **** {
 972              		.loc 4 37 1 is_stmt 1 view -0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 0
 975              		@ frame_needed = 0, uses_anonymous_args = 0
 976 0000 10B5     		push	{r4, lr}
 977              	.LCFI16:
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 4, -8
 980              		.cfi_offset 14, -4
  38:Core/Src/USER/user.c **** 	cc.buffer=testas;
 981              		.loc 4 38 2 view .LVU245
 982              		.loc 4 38 11 is_stmt 0 view .LVU246
 983 0002 0848     		ldr	r0, .L63
 984 0004 084B     		ldr	r3, .L63+4
 985 0006 0360     		str	r3, [r0]
  39:Core/Src/USER/user.c **** 	circle_reset(&cc,BUFFER_SIZE);			//init circle buffer
 986              		.loc 4 39 2 is_stmt 1 view .LVU247
 987 0008 4021     		movs	r1, #64
 988 000a FFF7FEFF 		bl	circle_reset
 989              	.LVL47:
  40:Core/Src/USER/user.c **** 	rtc_int_init();
 990              		.loc 4 40 2 view .LVU248
 991 000e FFF7FEFF 		bl	rtc_int_init
 992              	.LVL48:
  41:Core/Src/USER/user.c **** 	
  42:Core/Src/USER/user.c **** 	HAL_TIM_Base_Start(&htim1);
 993              		.loc 4 42 2 view .LVU249
 994 0012 064C     		ldr	r4, .L63+8
 995 0014 2046     		mov	r0, r4
 996 0016 FFF7FEFF 		bl	HAL_TIM_Base_Start
 997              	.LVL49:
  43:Core/Src/USER/user.c **** 	//HAL_TIM_Base_Start_IT(&htim1);
  44:Core/Src/USER/user.c **** __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,5*255);
 998              		.loc 4 44 1 view .LVU250
 999 001a 2368     		ldr	r3, [r4]
 1000 001c 40F2FB42 		movw	r2, #1275
 1001 0020 5A63     		str	r2, [r3, #52]
  45:Core/Src/USER/user.c **** 	//HAL_RTCEx_SetSmoothCalib(&hrtc,0,0,10); // du nuliai nes F1 nera. paskutinis- skaicius 0-7F, tik
  46:Core/Src/USER/user.c **** }
 1002              		.loc 4 46 1 is_stmt 0 view .LVU251
 1003 0022 10BD     		pop	{r4, pc}
 1004              	.L64:
 1005              		.align	2
 1006              	.L63:
 1007 0024 00000000 		.word	cc
 1008 0028 00000000 		.word	testas
 1009 002c 00000000 		.word	htim1
 1010              		.cfi_endproc
 1011              	.LFE86:
 1013              		.section	.text.user_seconds_job,"ax",%progbits
 1014              		.align	1
 1015              		.global	user_seconds_job
 1016              		.syntax unified
 1017              		.thumb
 1018              		.thumb_func
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 32


 1019              		.fpu softvfp
 1021              	user_seconds_job:
 1022              	.LFB89:
  47:Core/Src/USER/user.c **** 
  48:Core/Src/USER/user.c **** 
  49:Core/Src/USER/user.c **** 
  50:Core/Src/USER/user.c **** void commandcom(char * txt) // network (UART,USB) command interpreter
  51:Core/Src/USER/user.c **** {
  52:Core/Src/USER/user.c **** 
  53:Core/Src/USER/user.c **** if (txt[0] !='A' || txt[1]!='T') return;
  54:Core/Src/USER/user.c **** 
  55:Core/Src/USER/user.c **** 	switch(txt[2])
  56:Core/Src/USER/user.c **** 	{
  57:Core/Src/USER/user.c **** 		case 'T':
  58:Core/Src/USER/user.c **** 			rtc_set_time_text(txt+3);
  59:Core/Src/USER/user.c **** 		break;
  60:Core/Src/USER/user.c **** 		case 'D':
  61:Core/Src/USER/user.c **** 			rtc_set_date_text(txt+3);		
  62:Core/Src/USER/user.c **** 		break;
  63:Core/Src/USER/user.c **** 		case 'I':
  64:Core/Src/USER/user.c **** 			CDC_Transmit_FS((uint8_t*) "9H CLOCK\r\n(c)2023 Vabolis.lt\r\n",33);
  65:Core/Src/USER/user.c **** 		break;
  66:Core/Src/USER/user.c **** 		case 'A':
  67:Core/Src/USER/user.c **** 			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,55*255);
  68:Core/Src/USER/user.c **** 		break;
  69:Core/Src/USER/user.c **** 	}
  70:Core/Src/USER/user.c **** }
  71:Core/Src/USER/user.c **** 
  72:Core/Src/USER/user.c **** 
  73:Core/Src/USER/user.c **** void user_loop(void)
  74:Core/Src/USER/user.c **** {
  75:Core/Src/USER/user.c **** char a;
  76:Core/Src/USER/user.c **** char txt[32];
  77:Core/Src/USER/user.c **** unsigned char txtp=0;
  78:Core/Src/USER/user.c **** 
  79:Core/Src/USER/user.c **** while(1)
  80:Core/Src/USER/user.c **** 	{
  81:Core/Src/USER/user.c **** 	HAL_IWDG_Refresh(&hiwdg); //watchdogas
  82:Core/Src/USER/user.c **** 	while(circle_available(&cc)>0) 
  83:Core/Src/USER/user.c **** 		{
  84:Core/Src/USER/user.c **** 			a=circle_pull(&cc);
  85:Core/Src/USER/user.c **** 			
  86:Core/Src/USER/user.c **** 			if (a>=' ' && a<='z')
  87:Core/Src/USER/user.c **** 			{
  88:Core/Src/USER/user.c **** 				txt[txtp]=a;
  89:Core/Src/USER/user.c **** 				txtp++;
  90:Core/Src/USER/user.c **** 				txt[txtp]=0;
  91:Core/Src/USER/user.c **** 				if (txtp >30) {txtp=0;}
  92:Core/Src/USER/user.c **** 			}
  93:Core/Src/USER/user.c **** 			else if (a<' ')
  94:Core/Src/USER/user.c **** 			{
  95:Core/Src/USER/user.c **** 				if (txtp>2)commandcom(txt);
  96:Core/Src/USER/user.c **** 				txt[0]=0;
  97:Core/Src/USER/user.c **** 				txtp=0;
  98:Core/Src/USER/user.c **** 			}
  99:Core/Src/USER/user.c **** 		}
 100:Core/Src/USER/user.c **** 	}
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 33


 101:Core/Src/USER/user.c **** } /* be isejimo is loop! */
 102:Core/Src/USER/user.c **** 
 103:Core/Src/USER/user.c **** 
 104:Core/Src/USER/user.c **** 
 105:Core/Src/USER/user.c **** void user_seconds_job(void)
 106:Core/Src/USER/user.c **** {
 1023              		.loc 4 106 1 is_stmt 1 view -0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 0
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027 0000 08B5     		push	{r3, lr}
 1028              	.LCFI17:
 1029              		.cfi_def_cfa_offset 8
 1030              		.cfi_offset 3, -8
 1031              		.cfi_offset 14, -4
 107:Core/Src/USER/user.c **** 	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 1032              		.loc 4 107 2 view .LVU253
 1033 0002 0022     		movs	r2, #0
 1034 0004 0449     		ldr	r1, .L67
 1035 0006 0548     		ldr	r0, .L67+4
 1036 0008 FFF7FEFF 		bl	HAL_RTC_GetTime
 1037              	.LVL50:
 108:Core/Src/USER/user.c **** 
 109:Core/Src/USER/user.c **** 	HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 1038              		.loc 4 109 2 view .LVU254
 1039 000c 0121     		movs	r1, #1
 1040 000e 0448     		ldr	r0, .L67+8
 1041 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1042              	.LVL51:
 110:Core/Src/USER/user.c **** 
 111:Core/Src/USER/user.c **** }
 1043              		.loc 4 111 1 is_stmt 0 view .LVU255
 1044 0014 08BD     		pop	{r3, pc}
 1045              	.L68:
 1046 0016 00BF     		.align	2
 1047              	.L67:
 1048 0018 00000000 		.word	.LANCHOR1
 1049 001c 00000000 		.word	hrtc
 1050 0020 00080140 		.word	1073809408
 1051              		.cfi_endproc
 1052              	.LFE89:
 1054              		.section	.text.HAL_RTCEx_RTCEventCallback,"ax",%progbits
 1055              		.align	1
 1056              		.global	HAL_RTCEx_RTCEventCallback
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu softvfp
 1062              	HAL_RTCEx_RTCEventCallback:
 1063              	.LVL52:
 1064              	.LFB78:
 235:Core/Src/USER/rtc.c **** 
 236:Core/Src/USER/rtc.c **** 
 237:Core/Src/USER/rtc.c **** /**
 238:Core/Src/USER/rtc.c ****   * @brief  Second event callback.
 239:Core/Src/USER/rtc.c **** **/
 240:Core/Src/USER/rtc.c **** /* kas sekunde, turi buti ijungtas INT */
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 34


 241:Core/Src/USER/rtc.c **** void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
 242:Core/Src/USER/rtc.c **** {
 1065              		.loc 2 242 1 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069              		.loc 2 242 1 is_stmt 0 view .LVU257
 1070 0000 08B5     		push	{r3, lr}
 1071              	.LCFI18:
 1072              		.cfi_def_cfa_offset 8
 1073              		.cfi_offset 3, -8
 1074              		.cfi_offset 14, -4
 243:Core/Src/USER/rtc.c **** 	user_seconds_job();
 1075              		.loc 2 243 2 is_stmt 1 view .LVU258
 1076 0002 FFF7FEFF 		bl	user_seconds_job
 1077              	.LVL53:
 244:Core/Src/USER/rtc.c **** 	//if(LastHour != currTime.Hours) {rtc_backup_date(); LastHour=currTime.Hours;}
 245:Core/Src/USER/rtc.c **** }...
 1078              		.loc 2 245 1 is_stmt 0 view .LVU259
 1079 0006 08BD     		pop	{r3, pc}
 1080              		.cfi_endproc
 1081              	.LFE78:
 1083              		.section	.text.Error_Handler,"ax",%progbits
 1084              		.align	1
 1085              		.global	Error_Handler
 1086              		.syntax unified
 1087              		.thumb
 1088              		.thumb_func
 1089              		.fpu softvfp
 1091              	Error_Handler:
 1092              	.LFB96:
 386:Core/Src/main.c **** 
 387:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c **** /* USER CODE END 4 */
 390:Core/Src/main.c **** 
 391:Core/Src/main.c **** /**
 392:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 393:Core/Src/main.c ****   * @retval None
 394:Core/Src/main.c ****   */
 395:Core/Src/main.c **** void Error_Handler(void)
 396:Core/Src/main.c **** {
 1093              		.loc 1 396 1 is_stmt 1 view -0
 1094              		.cfi_startproc
 1095              		@ Volatile: function does not return.
 1096              		@ args = 0, pretend = 0, frame = 0
 1097              		@ frame_needed = 0, uses_anonymous_args = 0
 1098              		@ link register save eliminated.
 397:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 398:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 399:Core/Src/main.c ****   __disable_irq();
 1099              		.loc 1 399 3 view .LVU261
 1100              	.LBB6:
 1101              	.LBI6:
 1102              		.file 5 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 35


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 36


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 37


 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1103              		.loc 5 140 27 view .LVU262
 1104              	.LBB7:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1105              		.loc 5 142 3 view .LVU263
 1106              		.syntax unified
 1107              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1108 0000 72B6     		cpsid i
 1109              	@ 0 "" 2
 1110              		.thumb
 1111              		.syntax unified
 1112              	.L72:
 1113              	.LBE7:
 1114              	.LBE6:
 400:Core/Src/main.c ****   while (1)
 1115              		.loc 1 400 3 discriminator 1 view .LVU264
 401:Core/Src/main.c ****   {
 402:Core/Src/main.c ****   }
 1116              		.loc 1 402 3 discriminator 1 view .LVU265
 400:Core/Src/main.c ****   while (1)
 1117              		.loc 1 400 9 discriminator 1 view .LVU266
 1118 0002 FEE7     		b	.L72
 1119              		.cfi_endproc
 1120              	.LFE96:
 1122              		.section	.text.rtc_set_date_text,"ax",%progbits
 1123              		.align	1
 1124              		.global	rtc_set_date_text
 1125              		.syntax unified
 1126              		.thumb
 1127              		.thumb_func
 1128              		.fpu softvfp
 1130              	rtc_set_date_text:
 1131              	.LVL54:
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 38


 1132              	.LFB70:
  95:Core/Src/USER/rtc.c **** {
 1133              		.loc 2 95 1 view -0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 8
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
  95:Core/Src/USER/rtc.c **** {
 1137              		.loc 2 95 1 is_stmt 0 view .LVU268
 1138 0000 10B5     		push	{r4, lr}
 1139              	.LCFI19:
 1140              		.cfi_def_cfa_offset 8
 1141              		.cfi_offset 4, -8
 1142              		.cfi_offset 14, -4
 1143 0002 82B0     		sub	sp, sp, #8
 1144              	.LCFI20:
 1145              		.cfi_def_cfa_offset 16
 1146 0004 0446     		mov	r4, r0
  96:Core/Src/USER/rtc.c **** filter_string(Buf);
 1147              		.loc 2 96 1 is_stmt 1 view .LVU269
 1148 0006 FFF7FEFF 		bl	filter_string
 1149              	.LVL55:
  99:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 1150              		.loc 2 99 1 view .LVU270
 101:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1151              		.loc 2 101 1 view .LVU271
 101:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1152              		.loc 2 101 4 is_stmt 0 view .LVU272
 1153 000a 2046     		mov	r0, r4
 1154 000c FFF7FEFF 		bl	strlen
 1155              	.LVL56:
 101:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1156              		.loc 2 101 3 view .LVU273
 1157 0010 0728     		cmp	r0, #7
 1158 0012 01D8     		bhi	.L78
 1159              	.L73:
 119:Core/Src/USER/rtc.c **** }
 1160              		.loc 2 119 1 view .LVU274
 1161 0014 02B0     		add	sp, sp, #8
 1162              	.LCFI21:
 1163              		.cfi_remember_state
 1164              		.cfi_def_cfa_offset 8
 1165              		@ sp needed
 1166 0016 10BD     		pop	{r4, pc}
 1167              	.LVL57:
 1168              	.L78:
 1169              	.LCFI22:
 1170              		.cfi_restore_state
 102:Core/Src/USER/rtc.c **** 	char delim[] = ".";
 1171              		.loc 2 102 2 is_stmt 1 view .LVU275
 102:Core/Src/USER/rtc.c **** 	char delim[] = ".";
 1172              		.loc 2 102 7 is_stmt 0 view .LVU276
 1173 0018 2E23     		movs	r3, #46
 1174 001a ADF80030 		strh	r3, [sp]	@ movhi
 104:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 1175              		.loc 2 104 2 is_stmt 1 view .LVU277
 104:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 1176              		.loc 2 104 14 is_stmt 0 view .LVU278
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 39


 1177 001e 6946     		mov	r1, sp
 1178 0020 2046     		mov	r0, r4
 1179 0022 FFF7FEFF 		bl	strtok
 1180              	.LVL58:
 105:Core/Src/USER/rtc.c **** 	dienos.Year=atoi(ptr);
 1181              		.loc 2 105 2 is_stmt 1 view .LVU279
 105:Core/Src/USER/rtc.c **** 	dienos.Year=atoi(ptr);
 1182              		.loc 2 105 14 is_stmt 0 view .LVU280
 1183 0026 FFF7FEFF 		bl	atoi
 1184              	.LVL59:
 105:Core/Src/USER/rtc.c **** 	dienos.Year=atoi(ptr);
 1185              		.loc 2 105 13 view .LVU281
 1186 002a 8DF80700 		strb	r0, [sp, #7]
 107:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1187              		.loc 2 107 2 is_stmt 1 view .LVU282
 107:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1188              		.loc 2 107 8 is_stmt 0 view .LVU283
 1189 002e 6946     		mov	r1, sp
 1190 0030 0020     		movs	r0, #0
 1191 0032 FFF7FEFF 		bl	strtok
 1192              	.LVL60:
 108:Core/Src/USER/rtc.c **** 	dienos.Month=atoi(ptr);
 1193              		.loc 2 108 2 is_stmt 1 view .LVU284
 108:Core/Src/USER/rtc.c **** 	dienos.Month=atoi(ptr);
 1194              		.loc 2 108 15 is_stmt 0 view .LVU285
 1195 0036 FFF7FEFF 		bl	atoi
 1196              	.LVL61:
 108:Core/Src/USER/rtc.c **** 	dienos.Month=atoi(ptr);
 1197              		.loc 2 108 14 view .LVU286
 1198 003a 8DF80500 		strb	r0, [sp, #5]
 110:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1199              		.loc 2 110 2 is_stmt 1 view .LVU287
 110:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1200              		.loc 2 110 8 is_stmt 0 view .LVU288
 1201 003e 6946     		mov	r1, sp
 1202 0040 0020     		movs	r0, #0
 1203 0042 FFF7FEFF 		bl	strtok
 1204              	.LVL62:
 111:Core/Src/USER/rtc.c **** 	dienos.Date=atoi(ptr);
 1205              		.loc 2 111 2 is_stmt 1 view .LVU289
 111:Core/Src/USER/rtc.c **** 	dienos.Date=atoi(ptr);
 1206              		.loc 2 111 14 is_stmt 0 view .LVU290
 1207 0046 FFF7FEFF 		bl	atoi
 1208              	.LVL63:
 111:Core/Src/USER/rtc.c **** 	dienos.Date=atoi(ptr);
 1209              		.loc 2 111 13 view .LVU291
 1210 004a 8DF80600 		strb	r0, [sp, #6]
 113:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1211              		.loc 2 113 2 is_stmt 1 view .LVU292
 113:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1212              		.loc 2 113 6 is_stmt 0 view .LVU293
 1213 004e 0022     		movs	r2, #0
 1214 0050 01A9     		add	r1, sp, #4
 1215 0052 0448     		ldr	r0, .L80
 1216 0054 FFF7FEFF 		bl	HAL_RTC_SetDate
 1217              	.LVL64:
 113:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 40


 1218              		.loc 2 113 5 view .LVU294
 1219 0058 10B9     		cbnz	r0, .L79
 118:Core/Src/USER/rtc.c ****   rtc_backup_date();
 1220              		.loc 2 118 3 is_stmt 1 view .LVU295
 1221 005a FFF7FEFF 		bl	rtc_backup_date
 1222              	.LVL65:
 1223 005e D9E7     		b	.L73
 1224              	.L79:
 115:Core/Src/USER/rtc.c ****     Error_Handler();
 1225              		.loc 2 115 5 view .LVU296
 1226 0060 FFF7FEFF 		bl	Error_Handler
 1227              	.LVL66:
 1228              	.L81:
 1229              		.align	2
 1230              	.L80:
 1231 0064 00000000 		.word	hrtc
 1232              		.cfi_endproc
 1233              	.LFE70:
 1235              		.section	.text.rtc_set_time_text,"ax",%progbits
 1236              		.align	1
 1237              		.global	rtc_set_time_text
 1238              		.syntax unified
 1239              		.thumb
 1240              		.thumb_func
 1241              		.fpu softvfp
 1243              	rtc_set_time_text:
 1244              	.LVL67:
 1245              	.LFB71:
 123:Core/Src/USER/rtc.c **** {
 1246              		.loc 2 123 1 view -0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 8
 1249              		@ frame_needed = 0, uses_anonymous_args = 0
 123:Core/Src/USER/rtc.c **** {
 1250              		.loc 2 123 1 is_stmt 0 view .LVU298
 1251 0000 10B5     		push	{r4, lr}
 1252              	.LCFI23:
 1253              		.cfi_def_cfa_offset 8
 1254              		.cfi_offset 4, -8
 1255              		.cfi_offset 14, -4
 1256 0002 82B0     		sub	sp, sp, #8
 1257              	.LCFI24:
 1258              		.cfi_def_cfa_offset 16
 1259 0004 0446     		mov	r4, r0
 128:Core/Src/USER/rtc.c **** filter_string(Buf);
 1260              		.loc 2 128 1 is_stmt 1 view .LVU299
 1261 0006 FFF7FEFF 		bl	filter_string
 1262              	.LVL68:
 130:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1263              		.loc 2 130 1 view .LVU300
 130:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1264              		.loc 2 130 4 is_stmt 0 view .LVU301
 1265 000a 2046     		mov	r0, r4
 1266 000c FFF7FEFF 		bl	strlen
 1267              	.LVL69:
 130:Core/Src/USER/rtc.c **** if(strlen(Buf)<8) return;
 1268              		.loc 2 130 3 view .LVU302
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 41


 1269 0010 0728     		cmp	r0, #7
 1270 0012 01D8     		bhi	.L87
 1271              	.LVL70:
 1272              	.L82:
 148:Core/Src/USER/rtc.c **** }
 1273              		.loc 2 148 1 view .LVU303
 1274 0014 02B0     		add	sp, sp, #8
 1275              	.LCFI25:
 1276              		.cfi_remember_state
 1277              		.cfi_def_cfa_offset 8
 1278              		@ sp needed
 1279 0016 10BD     		pop	{r4, pc}
 1280              	.LVL71:
 1281              	.L87:
 1282              	.LCFI26:
 1283              		.cfi_restore_state
 132:Core/Src/USER/rtc.c **** 	char delim[] = ":";
 1284              		.loc 2 132 2 is_stmt 1 view .LVU304
 132:Core/Src/USER/rtc.c **** 	char delim[] = ":";
 1285              		.loc 2 132 7 is_stmt 0 view .LVU305
 1286 0018 3A23     		movs	r3, #58
 1287 001a ADF80430 		strh	r3, [sp, #4]	@ movhi
 134:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 1288              		.loc 2 134 2 is_stmt 1 view .LVU306
 134:Core/Src/USER/rtc.c **** 	char *ptr = strtok(Buf, delim);
 1289              		.loc 2 134 14 is_stmt 0 view .LVU307
 1290 001e 01A9     		add	r1, sp, #4
 1291 0020 2046     		mov	r0, r4
 1292 0022 FFF7FEFF 		bl	strtok
 1293              	.LVL72:
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 1294              		.loc 2 135 2 is_stmt 1 view .LVU308
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 1295              		.loc 2 135 17 is_stmt 0 view .LVU309
 1296 0026 FFF7FEFF 		bl	atoi
 1297              	.LVL73:
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 1298              		.loc 2 135 16 view .LVU310
 1299 002a 0C4C     		ldr	r4, .L88
 1300              	.LVL74:
 135:Core/Src/USER/rtc.c **** 	currTime.Hours=atoi(ptr);
 1301              		.loc 2 135 16 view .LVU311
 1302 002c 2070     		strb	r0, [r4]
 137:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1303              		.loc 2 137 2 is_stmt 1 view .LVU312
 137:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1304              		.loc 2 137 8 is_stmt 0 view .LVU313
 1305 002e 01A9     		add	r1, sp, #4
 1306 0030 0020     		movs	r0, #0
 1307 0032 FFF7FEFF 		bl	strtok
 1308              	.LVL75:
 138:Core/Src/USER/rtc.c **** 	currTime.Minutes=atoi(ptr);
 1309              		.loc 2 138 2 is_stmt 1 view .LVU314
 138:Core/Src/USER/rtc.c **** 	currTime.Minutes=atoi(ptr);
 1310              		.loc 2 138 19 is_stmt 0 view .LVU315
 1311 0036 FFF7FEFF 		bl	atoi
 1312              	.LVL76:
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 42


 138:Core/Src/USER/rtc.c **** 	currTime.Minutes=atoi(ptr);
 1313              		.loc 2 138 18 view .LVU316
 1314 003a 6070     		strb	r0, [r4, #1]
 140:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1315              		.loc 2 140 2 is_stmt 1 view .LVU317
 140:Core/Src/USER/rtc.c **** 	ptr = strtok(NULL, delim);
 1316              		.loc 2 140 8 is_stmt 0 view .LVU318
 1317 003c 01A9     		add	r1, sp, #4
 1318 003e 0020     		movs	r0, #0
 1319 0040 FFF7FEFF 		bl	strtok
 1320              	.LVL77:
 141:Core/Src/USER/rtc.c **** 	currTime.Seconds=atoi(ptr);
 1321              		.loc 2 141 2 is_stmt 1 view .LVU319
 141:Core/Src/USER/rtc.c **** 	currTime.Seconds=atoi(ptr);
 1322              		.loc 2 141 19 is_stmt 0 view .LVU320
 1323 0044 FFF7FEFF 		bl	atoi
 1324              	.LVL78:
 141:Core/Src/USER/rtc.c **** 	currTime.Seconds=atoi(ptr);
 1325              		.loc 2 141 18 view .LVU321
 1326 0048 A070     		strb	r0, [r4, #2]
 143:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
 1327              		.loc 2 143 2 is_stmt 1 view .LVU322
 143:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
 1328              		.loc 2 143 6 is_stmt 0 view .LVU323
 1329 004a 0022     		movs	r2, #0
 1330 004c 2146     		mov	r1, r4
 1331 004e 0448     		ldr	r0, .L88+4
 1332 0050 FFF7FEFF 		bl	HAL_RTC_SetTime
 1333              	.LVL79:
 143:Core/Src/USER/rtc.c ****  if (HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN) != HAL_OK)
 1334              		.loc 2 143 5 view .LVU324
 1335 0054 0028     		cmp	r0, #0
 1336 0056 DDD0     		beq	.L82
 145:Core/Src/USER/rtc.c ****     Error_Handler();
 1337              		.loc 2 145 5 is_stmt 1 view .LVU325
 1338 0058 FFF7FEFF 		bl	Error_Handler
 1339              	.LVL80:
 1340              	.L89:
 1341              		.align	2
 1342              	.L88:
 1343 005c 00000000 		.word	.LANCHOR1
 1344 0060 00000000 		.word	hrtc
 1345              		.cfi_endproc
 1346              	.LFE71:
 1348              		.section	.rodata.commandcom.str1.4,"aMS",%progbits,1
 1349              		.align	2
 1350              	.LC0:
 1351 0000 39482043 		.ascii	"9H CLOCK\015\012(c)2023 Vabolis.lt\015\012\000"
 1351      4C4F434B 
 1351      0D0A2863 
 1351      29323032 
 1351      33205661 
 1352              		.section	.text.commandcom,"ax",%progbits
 1353              		.align	1
 1354              		.global	commandcom
 1355              		.syntax unified
 1356              		.thumb
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 43


 1357              		.thumb_func
 1358              		.fpu softvfp
 1360              	commandcom:
 1361              	.LVL81:
 1362              	.LFB87:
  51:Core/Src/USER/user.c **** 
 1363              		.loc 4 51 1 view -0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
  51:Core/Src/USER/user.c **** 
 1367              		.loc 4 51 1 is_stmt 0 view .LVU327
 1368 0000 08B5     		push	{r3, lr}
 1369              	.LCFI27:
 1370              		.cfi_def_cfa_offset 8
 1371              		.cfi_offset 3, -8
 1372              		.cfi_offset 14, -4
  53:Core/Src/USER/user.c **** 
 1373              		.loc 4 53 1 is_stmt 1 view .LVU328
  53:Core/Src/USER/user.c **** 
 1374              		.loc 4 53 8 is_stmt 0 view .LVU329
 1375 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  53:Core/Src/USER/user.c **** 
 1376              		.loc 4 53 4 view .LVU330
 1377 0004 412B     		cmp	r3, #65
 1378 0006 15D1     		bne	.L90
  53:Core/Src/USER/user.c **** 
 1379              		.loc 4 53 24 discriminator 2 view .LVU331
 1380 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  53:Core/Src/USER/user.c **** 
 1381              		.loc 4 53 18 discriminator 2 view .LVU332
 1382 000a 542B     		cmp	r3, #84
 1383 000c 12D1     		bne	.L90
  55:Core/Src/USER/user.c **** 	{
 1384              		.loc 4 55 2 is_stmt 1 view .LVU333
  55:Core/Src/USER/user.c **** 	{
 1385              		.loc 4 55 12 is_stmt 0 view .LVU334
 1386 000e 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 1387 0010 413B     		subs	r3, r3, #65
 1388 0012 132B     		cmp	r3, #19
 1389 0014 0ED8     		bhi	.L90
 1390 0016 DFE803F0 		tbb	[pc, r3]
 1391              	.L93:
 1392 001a 17       		.byte	(.L96-.L93)/2
 1393 001b 0D       		.byte	(.L90-.L93)/2
 1394 001c 0D       		.byte	(.L90-.L93)/2
 1395 001d 0E       		.byte	(.L95-.L93)/2
 1396 001e 0D       		.byte	(.L90-.L93)/2
 1397 001f 0D       		.byte	(.L90-.L93)/2
 1398 0020 0D       		.byte	(.L90-.L93)/2
 1399 0021 0D       		.byte	(.L90-.L93)/2
 1400 0022 12       		.byte	(.L94-.L93)/2
 1401 0023 0D       		.byte	(.L90-.L93)/2
 1402 0024 0D       		.byte	(.L90-.L93)/2
 1403 0025 0D       		.byte	(.L90-.L93)/2
 1404 0026 0D       		.byte	(.L90-.L93)/2
 1405 0027 0D       		.byte	(.L90-.L93)/2
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 44


 1406 0028 0D       		.byte	(.L90-.L93)/2
 1407 0029 0D       		.byte	(.L90-.L93)/2
 1408 002a 0D       		.byte	(.L90-.L93)/2
 1409 002b 0D       		.byte	(.L90-.L93)/2
 1410 002c 0D       		.byte	(.L90-.L93)/2
 1411 002d 0A       		.byte	(.L92-.L93)/2
 1412              		.p2align 1
 1413              	.L92:
  58:Core/Src/USER/user.c **** 		break;
 1414              		.loc 4 58 4 is_stmt 1 view .LVU335
 1415 002e 0330     		adds	r0, r0, #3
 1416              	.LVL82:
  58:Core/Src/USER/user.c **** 		break;
 1417              		.loc 4 58 4 is_stmt 0 view .LVU336
 1418 0030 FFF7FEFF 		bl	rtc_set_time_text
 1419              	.LVL83:
  59:Core/Src/USER/user.c **** 		case 'D':
 1420              		.loc 4 59 3 is_stmt 1 view .LVU337
 1421              	.L90:
  70:Core/Src/USER/user.c **** 
 1422              		.loc 4 70 1 is_stmt 0 view .LVU338
 1423 0034 08BD     		pop	{r3, pc}
 1424              	.LVL84:
 1425              	.L95:
  61:Core/Src/USER/user.c **** 		break;
 1426              		.loc 4 61 4 is_stmt 1 view .LVU339
 1427 0036 0330     		adds	r0, r0, #3
 1428              	.LVL85:
  61:Core/Src/USER/user.c **** 		break;
 1429              		.loc 4 61 4 is_stmt 0 view .LVU340
 1430 0038 FFF7FEFF 		bl	rtc_set_date_text
 1431              	.LVL86:
  62:Core/Src/USER/user.c **** 		case 'I':
 1432              		.loc 4 62 3 is_stmt 1 view .LVU341
 1433 003c FAE7     		b	.L90
 1434              	.LVL87:
 1435              	.L94:
  64:Core/Src/USER/user.c **** 		break;
 1436              		.loc 4 64 4 view .LVU342
 1437 003e 2121     		movs	r1, #33
 1438 0040 0448     		ldr	r0, .L98
 1439              	.LVL88:
  64:Core/Src/USER/user.c **** 		break;
 1440              		.loc 4 64 4 is_stmt 0 view .LVU343
 1441 0042 FFF7FEFF 		bl	CDC_Transmit_FS
 1442              	.LVL89:
  65:Core/Src/USER/user.c **** 		case 'A':
 1443              		.loc 4 65 3 is_stmt 1 view .LVU344
 1444 0046 F5E7     		b	.L90
 1445              	.LVL90:
 1446              	.L96:
  67:Core/Src/USER/user.c **** 		break;
 1447              		.loc 4 67 4 view .LVU345
 1448 0048 034B     		ldr	r3, .L98+4
 1449 004a 1B68     		ldr	r3, [r3]
 1450 004c 43F2C962 		movw	r2, #14025
 1451 0050 5A63     		str	r2, [r3, #52]
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 45


  68:Core/Src/USER/user.c **** 	}
 1452              		.loc 4 68 3 view .LVU346
 1453 0052 EFE7     		b	.L90
 1454              	.L99:
 1455              		.align	2
 1456              	.L98:
 1457 0054 00000000 		.word	.LC0
 1458 0058 00000000 		.word	htim1
 1459              		.cfi_endproc
 1460              	.LFE87:
 1462              		.section	.text.user_loop,"ax",%progbits
 1463              		.align	1
 1464              		.global	user_loop
 1465              		.syntax unified
 1466              		.thumb
 1467              		.thumb_func
 1468              		.fpu softvfp
 1470              	user_loop:
 1471              	.LFB88:
  74:Core/Src/USER/user.c **** char a;
 1472              		.loc 4 74 1 view -0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 32
 1475              		@ frame_needed = 0, uses_anonymous_args = 0
 1476 0000 10B5     		push	{r4, lr}
 1477              	.LCFI28:
 1478              		.cfi_def_cfa_offset 8
 1479              		.cfi_offset 4, -8
 1480              		.cfi_offset 14, -4
 1481 0002 88B0     		sub	sp, sp, #32
 1482              	.LCFI29:
 1483              		.cfi_def_cfa_offset 40
  75:Core/Src/USER/user.c **** char txt[32];
 1484              		.loc 4 75 1 view .LVU348
  76:Core/Src/USER/user.c **** unsigned char txtp=0;
 1485              		.loc 4 76 1 view .LVU349
  77:Core/Src/USER/user.c **** 
 1486              		.loc 4 77 1 view .LVU350
 1487              	.LVL91:
  77:Core/Src/USER/user.c **** 
 1488              		.loc 4 77 15 is_stmt 0 view .LVU351
 1489 0004 0024     		movs	r4, #0
 1490              	.LVL92:
 1491              	.L106:
  79:Core/Src/USER/user.c **** 	{
 1492              		.loc 4 79 1 is_stmt 1 view .LVU352
  81:Core/Src/USER/user.c **** 	while(circle_available(&cc)>0) 
 1493              		.loc 4 81 2 view .LVU353
 1494 0006 1548     		ldr	r0, .L110
 1495 0008 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1496              	.LVL93:
  82:Core/Src/USER/user.c **** 		{
 1497              		.loc 4 82 2 view .LVU354
 1498              	.L101:
  82:Core/Src/USER/user.c **** 		{
 1499              		.loc 4 82 7 view .LVU355
  82:Core/Src/USER/user.c **** 		{
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 46


 1500              		.loc 4 82 8 is_stmt 0 view .LVU356
 1501 000c 1448     		ldr	r0, .L110+4
 1502 000e FFF7FEFF 		bl	circle_available
 1503              	.LVL94:
  82:Core/Src/USER/user.c **** 		{
 1504              		.loc 4 82 7 view .LVU357
 1505 0012 0028     		cmp	r0, #0
 1506 0014 F7D0     		beq	.L106
  84:Core/Src/USER/user.c **** 			
 1507              		.loc 4 84 4 is_stmt 1 view .LVU358
  84:Core/Src/USER/user.c **** 			
 1508              		.loc 4 84 6 is_stmt 0 view .LVU359
 1509 0016 1248     		ldr	r0, .L110+4
 1510 0018 FFF7FEFF 		bl	circle_pull
 1511              	.LVL95:
  86:Core/Src/USER/user.c **** 			{
 1512              		.loc 4 86 4 is_stmt 1 view .LVU360
  86:Core/Src/USER/user.c **** 			{
 1513              		.loc 4 86 15 is_stmt 0 view .LVU361
 1514 001c A0F12003 		sub	r3, r0, #32
 1515 0020 DBB2     		uxtb	r3, r3
  86:Core/Src/USER/user.c **** 			{
 1516              		.loc 4 86 7 view .LVU362
 1517 0022 5A2B     		cmp	r3, #90
 1518 0024 0ED8     		bhi	.L102
  88:Core/Src/USER/user.c **** 				txtp++;
 1519              		.loc 4 88 5 is_stmt 1 view .LVU363
  88:Core/Src/USER/user.c **** 				txtp++;
 1520              		.loc 4 88 14 is_stmt 0 view .LVU364
 1521 0026 08AB     		add	r3, sp, #32
 1522 0028 2344     		add	r3, r3, r4
 1523 002a 03F8200C 		strb	r0, [r3, #-32]
  89:Core/Src/USER/user.c **** 				txt[txtp]=0;
 1524              		.loc 4 89 5 is_stmt 1 view .LVU365
  89:Core/Src/USER/user.c **** 				txt[txtp]=0;
 1525              		.loc 4 89 9 is_stmt 0 view .LVU366
 1526 002e 0134     		adds	r4, r4, #1
 1527              	.LVL96:
  89:Core/Src/USER/user.c **** 				txt[txtp]=0;
 1528              		.loc 4 89 9 view .LVU367
 1529 0030 E4B2     		uxtb	r4, r4
 1530              	.LVL97:
  90:Core/Src/USER/user.c **** 				if (txtp >30) {txtp=0;}
 1531              		.loc 4 90 5 is_stmt 1 view .LVU368
  90:Core/Src/USER/user.c **** 				if (txtp >30) {txtp=0;}
 1532              		.loc 4 90 14 is_stmt 0 view .LVU369
 1533 0032 08AB     		add	r3, sp, #32
 1534 0034 2344     		add	r3, r3, r4
 1535 0036 0022     		movs	r2, #0
 1536 0038 03F8202C 		strb	r2, [r3, #-32]
  91:Core/Src/USER/user.c **** 			}
 1537              		.loc 4 91 5 is_stmt 1 view .LVU370
  91:Core/Src/USER/user.c **** 			}
 1538              		.loc 4 91 8 is_stmt 0 view .LVU371
 1539 003c 1E2C     		cmp	r4, #30
 1540 003e E5D9     		bls	.L101
  91:Core/Src/USER/user.c **** 			}
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 47


 1541              		.loc 4 91 24 view .LVU372
 1542 0040 0024     		movs	r4, #0
 1543              	.LVL98:
  91:Core/Src/USER/user.c **** 			}
 1544              		.loc 4 91 24 view .LVU373
 1545 0042 E3E7     		b	.L101
 1546              	.LVL99:
 1547              	.L102:
  93:Core/Src/USER/user.c **** 			{
 1548              		.loc 4 93 9 is_stmt 1 view .LVU374
  93:Core/Src/USER/user.c **** 			{
 1549              		.loc 4 93 12 is_stmt 0 view .LVU375
 1550 0044 1F28     		cmp	r0, #31
 1551 0046 E1D8     		bhi	.L101
  95:Core/Src/USER/user.c **** 				txt[0]=0;
 1552              		.loc 4 95 5 is_stmt 1 view .LVU376
  95:Core/Src/USER/user.c **** 				txt[0]=0;
 1553              		.loc 4 95 8 is_stmt 0 view .LVU377
 1554 0048 022C     		cmp	r4, #2
 1555 004a 03D8     		bhi	.L109
 1556              	.LVL100:
 1557              	.L104:
  96:Core/Src/USER/user.c **** 				txtp=0;
 1558              		.loc 4 96 5 is_stmt 1 view .LVU378
  96:Core/Src/USER/user.c **** 				txtp=0;
 1559              		.loc 4 96 11 is_stmt 0 view .LVU379
 1560 004c 0024     		movs	r4, #0
 1561              	.LVL101:
  96:Core/Src/USER/user.c **** 				txtp=0;
 1562              		.loc 4 96 11 view .LVU380
 1563 004e 8DF80040 		strb	r4, [sp]
  97:Core/Src/USER/user.c **** 			}
 1564              		.loc 4 97 5 is_stmt 1 view .LVU381
 1565              	.LVL102:
  97:Core/Src/USER/user.c **** 			}
 1566              		.loc 4 97 5 is_stmt 0 view .LVU382
 1567 0052 DBE7     		b	.L101
 1568              	.LVL103:
 1569              	.L109:
  95:Core/Src/USER/user.c **** 				txt[0]=0;
 1570              		.loc 4 95 16 is_stmt 1 discriminator 1 view .LVU383
 1571 0054 6846     		mov	r0, sp
 1572              	.LVL104:
  95:Core/Src/USER/user.c **** 				txt[0]=0;
 1573              		.loc 4 95 16 is_stmt 0 discriminator 1 view .LVU384
 1574 0056 FFF7FEFF 		bl	commandcom
 1575              	.LVL105:
 1576 005a F7E7     		b	.L104
 1577              	.L111:
 1578              		.align	2
 1579              	.L110:
 1580 005c 00000000 		.word	hiwdg
 1581 0060 00000000 		.word	cc
 1582              		.cfi_endproc
 1583              	.LFE88:
 1585              		.section	.text.rtc_check_screwd_calendar,"ax",%progbits
 1586              		.align	1
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 48


 1587              		.global	rtc_check_screwd_calendar
 1588              		.syntax unified
 1589              		.thumb
 1590              		.thumb_func
 1591              		.fpu softvfp
 1593              	rtc_check_screwd_calendar:
 1594              	.LFB76:
 201:Core/Src/USER/rtc.c **** {
 1595              		.loc 2 201 1 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 8
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 1599 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1600              	.LCFI30:
 1601              		.cfi_def_cfa_offset 24
 1602              		.cfi_offset 4, -24
 1603              		.cfi_offset 5, -20
 1604              		.cfi_offset 6, -16
 1605              		.cfi_offset 7, -12
 1606              		.cfi_offset 8, -8
 1607              		.cfi_offset 14, -4
 1608 0004 82B0     		sub	sp, sp, #8
 1609              	.LCFI31:
 1610              		.cfi_def_cfa_offset 32
 202:Core/Src/USER/rtc.c **** RTC_DateTypeDef dienos;
 1611              		.loc 2 202 1 view .LVU386
 203:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 1612              		.loc 2 203 2 view .LVU387
 203:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 1613              		.loc 2 203 5 is_stmt 0 view .LVU388
 1614 0006 0121     		movs	r1, #1
 1615 0008 2A48     		ldr	r0, .L118
 1616 000a FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 1617              	.LVL106:
 203:Core/Src/USER/rtc.c **** 	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)== 0x5051) //magic number, valid backup
 1618              		.loc 2 203 4 view .LVU389
 1619 000e 45F25103 		movw	r3, #20561
 1620 0012 9842     		cmp	r0, r3
 1621 0014 02D0     		beq	.L116
 1622              	.L112:
 225:Core/Src/USER/rtc.c **** }
 1623              		.loc 2 225 1 view .LVU390
 1624 0016 02B0     		add	sp, sp, #8
 1625              	.LCFI32:
 1626              		.cfi_remember_state
 1627              		.cfi_def_cfa_offset 24
 1628              		@ sp needed
 1629 0018 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1630              	.L116:
 1631              	.LCFI33:
 1632              		.cfi_restore_state
 1633              	.LBB8:
 205:Core/Src/USER/rtc.c **** 		HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 1634              		.loc 2 205 3 is_stmt 1 view .LVU391
 1635 001c DFF89480 		ldr	r8, .L118
 1636 0020 0022     		movs	r2, #0
 1637 0022 01A9     		add	r1, sp, #4
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 49


 1638 0024 4046     		mov	r0, r8
 1639 0026 FFF7FEFF 		bl	HAL_RTC_GetDate
 1640              	.LVL107:
 206:Core/Src/USER/rtc.c **** 		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 1641              		.loc 2 206 3 view .LVU392
 1642 002a 234C     		ldr	r4, .L118+4
 1643 002c 0022     		movs	r2, #0
 1644 002e 2146     		mov	r1, r4
 1645 0030 4046     		mov	r0, r8
 1646 0032 FFF7FEFF 		bl	HAL_RTC_GetTime
 1647              	.LVL108:
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1648              		.loc 2 207 3 view .LVU393
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1649              		.loc 2 207 27 is_stmt 0 view .LVU394
 1650 0036 2678     		ldrb	r6, [r4]	@ zero_extendqisi2
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1651              		.loc 2 207 40 view .LVU395
 1652 0038 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1653              		.loc 2 207 45 view .LVU396
 1654 003c 03EB4303 		add	r3, r3, r3, lsl #1
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1655              		.loc 2 207 33 view .LVU397
 1656 0040 06EBC303 		add	r3, r6, r3, lsl #3
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1657              		.loc 2 207 55 view .LVU398
 1658 0044 9DF80560 		ldrb	r6, [sp, #5]	@ zero_extendqisi2
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1659              		.loc 2 207 64 view .LVU399
 1660 0048 4FF43A77 		mov	r7, #744
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1661              		.loc 2 207 48 view .LVU400
 1662 004c 07FB0633 		mla	r3, r7, r6, r3
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1663              		.loc 2 207 74 view .LVU401
 1664 0050 9DF80760 		ldrb	r6, [sp, #7]	@ zero_extendqisi2
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1665              		.loc 2 207 83 view .LVU402
 1666 0054 42F25024 		movw	r4, #8784
 207:Core/Src/USER/rtc.c **** 		uint32_t now_is=currTime.Hours+dienos.Date*24+dienos.Month*31*24+dienos.Year*366*24;
 1667              		.loc 2 207 67 view .LVU403
 1668 0058 04FB0636 		mla	r6, r4, r6, r3
 1669              	.LVL109:
 209:Core/Src/USER/rtc.c **** 		uint32_t tmp=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR2);
 1670              		.loc 2 209 3 is_stmt 1 view .LVU404
 209:Core/Src/USER/rtc.c **** 		uint32_t tmp=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR2);
 1671              		.loc 2 209 16 is_stmt 0 view .LVU405
 1672 005c 0221     		movs	r1, #2
 1673 005e 4046     		mov	r0, r8
 1674 0060 FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 1675              	.LVL110:
 1676 0064 0546     		mov	r5, r0
 1677              	.LVL111:
 210:Core/Src/USER/rtc.c **** 		uint32_t tmp2=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR3);	
 1678              		.loc 2 210 3 is_stmt 1 view .LVU406
 210:Core/Src/USER/rtc.c **** 		uint32_t tmp2=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR3);	
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 50


 1679              		.loc 2 210 17 is_stmt 0 view .LVU407
 1680 0066 0321     		movs	r1, #3
 1681 0068 4046     		mov	r0, r8
 1682              	.LVL112:
 210:Core/Src/USER/rtc.c **** 		uint32_t tmp2=HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR3);	
 1683              		.loc 2 210 17 view .LVU408
 1684 006a FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 1685              	.LVL113:
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1686              		.loc 2 212 3 is_stmt 1 view .LVU409
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1687              		.loc 2 212 24 is_stmt 0 view .LVU410
 1688 006e 290A     		lsrs	r1, r5, #8
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1689              		.loc 2 212 41 view .LVU411
 1690 0070 05F00F03 		and	r3, r5, #15
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1691              		.loc 2 212 53 view .LVU412
 1692 0074 07FB03F7 		mul	r7, r7, r3
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1693              		.loc 2 212 35 view .LVU413
 1694 0078 04FB0174 		mla	r4, r4, r1, r7
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1695              		.loc 2 212 62 view .LVU414
 1696 007c 020A     		lsrs	r2, r0, #8
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1697              		.loc 2 212 66 view .LVU415
 1698 007e 02EB4203 		add	r3, r2, r2, lsl #1
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1699              		.loc 2 212 56 view .LVU416
 1700 0082 04EBC304 		add	r4, r4, r3, lsl #3
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1701              		.loc 2 212 76 view .LVU417
 1702 0086 C3B2     		uxtb	r3, r0
 212:Core/Src/USER/rtc.c **** 		uint32_t now_was=(tmp>>8)*366*24+(tmp & 0x000F)*31*24+(tmp2>>8)*24+(tmp2 & 0xFF);
 1703              		.loc 2 212 12 view .LVU418
 1704 0088 1C44     		add	r4, r4, r3
 1705              	.LVL114:
 213:Core/Src/USER/rtc.c **** 		if(now_was > now_is)
 1706              		.loc 2 213 3 is_stmt 1 view .LVU419
 213:Core/Src/USER/rtc.c **** 		if(now_was > now_is)
 1707              		.loc 2 213 5 is_stmt 0 view .LVU420
 1708 008a A642     		cmp	r6, r4
 1709 008c C3D2     		bcs	.L112
 215:Core/Src/USER/rtc.c **** 			dienos.Year=(tmp >> 8);
 1710              		.loc 2 215 4 is_stmt 1 view .LVU421
 215:Core/Src/USER/rtc.c **** 			dienos.Year=(tmp >> 8);
 1711              		.loc 2 215 15 is_stmt 0 view .LVU422
 1712 008e 8DF80710 		strb	r1, [sp, #7]
 216:Core/Src/USER/rtc.c **** 			dienos.Month=tmp & 0x0F;
 1713              		.loc 2 216 4 is_stmt 1 view .LVU423
 216:Core/Src/USER/rtc.c **** 			dienos.Month=tmp & 0x0F;
 1714              		.loc 2 216 21 is_stmt 0 view .LVU424
 1715 0092 05F00F05 		and	r5, r5, #15
 1716              	.LVL115:
 216:Core/Src/USER/rtc.c **** 			dienos.Month=tmp & 0x0F;
 1717              		.loc 2 216 16 view .LVU425
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 51


 1718 0096 8DF80550 		strb	r5, [sp, #5]
 217:Core/Src/USER/rtc.c **** 			dienos.Date=(tmp2 >> 8);
 1719              		.loc 2 217 4 is_stmt 1 view .LVU426
 217:Core/Src/USER/rtc.c **** 			dienos.Date=(tmp2 >> 8);
 1720              		.loc 2 217 15 is_stmt 0 view .LVU427
 1721 009a 8DF80620 		strb	r2, [sp, #6]
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1722              		.loc 2 218 5 is_stmt 1 view .LVU428
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1723              		.loc 2 218 9 is_stmt 0 view .LVU429
 1724 009e 0022     		movs	r2, #0
 1725 00a0 01A9     		add	r1, sp, #4
 1726 00a2 4046     		mov	r0, r8
 1727              	.LVL116:
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1728              		.loc 2 218 9 view .LVU430
 1729 00a4 FFF7FEFF 		bl	HAL_RTC_SetDate
 1730              	.LVL117:
 218:Core/Src/USER/rtc.c **** 			 if (HAL_RTC_SetDate(&hrtc, &dienos, RTC_FORMAT_BIN) != HAL_OK)
 1731              		.loc 2 218 8 view .LVU431
 1732 00a8 10B9     		cbnz	r0, .L117
 222:Core/Src/USER/rtc.c **** 			 rtc_backup_date();
 1733              		.loc 2 222 5 is_stmt 1 view .LVU432
 1734 00aa FFF7FEFF 		bl	rtc_backup_date
 1735              	.LVL118:
 1736              	.LBE8:
 225:Core/Src/USER/rtc.c **** }
 1737              		.loc 2 225 1 is_stmt 0 view .LVU433
 1738 00ae B2E7     		b	.L112
 1739              	.L117:
 1740              	.LBB9:
 220:Core/Src/USER/rtc.c **** 				Error_Handler();
 1741              		.loc 2 220 5 is_stmt 1 view .LVU434
 1742 00b0 FFF7FEFF 		bl	Error_Handler
 1743              	.LVL119:
 1744              	.L119:
 1745              		.align	2
 1746              	.L118:
 1747 00b4 00000000 		.word	hrtc
 1748 00b8 00000000 		.word	.LANCHOR1
 1749              	.LBE9:
 1750              		.cfi_endproc
 1751              	.LFE76:
 1753              		.section	.text.MX_RTC_Init,"ax",%progbits
 1754              		.align	1
 1755              		.syntax unified
 1756              		.thumb
 1757              		.thumb_func
 1758              		.fpu softvfp
 1760              	MX_RTC_Init:
 1761              	.LFB93:
 199:Core/Src/main.c **** 
 1762              		.loc 1 199 1 view -0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 16
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766 0000 10B5     		push	{r4, lr}
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 52


 1767              	.LCFI34:
 1768              		.cfi_def_cfa_offset 8
 1769              		.cfi_offset 4, -8
 1770              		.cfi_offset 14, -4
 1771 0002 84B0     		sub	sp, sp, #16
 1772              	.LCFI35:
 1773              		.cfi_def_cfa_offset 24
 205:Core/Src/main.c ****   RTC_DateTypeDef DateToUpdate = {0};
 1774              		.loc 1 205 3 view .LVU436
 205:Core/Src/main.c ****   RTC_DateTypeDef DateToUpdate = {0};
 1775              		.loc 1 205 19 is_stmt 0 view .LVU437
 1776 0004 0023     		movs	r3, #0
 1777 0006 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 1778 000a 8DF80E30 		strb	r3, [sp, #14]
 206:Core/Src/main.c **** 
 1779              		.loc 1 206 3 is_stmt 1 view .LVU438
 206:Core/Src/main.c **** 
 1780              		.loc 1 206 19 is_stmt 0 view .LVU439
 1781 000e 0293     		str	r3, [sp, #8]
 209:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 1782              		.loc 1 209 3 is_stmt 1 view .LVU440
 209:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 1783              		.loc 1 209 17 is_stmt 0 view .LVU441
 1784 0010 2F4B     		ldr	r3, .L130
 1785 0012 304A     		ldr	r2, .L130+4
 1786 0014 1A60     		str	r2, [r3]
 210:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 1787              		.loc 1 210 3 is_stmt 1 view .LVU442
 210:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 1788              		.loc 1 210 26 is_stmt 0 view .LVU443
 1789 0016 4FF0FF32 		mov	r2, #-1
 1790 001a 5A60     		str	r2, [r3, #4]
 211:Core/Src/main.c ****   if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 1791              		.loc 1 211 3 is_stmt 1 view .LVU444
 211:Core/Src/main.c ****   if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 1792              		.loc 1 211 20 is_stmt 0 view .LVU445
 1793 001c 4FF48072 		mov	r2, #256
 1794 0020 9A60     		str	r2, [r3, #8]
 212:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 1795              		.loc 1 212 3 is_stmt 1 view .LVU446
 212:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 1796              		.loc 1 212 11 is_stmt 0 view .LVU447
 1797 0022 2D4B     		ldr	r3, .L130+8
 1798 0024 1B6A     		ldr	r3, [r3, #32]
 212:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 1799              		.loc 1 212 6 view .LVU448
 1800 0026 13F4004F 		tst	r3, #32768
 1801 002a 05D1     		bne	.L121
 217:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 1802              		.loc 1 217 3 is_stmt 1 view .LVU449
 218:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 1803              		.loc 1 218 3 view .LVU450
 219:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 1804              		.loc 1 219 3 view .LVU451
 220:Core/Src/main.c ****   {
 1805              		.loc 1 220 3 view .LVU452
 220:Core/Src/main.c ****   {
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 53


 1806              		.loc 1 220 7 is_stmt 0 view .LVU453
 1807 002c 2848     		ldr	r0, .L130
 1808 002e FFF7FEFF 		bl	HAL_RTC_Init
 1809              	.LVL120:
 220:Core/Src/main.c ****   {
 1810              		.loc 1 220 6 view .LVU454
 1811 0032 48B1     		cbz	r0, .L122
 222:Core/Src/main.c ****   }
 1812              		.loc 1 222 5 is_stmt 1 view .LVU455
 1813 0034 FFF7FEFF 		bl	Error_Handler
 1814              	.LVL121:
 1815              	.L121:
 228:Core/Src/main.c **** 	  HAL_NVIC_EnableIRQ(RTC_IRQn);
 1816              		.loc 1 228 4 view .LVU456
 1817 0038 0022     		movs	r2, #0
 1818 003a 0F21     		movs	r1, #15
 1819 003c 0320     		movs	r0, #3
 1820 003e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1821              	.LVL122:
 229:Core/Src/main.c **** 	}
 1822              		.loc 1 229 4 view .LVU457
 1823 0042 0320     		movs	r0, #3
 1824 0044 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1825              	.LVL123:
 1826              	.L122:
 231:Core/Src/main.c **** 	{
 1827              		.loc 1 231 2 view .LVU458
 231:Core/Src/main.c **** 	{
 1828              		.loc 1 231 5 is_stmt 0 view .LVU459
 1829 0048 0121     		movs	r1, #1
 1830 004a 2148     		ldr	r0, .L130
 1831 004c FFF7FEFF 		bl	HAL_RTCEx_BKUPRead
 1832              	.LVL124:
 231:Core/Src/main.c **** 	{
 1833              		.loc 1 231 4 view .LVU460
 1834 0050 45F25103 		movw	r3, #20561
 1835 0054 9842     		cmp	r0, r3
 1836 0056 1BD0     		beq	.L123
 237:Core/Src/main.c ****   sTime.Minutes = 0x0;
 1837              		.loc 1 237 3 is_stmt 1 view .LVU461
 237:Core/Src/main.c ****   sTime.Minutes = 0x0;
 1838              		.loc 1 237 15 is_stmt 0 view .LVU462
 1839 0058 0023     		movs	r3, #0
 1840 005a 8DF80C30 		strb	r3, [sp, #12]
 238:Core/Src/main.c ****   sTime.Seconds = 0x0;
 1841              		.loc 1 238 3 is_stmt 1 view .LVU463
 238:Core/Src/main.c ****   sTime.Seconds = 0x0;
 1842              		.loc 1 238 17 is_stmt 0 view .LVU464
 1843 005e 8DF80D30 		strb	r3, [sp, #13]
 239:Core/Src/main.c **** 
 1844              		.loc 1 239 3 is_stmt 1 view .LVU465
 239:Core/Src/main.c **** 
 1845              		.loc 1 239 17 is_stmt 0 view .LVU466
 1846 0062 8DF80E30 		strb	r3, [sp, #14]
 241:Core/Src/main.c ****   {
 1847              		.loc 1 241 3 is_stmt 1 view .LVU467
 241:Core/Src/main.c ****   {
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 54


 1848              		.loc 1 241 7 is_stmt 0 view .LVU468
 1849 0066 0122     		movs	r2, #1
 1850 0068 03A9     		add	r1, sp, #12
 1851 006a 1948     		ldr	r0, .L130
 1852 006c FFF7FEFF 		bl	HAL_RTC_SetTime
 1853              	.LVL125:
 241:Core/Src/main.c ****   {
 1854              		.loc 1 241 6 view .LVU469
 1855 0070 30BB     		cbnz	r0, .L127
 245:Core/Src/main.c ****   DateToUpdate.Month = RTC_MONTH_JANUARY;
 1856              		.loc 1 245 3 is_stmt 1 view .LVU470
 245:Core/Src/main.c ****   DateToUpdate.Month = RTC_MONTH_JANUARY;
 1857              		.loc 1 245 24 is_stmt 0 view .LVU471
 1858 0072 0122     		movs	r2, #1
 1859 0074 8DF80820 		strb	r2, [sp, #8]
 246:Core/Src/main.c ****   DateToUpdate.Date = 0x1;
 1860              		.loc 1 246 3 is_stmt 1 view .LVU472
 246:Core/Src/main.c ****   DateToUpdate.Date = 0x1;
 1861              		.loc 1 246 22 is_stmt 0 view .LVU473
 1862 0078 8DF80920 		strb	r2, [sp, #9]
 247:Core/Src/main.c ****   DateToUpdate.Year = 0x0;
 1863              		.loc 1 247 3 is_stmt 1 view .LVU474
 247:Core/Src/main.c ****   DateToUpdate.Year = 0x0;
 1864              		.loc 1 247 21 is_stmt 0 view .LVU475
 1865 007c 8DF80A20 		strb	r2, [sp, #10]
 248:Core/Src/main.c **** 
 1866              		.loc 1 248 3 is_stmt 1 view .LVU476
 248:Core/Src/main.c **** 
 1867              		.loc 1 248 21 is_stmt 0 view .LVU477
 1868 0080 0023     		movs	r3, #0
 1869 0082 8DF80B30 		strb	r3, [sp, #11]
 250:Core/Src/main.c ****   {
 1870              		.loc 1 250 3 is_stmt 1 view .LVU478
 250:Core/Src/main.c ****   {
 1871              		.loc 1 250 7 is_stmt 0 view .LVU479
 1872 0086 02A9     		add	r1, sp, #8
 1873 0088 1148     		ldr	r0, .L130
 1874 008a FFF7FEFF 		bl	HAL_RTC_SetDate
 1875              	.LVL126:
 250:Core/Src/main.c ****   {
 1876              		.loc 1 250 6 view .LVU480
 1877 008e C8B9     		cbnz	r0, .L128
 1878              	.L123:
 262:Core/Src/main.c **** /* read time seconds for epoch */
 1879              		.loc 1 262 2 is_stmt 1 view .LVU481
 1880 0090 0F4C     		ldr	r4, .L130
 1881 0092 0022     		movs	r2, #0
 1882 0094 1149     		ldr	r1, .L130+12
 1883 0096 2046     		mov	r0, r4
 1884 0098 FFF7FEFF 		bl	HAL_RTC_GetTime
 1885              	.LVL127:
 269:Core/Src/main.c **** 	HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 1886              		.loc 1 269 2 view .LVU482
 269:Core/Src/main.c **** 	HAL_RTC_GetDate(&hrtc, &dienos, RTC_FORMAT_BIN);
 1887              		.loc 1 269 18 is_stmt 0 view .LVU483
 1888 009c 0022     		movs	r2, #0
 1889 009e 0192     		str	r2, [sp, #4]
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 55


 270:Core/Src/main.c **** 	if(dienos.Year < 20) {rtc_check_screwd_calendar();}
 1890              		.loc 1 270 2 is_stmt 1 view .LVU484
 1891 00a0 01A9     		add	r1, sp, #4
 1892 00a2 2046     		mov	r0, r4
 1893 00a4 FFF7FEFF 		bl	HAL_RTC_GetDate
 1894              	.LVL128:
 271:Core/Src/main.c **** 	
 1895              		.loc 1 271 2 view .LVU485
 271:Core/Src/main.c **** 	
 1896              		.loc 1 271 11 is_stmt 0 view .LVU486
 1897 00a8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 271:Core/Src/main.c **** 	
 1898              		.loc 1 271 4 view .LVU487
 1899 00ac 132B     		cmp	r3, #19
 1900 00ae 0BD9     		bls	.L129
 1901              	.L125:
 276:Core/Src/main.c **** 
 1902              		.loc 1 276 2 is_stmt 1 view .LVU488
 1903 00b0 45F25102 		movw	r2, #20561
 1904 00b4 0121     		movs	r1, #1
 1905 00b6 0648     		ldr	r0, .L130
 1906 00b8 FFF7FEFF 		bl	HAL_RTCEx_BKUPWrite
 1907              	.LVL129:
 281:Core/Src/main.c **** 
 1908              		.loc 1 281 1 is_stmt 0 view .LVU489
 1909 00bc 04B0     		add	sp, sp, #16
 1910              	.LCFI36:
 1911              		.cfi_remember_state
 1912              		.cfi_def_cfa_offset 8
 1913              		@ sp needed
 1914 00be 10BD     		pop	{r4, pc}
 1915              	.L127:
 1916              	.LCFI37:
 1917              		.cfi_restore_state
 243:Core/Src/main.c ****   }
 1918              		.loc 1 243 5 is_stmt 1 view .LVU490
 1919 00c0 FFF7FEFF 		bl	Error_Handler
 1920              	.LVL130:
 1921              	.L128:
 252:Core/Src/main.c ****   }
 1922              		.loc 1 252 5 view .LVU491
 1923 00c4 FFF7FEFF 		bl	Error_Handler
 1924              	.LVL131:
 1925              	.L129:
 271:Core/Src/main.c **** 	
 1926              		.loc 1 271 24 discriminator 1 view .LVU492
 1927 00c8 FFF7FEFF 		bl	rtc_check_screwd_calendar
 1928              	.LVL132:
 1929 00cc F0E7     		b	.L125
 1930              	.L131:
 1931 00ce 00BF     		.align	2
 1932              	.L130:
 1933 00d0 00000000 		.word	hrtc
 1934 00d4 00280040 		.word	1073752064
 1935 00d8 00100240 		.word	1073876992
 1936 00dc 00000000 		.word	.LANCHOR1
 1937              		.cfi_endproc
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 56


 1938              	.LFE93:
 1940              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1941              		.align	1
 1942              		.syntax unified
 1943              		.thumb
 1944              		.thumb_func
 1945              		.fpu softvfp
 1947              	MX_TIM1_Init:
 1948              	.LFB94:
 289:Core/Src/main.c **** 
 1949              		.loc 1 289 1 view -0
 1950              		.cfi_startproc
 1951              		@ args = 0, pretend = 0, frame = 88
 1952              		@ frame_needed = 0, uses_anonymous_args = 0
 1953 0000 10B5     		push	{r4, lr}
 1954              	.LCFI38:
 1955              		.cfi_def_cfa_offset 8
 1956              		.cfi_offset 4, -8
 1957              		.cfi_offset 14, -4
 1958 0002 96B0     		sub	sp, sp, #88
 1959              	.LCFI39:
 1960              		.cfi_def_cfa_offset 96
 295:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1961              		.loc 1 295 3 view .LVU494
 295:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1962              		.loc 1 295 26 is_stmt 0 view .LVU495
 1963 0004 0024     		movs	r4, #0
 1964 0006 1294     		str	r4, [sp, #72]
 1965 0008 1394     		str	r4, [sp, #76]
 1966 000a 1494     		str	r4, [sp, #80]
 1967 000c 1594     		str	r4, [sp, #84]
 296:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1968              		.loc 1 296 3 is_stmt 1 view .LVU496
 296:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1969              		.loc 1 296 27 is_stmt 0 view .LVU497
 1970 000e 1094     		str	r4, [sp, #64]
 1971 0010 1194     		str	r4, [sp, #68]
 297:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1972              		.loc 1 297 3 is_stmt 1 view .LVU498
 297:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1973              		.loc 1 297 22 is_stmt 0 view .LVU499
 1974 0012 0994     		str	r4, [sp, #36]
 1975 0014 0A94     		str	r4, [sp, #40]
 1976 0016 0B94     		str	r4, [sp, #44]
 1977 0018 0C94     		str	r4, [sp, #48]
 1978 001a 0D94     		str	r4, [sp, #52]
 1979 001c 0E94     		str	r4, [sp, #56]
 1980 001e 0F94     		str	r4, [sp, #60]
 298:Core/Src/main.c **** 
 1981              		.loc 1 298 3 is_stmt 1 view .LVU500
 298:Core/Src/main.c **** 
 1982              		.loc 1 298 34 is_stmt 0 view .LVU501
 1983 0020 2022     		movs	r2, #32
 1984 0022 2146     		mov	r1, r4
 1985 0024 01A8     		add	r0, sp, #4
 1986 0026 FFF7FEFF 		bl	memset
 1987              	.LVL133:
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 57


 303:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 1988              		.loc 1 303 3 is_stmt 1 view .LVU502
 303:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 1989              		.loc 1 303 18 is_stmt 0 view .LVU503
 1990 002a 2B48     		ldr	r0, .L146
 1991 002c 2B4B     		ldr	r3, .L146+4
 1992 002e 0360     		str	r3, [r0]
 304:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1993              		.loc 1 304 3 is_stmt 1 view .LVU504
 304:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1994              		.loc 1 304 24 is_stmt 0 view .LVU505
 1995 0030 4460     		str	r4, [r0, #4]
 305:Core/Src/main.c ****   htim1.Init.Period = 35535;
 1996              		.loc 1 305 3 is_stmt 1 view .LVU506
 305:Core/Src/main.c ****   htim1.Init.Period = 35535;
 1997              		.loc 1 305 26 is_stmt 0 view .LVU507
 1998 0032 8460     		str	r4, [r0, #8]
 306:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1999              		.loc 1 306 3 is_stmt 1 view .LVU508
 306:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2000              		.loc 1 306 21 is_stmt 0 view .LVU509
 2001 0034 48F6CF23 		movw	r3, #35535
 2002 0038 C360     		str	r3, [r0, #12]
 307:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 2003              		.loc 1 307 3 is_stmt 1 view .LVU510
 307:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 2004              		.loc 1 307 28 is_stmt 0 view .LVU511
 2005 003a 0461     		str	r4, [r0, #16]
 308:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2006              		.loc 1 308 3 is_stmt 1 view .LVU512
 308:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 2007              		.loc 1 308 32 is_stmt 0 view .LVU513
 2008 003c 4461     		str	r4, [r0, #20]
 309:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 2009              		.loc 1 309 3 is_stmt 1 view .LVU514
 309:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 2010              		.loc 1 309 32 is_stmt 0 view .LVU515
 2011 003e 8023     		movs	r3, #128
 2012 0040 8361     		str	r3, [r0, #24]
 310:Core/Src/main.c ****   {
 2013              		.loc 1 310 3 is_stmt 1 view .LVU516
 310:Core/Src/main.c ****   {
 2014              		.loc 1 310 7 is_stmt 0 view .LVU517
 2015 0042 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2016              	.LVL134:
 310:Core/Src/main.c ****   {
 2017              		.loc 1 310 6 view .LVU518
 2018 0046 0028     		cmp	r0, #0
 2019 0048 39D1     		bne	.L140
 314:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 2020              		.loc 1 314 3 is_stmt 1 view .LVU519
 314:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 2021              		.loc 1 314 34 is_stmt 0 view .LVU520
 2022 004a 4FF48053 		mov	r3, #4096
 2023 004e 1293     		str	r3, [sp, #72]
 315:Core/Src/main.c ****   {
 2024              		.loc 1 315 3 is_stmt 1 view .LVU521
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 58


 315:Core/Src/main.c ****   {
 2025              		.loc 1 315 7 is_stmt 0 view .LVU522
 2026 0050 12A9     		add	r1, sp, #72
 2027 0052 2148     		ldr	r0, .L146
 2028 0054 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2029              	.LVL135:
 315:Core/Src/main.c ****   {
 2030              		.loc 1 315 6 view .LVU523
 2031 0058 0028     		cmp	r0, #0
 2032 005a 32D1     		bne	.L141
 319:Core/Src/main.c ****   {
 2033              		.loc 1 319 3 is_stmt 1 view .LVU524
 319:Core/Src/main.c ****   {
 2034              		.loc 1 319 7 is_stmt 0 view .LVU525
 2035 005c 1E48     		ldr	r0, .L146
 2036 005e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 2037              	.LVL136:
 319:Core/Src/main.c ****   {
 2038              		.loc 1 319 6 view .LVU526
 2039 0062 0028     		cmp	r0, #0
 2040 0064 2FD1     		bne	.L142
 323:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2041              		.loc 1 323 3 is_stmt 1 view .LVU527
 323:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2042              		.loc 1 323 37 is_stmt 0 view .LVU528
 2043 0066 0023     		movs	r3, #0
 2044 0068 1093     		str	r3, [sp, #64]
 324:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2045              		.loc 1 324 3 is_stmt 1 view .LVU529
 324:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2046              		.loc 1 324 33 is_stmt 0 view .LVU530
 2047 006a 1193     		str	r3, [sp, #68]
 325:Core/Src/main.c ****   {
 2048              		.loc 1 325 3 is_stmt 1 view .LVU531
 325:Core/Src/main.c ****   {
 2049              		.loc 1 325 7 is_stmt 0 view .LVU532
 2050 006c 10A9     		add	r1, sp, #64
 2051 006e 1A48     		ldr	r0, .L146
 2052 0070 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2053              	.LVL137:
 325:Core/Src/main.c ****   {
 2054              		.loc 1 325 6 view .LVU533
 2055 0074 48BB     		cbnz	r0, .L143
 329:Core/Src/main.c ****   sConfigOC.Pulse = 15000;
 2056              		.loc 1 329 3 is_stmt 1 view .LVU534
 329:Core/Src/main.c ****   sConfigOC.Pulse = 15000;
 2057              		.loc 1 329 20 is_stmt 0 view .LVU535
 2058 0076 6023     		movs	r3, #96
 2059 0078 0993     		str	r3, [sp, #36]
 330:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2060              		.loc 1 330 3 is_stmt 1 view .LVU536
 330:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2061              		.loc 1 330 19 is_stmt 0 view .LVU537
 2062 007a 43F69823 		movw	r3, #15000
 2063 007e 0A93     		str	r3, [sp, #40]
 331:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 2064              		.loc 1 331 3 is_stmt 1 view .LVU538
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 59


 331:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 2065              		.loc 1 331 24 is_stmt 0 view .LVU539
 2066 0080 0022     		movs	r2, #0
 2067 0082 0B92     		str	r2, [sp, #44]
 332:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2068              		.loc 1 332 3 is_stmt 1 view .LVU540
 332:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2069              		.loc 1 332 25 is_stmt 0 view .LVU541
 2070 0084 0C92     		str	r2, [sp, #48]
 333:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 2071              		.loc 1 333 3 is_stmt 1 view .LVU542
 333:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 2072              		.loc 1 333 24 is_stmt 0 view .LVU543
 2073 0086 0D92     		str	r2, [sp, #52]
 334:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 2074              		.loc 1 334 3 is_stmt 1 view .LVU544
 334:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 2075              		.loc 1 334 25 is_stmt 0 view .LVU545
 2076 0088 0E92     		str	r2, [sp, #56]
 335:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2077              		.loc 1 335 3 is_stmt 1 view .LVU546
 335:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2078              		.loc 1 335 26 is_stmt 0 view .LVU547
 2079 008a 0F92     		str	r2, [sp, #60]
 336:Core/Src/main.c ****   {
 2080              		.loc 1 336 3 is_stmt 1 view .LVU548
 336:Core/Src/main.c ****   {
 2081              		.loc 1 336 7 is_stmt 0 view .LVU549
 2082 008c 09A9     		add	r1, sp, #36
 2083 008e 1248     		ldr	r0, .L146
 2084 0090 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2085              	.LVL138:
 336:Core/Src/main.c ****   {
 2086              		.loc 1 336 6 view .LVU550
 2087 0094 D8B9     		cbnz	r0, .L144
 340:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 2088              		.loc 1 340 3 is_stmt 1 view .LVU551
 340:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 2089              		.loc 1 340 40 is_stmt 0 view .LVU552
 2090 0096 0023     		movs	r3, #0
 2091 0098 0193     		str	r3, [sp, #4]
 341:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 2092              		.loc 1 341 3 is_stmt 1 view .LVU553
 341:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 2093              		.loc 1 341 41 is_stmt 0 view .LVU554
 2094 009a 0293     		str	r3, [sp, #8]
 342:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 2095              		.loc 1 342 3 is_stmt 1 view .LVU555
 342:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 2096              		.loc 1 342 34 is_stmt 0 view .LVU556
 2097 009c 0393     		str	r3, [sp, #12]
 343:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 2098              		.loc 1 343 3 is_stmt 1 view .LVU557
 343:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 2099              		.loc 1 343 33 is_stmt 0 view .LVU558
 2100 009e 0493     		str	r3, [sp, #16]
 344:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 60


 2101              		.loc 1 344 3 is_stmt 1 view .LVU559
 344:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 2102              		.loc 1 344 35 is_stmt 0 view .LVU560
 2103 00a0 0593     		str	r3, [sp, #20]
 345:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 2104              		.loc 1 345 3 is_stmt 1 view .LVU561
 345:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 2105              		.loc 1 345 38 is_stmt 0 view .LVU562
 2106 00a2 4FF40052 		mov	r2, #8192
 2107 00a6 0692     		str	r2, [sp, #24]
 346:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 2108              		.loc 1 346 3 is_stmt 1 view .LVU563
 346:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 2109              		.loc 1 346 40 is_stmt 0 view .LVU564
 2110 00a8 0893     		str	r3, [sp, #32]
 347:Core/Src/main.c ****   {
 2111              		.loc 1 347 3 is_stmt 1 view .LVU565
 347:Core/Src/main.c ****   {
 2112              		.loc 1 347 7 is_stmt 0 view .LVU566
 2113 00aa 01A9     		add	r1, sp, #4
 2114 00ac 0A48     		ldr	r0, .L146
 2115 00ae FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 2116              	.LVL139:
 347:Core/Src/main.c ****   {
 2117              		.loc 1 347 6 view .LVU567
 2118 00b2 70B9     		cbnz	r0, .L145
 354:Core/Src/main.c **** 
 2119              		.loc 1 354 3 is_stmt 1 view .LVU568
 2120 00b4 0848     		ldr	r0, .L146
 2121 00b6 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2122              	.LVL140:
 356:Core/Src/main.c **** 
 2123              		.loc 1 356 1 is_stmt 0 view .LVU569
 2124 00ba 16B0     		add	sp, sp, #88
 2125              	.LCFI40:
 2126              		.cfi_remember_state
 2127              		.cfi_def_cfa_offset 8
 2128              		@ sp needed
 2129 00bc 10BD     		pop	{r4, pc}
 2130              	.L140:
 2131              	.LCFI41:
 2132              		.cfi_restore_state
 312:Core/Src/main.c ****   }
 2133              		.loc 1 312 5 is_stmt 1 view .LVU570
 2134 00be FFF7FEFF 		bl	Error_Handler
 2135              	.LVL141:
 2136              	.L141:
 317:Core/Src/main.c ****   }
 2137              		.loc 1 317 5 view .LVU571
 2138 00c2 FFF7FEFF 		bl	Error_Handler
 2139              	.LVL142:
 2140              	.L142:
 321:Core/Src/main.c ****   }
 2141              		.loc 1 321 5 view .LVU572
 2142 00c6 FFF7FEFF 		bl	Error_Handler
 2143              	.LVL143:
 2144              	.L143:
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 61


 327:Core/Src/main.c ****   }
 2145              		.loc 1 327 5 view .LVU573
 2146 00ca FFF7FEFF 		bl	Error_Handler
 2147              	.LVL144:
 2148              	.L144:
 338:Core/Src/main.c ****   }
 2149              		.loc 1 338 5 view .LVU574
 2150 00ce FFF7FEFF 		bl	Error_Handler
 2151              	.LVL145:
 2152              	.L145:
 349:Core/Src/main.c ****   }
 2153              		.loc 1 349 5 view .LVU575
 2154 00d2 FFF7FEFF 		bl	Error_Handler
 2155              	.LVL146:
 2156              	.L147:
 2157 00d6 00BF     		.align	2
 2158              	.L146:
 2159 00d8 00000000 		.word	htim1
 2160 00dc 002C0140 		.word	1073818624
 2161              		.cfi_endproc
 2162              	.LFE94:
 2164              		.section	.text.MX_IWDG_Init,"ax",%progbits
 2165              		.align	1
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu softvfp
 2171              	MX_IWDG_Init:
 2172              	.LFB92:
 171:Core/Src/main.c **** 
 2173              		.loc 1 171 1 view -0
 2174              		.cfi_startproc
 2175              		@ args = 0, pretend = 0, frame = 0
 2176              		@ frame_needed = 0, uses_anonymous_args = 0
 2177 0000 08B5     		push	{r3, lr}
 2178              	.LCFI42:
 2179              		.cfi_def_cfa_offset 8
 2180              		.cfi_offset 3, -8
 2181              		.cfi_offset 14, -4
 180:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 2182              		.loc 1 180 3 view .LVU577
 180:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 2183              		.loc 1 180 18 is_stmt 0 view .LVU578
 2184 0002 0748     		ldr	r0, .L152
 2185 0004 074B     		ldr	r3, .L152+4
 2186 0006 0360     		str	r3, [r0]
 181:Core/Src/main.c ****   hiwdg.Init.Reload = 4095;
 2187              		.loc 1 181 3 is_stmt 1 view .LVU579
 181:Core/Src/main.c ****   hiwdg.Init.Reload = 4095;
 2188              		.loc 1 181 24 is_stmt 0 view .LVU580
 2189 0008 0023     		movs	r3, #0
 2190 000a 4360     		str	r3, [r0, #4]
 182:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 2191              		.loc 1 182 3 is_stmt 1 view .LVU581
 182:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 2192              		.loc 1 182 21 is_stmt 0 view .LVU582
 2193 000c 40F6FF73 		movw	r3, #4095
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 62


 2194 0010 8360     		str	r3, [r0, #8]
 183:Core/Src/main.c ****   {
 2195              		.loc 1 183 3 is_stmt 1 view .LVU583
 183:Core/Src/main.c ****   {
 2196              		.loc 1 183 7 is_stmt 0 view .LVU584
 2197 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 2198              	.LVL147:
 183:Core/Src/main.c ****   {
 2199              		.loc 1 183 6 view .LVU585
 2200 0016 00B9     		cbnz	r0, .L151
 191:Core/Src/main.c **** 
 2201              		.loc 1 191 1 view .LVU586
 2202 0018 08BD     		pop	{r3, pc}
 2203              	.L151:
 185:Core/Src/main.c ****   }
 2204              		.loc 1 185 5 is_stmt 1 view .LVU587
 2205 001a FFF7FEFF 		bl	Error_Handler
 2206              	.LVL148:
 2207              	.L153:
 2208 001e 00BF     		.align	2
 2209              	.L152:
 2210 0020 00000000 		.word	hiwdg
 2211 0024 00300040 		.word	1073754112
 2212              		.cfi_endproc
 2213              	.LFE92:
 2215              		.section	.text.SystemClock_Config,"ax",%progbits
 2216              		.align	1
 2217              		.global	SystemClock_Config
 2218              		.syntax unified
 2219              		.thumb
 2220              		.thumb_func
 2221              		.fpu softvfp
 2223              	SystemClock_Config:
 2224              	.LFB91:
 122:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2225              		.loc 1 122 1 view -0
 2226              		.cfi_startproc
 2227              		@ args = 0, pretend = 0, frame = 88
 2228              		@ frame_needed = 0, uses_anonymous_args = 0
 2229 0000 00B5     		push	{lr}
 2230              	.LCFI43:
 2231              		.cfi_def_cfa_offset 4
 2232              		.cfi_offset 14, -4
 2233 0002 97B0     		sub	sp, sp, #92
 2234              	.LCFI44:
 2235              		.cfi_def_cfa_offset 96
 123:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2236              		.loc 1 123 3 view .LVU589
 123:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2237              		.loc 1 123 22 is_stmt 0 view .LVU590
 2238 0004 0023     		movs	r3, #0
 2239 0006 0F93     		str	r3, [sp, #60]
 2240 0008 1193     		str	r3, [sp, #68]
 124:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2241              		.loc 1 124 3 is_stmt 1 view .LVU591
 124:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2242              		.loc 1 124 22 is_stmt 0 view .LVU592
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 63


 2243 000a 0793     		str	r3, [sp, #28]
 2244 000c 0893     		str	r3, [sp, #32]
 2245 000e 0993     		str	r3, [sp, #36]
 2246 0010 0A93     		str	r3, [sp, #40]
 2247 0012 0B93     		str	r3, [sp, #44]
 125:Core/Src/main.c **** 
 2248              		.loc 1 125 3 is_stmt 1 view .LVU593
 125:Core/Src/main.c **** 
 2249              		.loc 1 125 28 is_stmt 0 view .LVU594
 2250 0014 0193     		str	r3, [sp, #4]
 2251 0016 0293     		str	r3, [sp, #8]
 2252 0018 0393     		str	r3, [sp, #12]
 2253 001a 0493     		str	r3, [sp, #16]
 2254 001c 0593     		str	r3, [sp, #20]
 2255 001e 0693     		str	r3, [sp, #24]
 130:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 2256              		.loc 1 130 3 is_stmt 1 view .LVU595
 130:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 2257              		.loc 1 130 36 is_stmt 0 view .LVU596
 2258 0020 0922     		movs	r2, #9
 2259 0022 0C92     		str	r2, [sp, #48]
 131:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 2260              		.loc 1 131 3 is_stmt 1 view .LVU597
 131:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 2261              		.loc 1 131 30 is_stmt 0 view .LVU598
 2262 0024 4FF48032 		mov	r2, #65536
 2263 0028 0D92     		str	r2, [sp, #52]
 132:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2264              		.loc 1 132 3 is_stmt 1 view .LVU599
 132:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2265              		.loc 1 132 36 is_stmt 0 view .LVU600
 2266 002a 0E93     		str	r3, [sp, #56]
 133:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 2267              		.loc 1 133 3 is_stmt 1 view .LVU601
 133:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 2268              		.loc 1 133 30 is_stmt 0 view .LVU602
 2269 002c 0123     		movs	r3, #1
 2270 002e 1093     		str	r3, [sp, #64]
 134:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2271              		.loc 1 134 3 is_stmt 1 view .LVU603
 134:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2272              		.loc 1 134 30 is_stmt 0 view .LVU604
 2273 0030 1293     		str	r3, [sp, #72]
 135:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2274              		.loc 1 135 3 is_stmt 1 view .LVU605
 135:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2275              		.loc 1 135 34 is_stmt 0 view .LVU606
 2276 0032 0223     		movs	r3, #2
 2277 0034 1393     		str	r3, [sp, #76]
 136:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 2278              		.loc 1 136 3 is_stmt 1 view .LVU607
 136:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 2279              		.loc 1 136 35 is_stmt 0 view .LVU608
 2280 0036 1492     		str	r2, [sp, #80]
 137:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2281              		.loc 1 137 3 is_stmt 1 view .LVU609
 137:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 64


 2282              		.loc 1 137 32 is_stmt 0 view .LVU610
 2283 0038 4FF48013 		mov	r3, #1048576
 2284 003c 1593     		str	r3, [sp, #84]
 138:Core/Src/main.c ****   {
 2285              		.loc 1 138 3 is_stmt 1 view .LVU611
 138:Core/Src/main.c ****   {
 2286              		.loc 1 138 7 is_stmt 0 view .LVU612
 2287 003e 0CA8     		add	r0, sp, #48
 2288 0040 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2289              	.LVL149:
 138:Core/Src/main.c ****   {
 2290              		.loc 1 138 6 view .LVU613
 2291 0044 E8B9     		cbnz	r0, .L159
 145:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2292              		.loc 1 145 3 is_stmt 1 view .LVU614
 145:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2293              		.loc 1 145 31 is_stmt 0 view .LVU615
 2294 0046 0F23     		movs	r3, #15
 2295 0048 0793     		str	r3, [sp, #28]
 147:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2296              		.loc 1 147 3 is_stmt 1 view .LVU616
 147:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2297              		.loc 1 147 34 is_stmt 0 view .LVU617
 2298 004a 0223     		movs	r3, #2
 2299 004c 0893     		str	r3, [sp, #32]
 148:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2300              		.loc 1 148 3 is_stmt 1 view .LVU618
 148:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2301              		.loc 1 148 35 is_stmt 0 view .LVU619
 2302 004e 0023     		movs	r3, #0
 2303 0050 0993     		str	r3, [sp, #36]
 149:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2304              		.loc 1 149 3 is_stmt 1 view .LVU620
 149:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2305              		.loc 1 149 36 is_stmt 0 view .LVU621
 2306 0052 4FF48062 		mov	r2, #1024
 2307 0056 0A92     		str	r2, [sp, #40]
 150:Core/Src/main.c **** 
 2308              		.loc 1 150 3 is_stmt 1 view .LVU622
 150:Core/Src/main.c **** 
 2309              		.loc 1 150 36 is_stmt 0 view .LVU623
 2310 0058 0B93     		str	r3, [sp, #44]
 152:Core/Src/main.c ****   {
 2311              		.loc 1 152 3 is_stmt 1 view .LVU624
 152:Core/Src/main.c ****   {
 2312              		.loc 1 152 7 is_stmt 0 view .LVU625
 2313 005a 0121     		movs	r1, #1
 2314 005c 07A8     		add	r0, sp, #28
 2315 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2316              	.LVL150:
 152:Core/Src/main.c ****   {
 2317              		.loc 1 152 6 view .LVU626
 2318 0062 80B9     		cbnz	r0, .L160
 156:Core/Src/main.c ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 2319              		.loc 1 156 3 is_stmt 1 view .LVU627
 156:Core/Src/main.c ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 2320              		.loc 1 156 38 is_stmt 0 view .LVU628
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 65


 2321 0064 1123     		movs	r3, #17
 2322 0066 0193     		str	r3, [sp, #4]
 157:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 2323              		.loc 1 157 3 is_stmt 1 view .LVU629
 157:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 2324              		.loc 1 157 35 is_stmt 0 view .LVU630
 2325 0068 4FF40073 		mov	r3, #512
 2326 006c 0293     		str	r3, [sp, #8]
 158:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 2327              		.loc 1 158 3 is_stmt 1 view .LVU631
 158:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 2328              		.loc 1 158 35 is_stmt 0 view .LVU632
 2329 006e 4FF48003 		mov	r3, #4194304
 2330 0072 0693     		str	r3, [sp, #24]
 159:Core/Src/main.c ****   {
 2331              		.loc 1 159 3 is_stmt 1 view .LVU633
 159:Core/Src/main.c ****   {
 2332              		.loc 1 159 7 is_stmt 0 view .LVU634
 2333 0074 01A8     		add	r0, sp, #4
 2334 0076 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2335              	.LVL151:
 159:Core/Src/main.c ****   {
 2336              		.loc 1 159 6 view .LVU635
 2337 007a 30B9     		cbnz	r0, .L161
 163:Core/Src/main.c **** 
 2338              		.loc 1 163 1 view .LVU636
 2339 007c 17B0     		add	sp, sp, #92
 2340              	.LCFI45:
 2341              		.cfi_remember_state
 2342              		.cfi_def_cfa_offset 4
 2343              		@ sp needed
 2344 007e 5DF804FB 		ldr	pc, [sp], #4
 2345              	.L159:
 2346              	.LCFI46:
 2347              		.cfi_restore_state
 140:Core/Src/main.c ****   }
 2348              		.loc 1 140 5 is_stmt 1 view .LVU637
 2349 0082 FFF7FEFF 		bl	Error_Handler
 2350              	.LVL152:
 2351              	.L160:
 154:Core/Src/main.c ****   }
 2352              		.loc 1 154 5 view .LVU638
 2353 0086 FFF7FEFF 		bl	Error_Handler
 2354              	.LVL153:
 2355              	.L161:
 161:Core/Src/main.c ****   }
 2356              		.loc 1 161 5 view .LVU639
 2357 008a FFF7FEFF 		bl	Error_Handler
 2358              	.LVL154:
 2359              		.cfi_endproc
 2360              	.LFE91:
 2362              		.section	.text.main,"ax",%progbits
 2363              		.align	1
 2364              		.global	main
 2365              		.syntax unified
 2366              		.thumb
 2367              		.thumb_func
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 66


 2368              		.fpu softvfp
 2370              	main:
 2371              	.LFB90:
  74:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 2372              		.loc 1 74 1 view -0
 2373              		.cfi_startproc
 2374              		@ Volatile: function does not return.
 2375              		@ args = 0, pretend = 0, frame = 0
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377 0000 08B5     		push	{r3, lr}
 2378              	.LCFI47:
 2379              		.cfi_def_cfa_offset 8
 2380              		.cfi_offset 3, -8
 2381              		.cfi_offset 14, -4
  82:Core/Src/main.c **** 
 2382              		.loc 1 82 3 view .LVU641
 2383 0002 FFF7FEFF 		bl	HAL_Init
 2384              	.LVL155:
  89:Core/Src/main.c **** 
 2385              		.loc 1 89 3 view .LVU642
 2386 0006 FFF7FEFF 		bl	SystemClock_Config
 2387              	.LVL156:
  96:Core/Src/main.c ****   MX_RTC_Init();
 2388              		.loc 1 96 3 view .LVU643
 2389 000a FFF7FEFF 		bl	MX_GPIO_Init
 2390              	.LVL157:
  97:Core/Src/main.c ****   MX_TIM1_Init();
 2391              		.loc 1 97 3 view .LVU644
 2392 000e FFF7FEFF 		bl	MX_RTC_Init
 2393              	.LVL158:
  98:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 2394              		.loc 1 98 3 view .LVU645
 2395 0012 FFF7FEFF 		bl	MX_TIM1_Init
 2396              	.LVL159:
  99:Core/Src/main.c ****   MX_IWDG_Init();
 2397              		.loc 1 99 3 view .LVU646
 2398 0016 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 2399              	.LVL160:
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2400              		.loc 1 100 3 view .LVU647
 2401 001a FFF7FEFF 		bl	MX_IWDG_Init
 2402              	.LVL161:
 102:Core/Src/main.c ****   /* USER CODE END 2 */
 2403              		.loc 1 102 1 view .LVU648
 2404 001e FFF7FEFF 		bl	user_init
 2405              	.LVL162:
 107:Core/Src/main.c ****   {
 2406              		.loc 1 107 3 view .LVU649
 112:Core/Src/main.c ****   }
 2407              		.loc 1 112 2 view .LVU650
 2408 0022 FFF7FEFF 		bl	user_loop
 2409              	.LVL163:
 2410              		.cfi_endproc
 2411              	.LFE90:
 2413              		.comm	htim1,72,4
 2414              		.comm	hrtc,20,4
 2415              		.comm	hiwdg,12,4
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 67


 2416              		.comm	cc,20,4
 2417              		.comm	testas,64,4
 2418              		.global	LastHour
 2419              		.global	oldTime
 2420              		.global	currTime
 2421              		.section	.bss.currTime,"aw",%nobits
 2422              		.align	2
 2423              		.set	.LANCHOR1,. + 0
 2426              	currTime:
 2427 0000 000000   		.space	3
 2428              		.section	.data.LastHour,"aw"
 2431              	LastHour:
 2432 0000 FF       		.byte	-1
 2433              		.section	.data.oldTime,"aw"
 2434              		.align	2
 2435              		.set	.LANCHOR0,. + 0
 2438              	oldTime:
 2439 0000 FF       		.byte	-1
 2440 0001 FF       		.byte	-1
 2441 0002 FF       		.byte	-1
 2442              		.text
 2443              	.Letext0:
 2444              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\machine
 2445              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\sys\\_s
 2446              		.file 8 "Drivers/CMSIS/Include/core_cm3.h"
 2447              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2448              		.file 10 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2449              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1
 2450              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2451              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2452              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2453              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2454              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2455              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 2456              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 2457              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2458              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2459              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\sys\\l
 2460              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\sys\\_
 2461              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\sys\\r
 2462              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\stdlib
 2463              		.file 25 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 2464              		.file 26 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 2465              		.file 27 "USB_DEVICE/App/usbd_cdc_if.h"
 2466              		.file 28 "Core/Src/USER/circular_buffer.h"
 2467              		.file 29 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2468              		.file 30 "Core/Inc/main.h"
 2469              		.file 31 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 2470              		.file 32 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc_ex.h"
 2471              		.file 33 "USB_DEVICE/App/usb_device.h"
 2472              		.file 34 "c:\\program files (x86)\\gnu tools arm embedded\\arm_gcc\\arm-none-eabi\\include\\string
 2473              		.file 35 "<built-in>"
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 68


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
X:\TMP\USER_T~1\ccQ0JzjO.s:16     .text.MX_GPIO_Init:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:23     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
X:\TMP\USER_T~1\ccQ0JzjO.s:112    .text.MX_GPIO_Init:00000058 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:118    .text.rtc_clean:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:125    .text.rtc_clean:00000000 rtc_clean
X:\TMP\USER_T~1\ccQ0JzjO.s:149    .text.rtc_clean:0000000c $d
X:\TMP\USER_T~1\ccQ0JzjO.s:154    .text.filter_string:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:161    .text.filter_string:00000000 filter_string
X:\TMP\USER_T~1\ccQ0JzjO.s:256    .text.rtc_update:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:263    .text.rtc_update:00000000 rtc_update
X:\TMP\USER_T~1\ccQ0JzjO.s:285    .text.rtc_update:00000010 $d
                            *COM*:00000014 hrtc
X:\TMP\USER_T~1\ccQ0JzjO.s:291    .text.rtc_time_string:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:298    .text.rtc_time_string:00000000 rtc_time_string
X:\TMP\USER_T~1\ccQ0JzjO.s:394    .text.rtc_time_string:00000074 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:401    .text.rtc_date_string:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:408    .text.rtc_date_string:00000000 rtc_date_string
X:\TMP\USER_T~1\ccQ0JzjO.s:506    .text.rtc_date_string:00000074 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:512    .text.rtc_backup_date:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:519    .text.rtc_backup_date:00000000 rtc_backup_date
X:\TMP\USER_T~1\ccQ0JzjO.s:597    .text.rtc_backup_date:00000058 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:603    .text.rtc_int_init:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:610    .text.rtc_int_init:00000000 rtc_int_init
X:\TMP\USER_T~1\ccQ0JzjO.s:628    .text.rtc_int_init:00000010 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:633    .text.circle_reset:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:640    .text.circle_reset:00000000 circle_reset
X:\TMP\USER_T~1\ccQ0JzjO.s:668    .text.circle_push:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:675    .text.circle_push:00000000 circle_push
X:\TMP\USER_T~1\ccQ0JzjO.s:721    .text.circle_pull:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:728    .text.circle_pull:00000000 circle_pull
X:\TMP\USER_T~1\ccQ0JzjO.s:777    .text.circle_push_buf:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:784    .text.circle_push_buf:00000000 circle_push_buf
X:\TMP\USER_T~1\ccQ0JzjO.s:834    .text.circle_available:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:841    .text.circle_available:00000000 circle_available
X:\TMP\USER_T~1\ccQ0JzjO.s:859    .text.circle_free:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:866    .text.circle_free:00000000 circle_free
X:\TMP\USER_T~1\ccQ0JzjO.s:887    .text.user_usb_rx:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:894    .text.user_usb_rx:00000000 user_usb_rx
X:\TMP\USER_T~1\ccQ0JzjO.s:958    .text.user_usb_rx:00000024 $d
                            *COM*:00000014 cc
X:\TMP\USER_T~1\ccQ0JzjO.s:963    .text.user_init:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:970    .text.user_init:00000000 user_init
X:\TMP\USER_T~1\ccQ0JzjO.s:1007   .text.user_init:00000024 $d
                            *COM*:00000040 testas
                            *COM*:00000048 htim1
X:\TMP\USER_T~1\ccQ0JzjO.s:1014   .text.user_seconds_job:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1021   .text.user_seconds_job:00000000 user_seconds_job
X:\TMP\USER_T~1\ccQ0JzjO.s:1048   .text.user_seconds_job:00000018 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:1055   .text.HAL_RTCEx_RTCEventCallback:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1062   .text.HAL_RTCEx_RTCEventCallback:00000000 HAL_RTCEx_RTCEventCallback
X:\TMP\USER_T~1\ccQ0JzjO.s:1084   .text.Error_Handler:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1091   .text.Error_Handler:00000000 Error_Handler
X:\TMP\USER_T~1\ccQ0JzjO.s:1123   .text.rtc_set_date_text:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1130   .text.rtc_set_date_text:00000000 rtc_set_date_text
X:\TMP\USER_T~1\ccQ0JzjO.s:1231   .text.rtc_set_date_text:00000064 $d
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 69


X:\TMP\USER_T~1\ccQ0JzjO.s:1236   .text.rtc_set_time_text:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1243   .text.rtc_set_time_text:00000000 rtc_set_time_text
X:\TMP\USER_T~1\ccQ0JzjO.s:1343   .text.rtc_set_time_text:0000005c $d
X:\TMP\USER_T~1\ccQ0JzjO.s:1349   .rodata.commandcom.str1.4:00000000 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:1353   .text.commandcom:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1360   .text.commandcom:00000000 commandcom
X:\TMP\USER_T~1\ccQ0JzjO.s:1392   .text.commandcom:0000001a $d
X:\TMP\USER_T~1\ccQ0JzjO.s:1412   .text.commandcom:0000002e $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1457   .text.commandcom:00000054 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:1463   .text.user_loop:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1470   .text.user_loop:00000000 user_loop
X:\TMP\USER_T~1\ccQ0JzjO.s:1580   .text.user_loop:0000005c $d
                            *COM*:0000000c hiwdg
X:\TMP\USER_T~1\ccQ0JzjO.s:1586   .text.rtc_check_screwd_calendar:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1593   .text.rtc_check_screwd_calendar:00000000 rtc_check_screwd_calendar
X:\TMP\USER_T~1\ccQ0JzjO.s:1747   .text.rtc_check_screwd_calendar:000000b4 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:1754   .text.MX_RTC_Init:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1760   .text.MX_RTC_Init:00000000 MX_RTC_Init
X:\TMP\USER_T~1\ccQ0JzjO.s:1933   .text.MX_RTC_Init:000000d0 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:1941   .text.MX_TIM1_Init:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:1947   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
X:\TMP\USER_T~1\ccQ0JzjO.s:2159   .text.MX_TIM1_Init:000000d8 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:2165   .text.MX_IWDG_Init:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:2171   .text.MX_IWDG_Init:00000000 MX_IWDG_Init
X:\TMP\USER_T~1\ccQ0JzjO.s:2210   .text.MX_IWDG_Init:00000020 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:2216   .text.SystemClock_Config:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:2223   .text.SystemClock_Config:00000000 SystemClock_Config
X:\TMP\USER_T~1\ccQ0JzjO.s:2363   .text.main:00000000 $t
X:\TMP\USER_T~1\ccQ0JzjO.s:2370   .text.main:00000000 main
X:\TMP\USER_T~1\ccQ0JzjO.s:2431   .data.LastHour:00000000 LastHour
X:\TMP\USER_T~1\ccQ0JzjO.s:2438   .data.oldTime:00000000 oldTime
X:\TMP\USER_T~1\ccQ0JzjO.s:2426   .bss.currTime:00000000 currTime
X:\TMP\USER_T~1\ccQ0JzjO.s:2422   .bss.currTime:00000000 $d
X:\TMP\USER_T~1\ccQ0JzjO.s:2434   .data.oldTime:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_RTC_GetTime
HAL_RTC_GetDate
HAL_RTCEx_BKUPRead
HAL_RTCEx_BKUPWrite
HAL_TIM_Base_Start
HAL_GPIO_TogglePin
strlen
strtok
atoi
HAL_RTC_SetDate
HAL_RTC_SetTime
CDC_Transmit_FS
HAL_IWDG_Refresh
HAL_RTC_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
ARM GAS  X:\TMP\USER_T~1\ccQ0JzjO.s 			page 70


HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_IWDG_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
